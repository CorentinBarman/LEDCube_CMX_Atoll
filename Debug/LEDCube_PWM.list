
LEDCube_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000ae4  20000000  0800b10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020ae4  2**0
                  CONTENTS
  8 .bss          00010e4c  20000ae4  20000ae4  00020ae4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20011930  20011930  00020ae4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020ae4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027ed1  00000000  00000000  00020b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000049cb  00000000  00000000  000489e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000016f8  00000000  00000000  0004d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001500  00000000  00000000  0004eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c2d9  00000000  00000000  0004ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000068ce  00000000  00000000  0005c281  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00062b4f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006abc  00000000  00000000  00062bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         000000cc  00000000  00000000  00069688  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  00069754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000ae4 	.word	0x20000ae4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae54 	.word	0x0800ae54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000ae8 	.word	0x20000ae8
 80001cc:	0800ae54 	.word	0x0800ae54

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f947 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f008 f9e4 	bl	80089a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f95f 	bl	80008c6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f927 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000a38 	.word	0x20000a38
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	2000f95c 	.word	0x2000f95c

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000f95c 	.word	0x2000f95c

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f7      	bcc.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <NVIC_EnableIRQ+0x30>)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	f002 021f 	and.w	r2, r2, #31
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0b      	bge.n	800078c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <NVIC_SetPriority+0x4c>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	3b04      	subs	r3, #4
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078a:	e009      	b.n	80007a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <NVIC_SetPriority+0x50>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	2201      	movs	r2, #1
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	401a      	ands	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fa:	2101      	movs	r1, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	1e59      	subs	r1, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff90 	bl	8000760 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2f 	bl	80006c8 <NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff44 	bl	8000710 <NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff37 	bl	800072c <NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d106      	bne.n	80008fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008fa:	e005      	b.n	8000908 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f023 0304 	bic.w	r3, r3, #4
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800091c:	f000 f802 	bl	8000924 <HAL_SYSTICK_Callback>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	e16b      	b.n	8000c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000950:	2201      	movs	r2, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	429a      	cmp	r2, r3
 800096a:	f040 815a 	bne.w	8000c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d003      	beq.n	800097e <HAL_GPIO_Init+0x4a>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b12      	cmp	r3, #18
 800097c:	d123      	bne.n	80009c6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	691a      	ldr	r2, [r3, #16]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	69b9      	ldr	r1, [r7, #24]
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0203 	and.w	r2, r3, #3
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d00b      	beq.n	8000a1a <HAL_GPIO_Init+0xe6>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d007      	beq.n	8000a1a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0e:	2b11      	cmp	r3, #17
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b12      	cmp	r3, #18
 8000a18:	d130      	bne.n	8000a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a50:	2201      	movs	r2, #1
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	091b      	lsrs	r3, r3, #4
 8000a66:	f003 0201 	and.w	r2, r3, #1
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 80b4 	beq.w	8000c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4a5f      	ldr	r2, [pc, #380]	; (8000c3c <HAL_GPIO_Init+0x308>)
 8000ac0:	4b5e      	ldr	r3, [pc, #376]	; (8000c3c <HAL_GPIO_Init+0x308>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b5c      	ldr	r3, [pc, #368]	; (8000c3c <HAL_GPIO_Init+0x308>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ad6:	4a5a      	ldr	r2, [pc, #360]	; (8000c40 <HAL_GPIO_Init+0x30c>)
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3302      	adds	r3, #2
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	220f      	movs	r2, #15
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <HAL_GPIO_Init+0x310>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d02b      	beq.n	8000b5a <HAL_GPIO_Init+0x226>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <HAL_GPIO_Init+0x314>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d025      	beq.n	8000b56 <HAL_GPIO_Init+0x222>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	; (8000c4c <HAL_GPIO_Init+0x318>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d01f      	beq.n	8000b52 <HAL_GPIO_Init+0x21e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <HAL_GPIO_Init+0x31c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d019      	beq.n	8000b4e <HAL_GPIO_Init+0x21a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	; (8000c54 <HAL_GPIO_Init+0x320>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x216>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <HAL_GPIO_Init+0x324>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x212>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <HAL_GPIO_Init+0x328>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x20e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <HAL_GPIO_Init+0x32c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x20a>
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	e00e      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b3e:	2308      	movs	r3, #8
 8000b40:	e00c      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b42:	2306      	movs	r3, #6
 8000b44:	e00a      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b46:	2305      	movs	r3, #5
 8000b48:	e008      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e004      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b52:	2302      	movs	r3, #2
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <HAL_GPIO_Init+0x228>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	f002 0203 	and.w	r2, r2, #3
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	4093      	lsls	r3, r2
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b6c:	4934      	ldr	r1, [pc, #208]	; (8000c40 <HAL_GPIO_Init+0x30c>)
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b9e:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c1c:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	f67f ae90 	bls.w	8000950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c30:	bf00      	nop
 8000c32:	3724      	adds	r7, #36	; 0x24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40013800 	.word	0x40013800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40021800 	.word	0x40021800
 8000c60:	40021c00 	.word	0x40021c00
 8000c64:	40013c00 	.word	0x40013c00

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	041a      	lsls	r2, r3, #16
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	619a      	str	r2, [r3, #24]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0c8      	b.n	8000e48 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f007 feba 	bl	8008a44 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2224      	movs	r2, #36	; 0x24
 8000cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	f022 0201 	bic.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ce8:	f002 fa52 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8000cec:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4a57      	ldr	r2, [pc, #348]	; (8000e50 <HAL_I2C_Init+0x1b4>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4952      	ldr	r1, [pc, #328]	; (8000e54 <HAL_I2C_Init+0x1b8>)
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d802      	bhi.n	8000d16 <HAL_I2C_Init+0x7a>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	e009      	b.n	8000d2a <HAL_I2C_Init+0x8e>
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d1c:	fb01 f303 	mul.w	r3, r1, r3
 8000d20:	494d      	ldr	r1, [pc, #308]	; (8000e58 <HAL_I2C_Init+0x1bc>)
 8000d22:	fba1 1303 	umull	r1, r3, r1, r3
 8000d26:	099b      	lsrs	r3, r3, #6
 8000d28:	3301      	adds	r3, #1
 8000d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6819      	ldr	r1, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4a47      	ldr	r2, [pc, #284]	; (8000e54 <HAL_I2C_Init+0x1b8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d812      	bhi.n	8000d60 <HAL_I2C_Init+0xc4>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d906      	bls.n	8000d5c <HAL_I2C_Init+0xc0>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	e045      	b.n	8000de8 <HAL_I2C_Init+0x14c>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	e043      	b.n	8000de8 <HAL_I2C_Init+0x14c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10f      	bne.n	8000d88 <HAL_I2C_Init+0xec>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	e010      	b.n	8000daa <HAL_I2C_Init+0x10e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	009a      	lsls	r2, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_Init+0x116>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e01a      	b.n	8000de8 <HAL_I2C_Init+0x14c>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <HAL_I2C_Init+0x134>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dce:	e00b      	b.n	8000de8 <HAL_I2C_Init+0x14c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	009a      	lsls	r2, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	69d1      	ldr	r1, [r2, #28]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6a12      	ldr	r2, [r2, #32]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6911      	ldr	r1, [r2, #16]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68d2      	ldr	r2, [r2, #12]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	6951      	ldr	r1, [r2, #20]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6992      	ldr	r2, [r2, #24]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2220      	movs	r2, #32
 8000e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	000186a0 	.word	0x000186a0
 8000e58:	10624dd3 	.word	0x10624dd3

08000e5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	2310      	movs	r3, #16
 8000e72:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0U, i2sclk = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_I2S_Init+0x2a>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e12b      	b.n	80010de <HAL_I2S_Init+0x282>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a95      	ldr	r2, [pc, #596]	; (80010e8 <HAL_I2S_Init+0x28c>)
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
  HAL_I2S_MspInit(hi2s);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f007 fe07 	bl	8008aa8 <HAL_I2S_MspInit>

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000ea8:	f023 030f 	bic.w	r3, r3, #15
 8000eac:	61d3      	str	r3, [r2, #28]
                                     SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                     SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d061      	beq.n	8000f8a <HAL_I2S_Init+0x12e>
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    /* Set I2S Packet Length value*/
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_I2S_Init+0x78>
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e001      	b.n	8000ed8 <HAL_I2S_Init+0x7c>
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d802      	bhi.n	8000ee6 <HAL_I2S_Init+0x8a>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f002 fa48 	bl	800337c <HAL_RCCEx_GetPeriphCLKFreq>
 8000eec:	60b8      	str	r0, [r7, #8]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef6:	d125      	bne.n	8000f44 <HAL_I2S_Init+0xe8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d010      	beq.n	8000f22 <HAL_I2S_Init+0xc6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	461a      	mov	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1c:	3305      	adds	r3, #5
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	e01f      	b.n	8000f62 <HAL_I2S_Init+0x106>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	3305      	adds	r3, #5
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e00e      	b.n	8000f62 <HAL_I2S_Init+0x106>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	3305      	adds	r3, #5
 8000f60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4a61      	ldr	r2, [pc, #388]	; (80010ec <HAL_I2S_Init+0x290>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	085b      	lsrs	r3, r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d902      	bls.n	8000f96 <HAL_I2S_Init+0x13a>
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d90e      	bls.n	8000fb4 <HAL_I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]

    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f043 0210 	orr.w	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f8ba 	bl	8001124 <HAL_I2S_ErrorCallback>
    return  HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e094      	b.n	80010de <HAL_I2S_Init+0x282>
  }

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6911      	ldr	r1, [r2, #16]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	621a      	str	r2, [r3, #32]

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	b29a      	uxth	r2, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	b298      	uxth	r0, r3
                       (uint16_t)hi2s->Init.CPOL))));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	b29b      	uxth	r3, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx I2SCFGR */
    WRITE_REG(hi2s->Instance->I2SCFGR,tmpreg);
  }
#else
  /* Write to SPIx I2SCFGR */
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d162      	bne.n	80010ce <HAL_I2S_Init+0x272>
  {
  	/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a39      	ldr	r2, [pc, #228]	; (80010f0 <HAL_I2S_Init+0x294>)
 800100c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <HAL_I2S_Init+0x298>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_I2S_Init+0x1c0>
 8001018:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <HAL_I2S_Init+0x29c>)
 800101a:	e001      	b.n	8001020 <HAL_I2S_Init+0x1c4>
 800101c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4933      	ldr	r1, [pc, #204]	; (80010f4 <HAL_I2S_Init+0x298>)
 8001026:	428b      	cmp	r3, r1
 8001028:	d101      	bne.n	800102e <HAL_I2S_Init+0x1d2>
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_I2S_Init+0x29c>)
 800102c:	e001      	b.n	8001032 <HAL_I2S_Init+0x1d6>
 800102e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	61d3      	str	r3, [r2, #28]
                                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <HAL_I2S_Init+0x298>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d101      	bne.n	800104c <HAL_I2S_Init+0x1f0>
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_I2S_Init+0x29c>)
 800104a:	e001      	b.n	8001050 <HAL_I2S_Init+0x1f4>
 800104c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001050:	2202      	movs	r2, #2
 8001052:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <HAL_I2S_Init+0x298>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_I2S_Init+0x206>
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_I2S_Init+0x29c>)
 8001060:	e001      	b.n	8001066 <HAL_I2S_Init+0x20a>
 8001062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	60fb      	str	r3, [r7, #12]

    /* Get the mode to be configured for the extended I2S */
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001072:	d003      	beq.n	800107c <HAL_I2S_Init+0x220>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <HAL_I2S_Init+0x228>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800107c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	e001      	b.n	8001088 <HAL_I2S_Init+0x22c>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	b299      	uxth	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	b298      	uxth	r0, r3
                         (uint16_t)hi2s->Init.CPOL))));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800109e:	4303      	orrs	r3, r0
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	430b      	orrs	r3, r1
 80010a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_I2S_Init+0x298>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_I2S_Init+0x26a>
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_I2S_Init+0x29c>)
 80010c4:	e001      	b.n	80010ca <HAL_I2S_Init+0x26e>
 80010c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	080011ef 	.word	0x080011ef
 80010ec:	cccccccd 	.word	0xcccccccd
 80010f0:	08001309 	.word	0x08001309
 80010f4:	40003800 	.word	0x40003800
 80010f8:	40003400 	.word	0x40003400

080010fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	1c98      	adds	r0, r3, #2
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	6248      	str	r0, [r1, #36]	; 0x24
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b01      	subs	r3, #1
 800115a:	b29a      	uxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001164:	b29b      	uxth	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <I2S_Transmit_IT+0x52>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8001178:	400b      	ands	r3, r1
 800117a:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffb9 	bl	80010fc <HAL_I2S_TxCpltCallback>
  }
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	1c99      	adds	r1, r3, #2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	68d2      	ldr	r2, [r2, #12]
 80011aa:	b292      	uxth	r2, r2
 80011ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10f      	bne.n	80011e6 <I2S_Receive_IT+0x54>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80011d4:	400b      	ands	r3, r1
 80011d6:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff95 	bl	8001110 <HAL_I2S_RxCpltCallback>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	617b      	str	r3, [r7, #20]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b04      	cmp	r3, #4
 8001208:	d13b      	bne.n	8001282 <I2S_IRQHandler+0x94>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	d109      	bne.n	8001228 <I2S_IRQHandler+0x3a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121e:	2b40      	cmp	r3, #64	; 0x40
 8001220:	d102      	bne.n	8001228 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb5 	bl	8001192 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b40      	cmp	r3, #64	; 0x40
 8001230:	d127      	bne.n	8001282 <I2S_IRQHandler+0x94>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b20      	cmp	r3, #32
 800123e:	d120      	bne.n	8001282 <I2S_IRQHandler+0x94>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800124e:	400b      	ands	r3, r1
 8001250:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f043 0202 	orr.w	r2, r3, #2
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff51 	bl	8001124 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b03      	cmp	r3, #3
 800128c:	d137      	bne.n	80012fe <I2S_IRQHandler+0x110>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d109      	bne.n	80012ac <I2S_IRQHandler+0xbe>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	2b80      	cmp	r3, #128	; 0x80
 80012a4:	d102      	bne.n	80012ac <I2S_IRQHandler+0xbe>
      {
        I2S_Transmit_IT(hi2s);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff46 	bl	8001138 <I2S_Transmit_IT>
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d123      	bne.n	80012fe <I2S_IRQHandler+0x110>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	d11c      	bne.n	80012fe <I2S_IRQHandler+0x110>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80012d2:	400b      	ands	r3, r1
 80012d4:	6053      	str	r3, [r2, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f043 0204 	orr.w	r2, r3, #4
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff13 	bl	8001124 <HAL_I2S_ErrorCallback>
    }
  }
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4aa2      	ldr	r2, [pc, #648]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001322:	4ba2      	ldr	r3, [pc, #648]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001324:	e001      	b.n	800132a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001326:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133c:	d007      	beq.n	800134e <HAL_I2SEx_FullDuplex_IRQHandler+0x46>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 80b3 	bne.w	80014b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ac>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b02      	cmp	r3, #2
 8001356:	d10a      	bne.n	800136e <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	2b80      	cmp	r3, #128	; 0x80
 8001364:	d103      	bne.n	800136e <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
 8001366:	2100      	movs	r1, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f95b 	bl	8001624 <I2SEx_FullDuplexTx_IT>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	d111      	bne.n	800139c <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a8a      	ldr	r2, [pc, #552]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_I2SEx_FullDuplex_IRQHandler+0x7e>
 8001382:	4b8a      	ldr	r3, [pc, #552]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001384:	e001      	b.n	800138a <HAL_I2SEx_FullDuplex_IRQHandler+0x82>
 8001386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001390:	2b40      	cmp	r3, #64	; 0x40
 8001392:	d103      	bne.n	800139c <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
 8001394:	2101      	movs	r1, #1
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f9be 	bl	8001718 <I2SEx_FullDuplexRx_IT>
    }

    /* I2Sext Overrun error interrupt occured --------------------------------*/
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d144      	bne.n	8001430 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_I2SEx_FullDuplex_IRQHandler+0xac>
 80013b0:	4b7e      	ldr	r3, [pc, #504]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013b2:	e001      	b.n	80013b8 <HAL_I2SEx_FullDuplex_IRQHandler+0xb0>
 80013b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d136      	bne.n	8001430 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a78      	ldr	r2, [pc, #480]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_I2SEx_FullDuplex_IRQHandler+0xc8>
 80013cc:	4b77      	ldr	r3, [pc, #476]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013ce:	e001      	b.n	80013d4 <HAL_I2SEx_FullDuplex_IRQHandler+0xcc>
 80013d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	4973      	ldr	r1, [pc, #460]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013da:	428a      	cmp	r2, r1
 80013dc:	d101      	bne.n	80013e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xda>
 80013de:	4a73      	ldr	r2, [pc, #460]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013e0:	e001      	b.n	80013e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xde>
 80013e2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80013e6:	6852      	ldr	r2, [r2, #4]
 80013e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80013fc:	400b      	ands	r3, r1
 80013fe:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f043 0202 	orr.w	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fe7a 	bl	8001124 <HAL_I2S_ErrorCallback>
    }

    /* I2S Underrun error interrupt occured ----------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b08      	cmp	r3, #8
 8001438:	f040 80e0 	bne.w	80015fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	2b20      	cmp	r3, #32
 8001448:	f040 80d8 	bne.w	80015fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6859      	ldr	r1, [r3, #4]
 8001456:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800145a:	400b      	ands	r3, r1
 800145c:	6053      	str	r3, [r2, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_I2SEx_FullDuplex_IRQHandler+0x164>
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800146a:	e001      	b.n	8001470 <HAL_I2SEx_FullDuplex_IRQHandler+0x168>
 800146c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	494c      	ldr	r1, [pc, #304]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001476:	428a      	cmp	r2, r1
 8001478:	d101      	bne.n	800147e <HAL_I2SEx_FullDuplex_IRQHandler+0x176>
 800147a:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800147c:	e001      	b.n	8001482 <HAL_I2SEx_FullDuplex_IRQHandler+0x17a>
 800147e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001482:	6852      	ldr	r2, [r2, #4]
 8001484:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001488:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	f043 0204 	orr.w	r2, r3, #4
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe39 	bl	8001124 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80014b2:	e0a3      	b.n	80015fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d111      	bne.n	80014e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a39      	ldr	r2, [pc, #228]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d101      	bne.n	80014cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1c4>
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014ca:	e001      	b.n	80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c8>
 80014cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	2b80      	cmp	r3, #128	; 0x80
 80014d8:	d103      	bne.n	80014e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
 80014da:	2101      	movs	r1, #1
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f8a1 	bl	8001624 <I2SEx_FullDuplexTx_IT>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10a      	bne.n	8001502 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	2b40      	cmp	r3, #64	; 0x40
 80014f8:	d103      	bne.n	8001502 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f90b 	bl	8001718 <I2SEx_FullDuplexRx_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	d132      	bne.n	8001572 <HAL_I2SEx_FullDuplex_IRQHandler+0x26a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	2b20      	cmp	r3, #32
 8001518:	d12b      	bne.n	8001572 <HAL_I2SEx_FullDuplex_IRQHandler+0x26a>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8001528:	400b      	ands	r3, r1
 800152a:	6053      	str	r3, [r2, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_I2SEx_FullDuplex_IRQHandler+0x232>
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001538:	e001      	b.n	800153e <HAL_I2SEx_FullDuplex_IRQHandler+0x236>
 800153a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4919      	ldr	r1, [pc, #100]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001544:	428a      	cmp	r2, r1
 8001546:	d101      	bne.n	800154c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800154a:	e001      	b.n	8001550 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>
 800154c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001550:	6852      	ldr	r2, [r2, #4]
 8001552:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001556:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f043 0202 	orr.w	r2, r3, #2
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fdd9 	bl	8001124 <HAL_I2S_ErrorCallback>
    }

    /* I2Sext Underrun error interrupt occured -------------------------------*/
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b08      	cmp	r3, #8
 800157a:	d140      	bne.n	80015fe <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_I2SEx_FullDuplex_IRQHandler+0x282>
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001588:	e001      	b.n	800158e <HAL_I2SEx_FullDuplex_IRQHandler+0x286>
 800158a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b20      	cmp	r3, #32
 8001596:	d132      	bne.n	80015fe <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a02      	ldr	r2, [pc, #8]	; (80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d106      	bne.n	80015b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a8>
 80015a2:	4b02      	ldr	r3, [pc, #8]	; (80015ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80015a4:	e006      	b.n	80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ac>
 80015a6:	bf00      	nop
 80015a8:	40003800 	.word	0x40003800
 80015ac:	40003400 	.word	0x40003400
 80015b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	4913      	ldr	r1, [pc, #76]	; (8001608 <HAL_I2SEx_FullDuplex_IRQHandler+0x300>)
 80015ba:	428a      	cmp	r2, r1
 80015bc:	d101      	bne.n	80015c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ba>
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <HAL_I2SEx_FullDuplex_IRQHandler+0x304>)
 80015c0:	e001      	b.n	80015c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x2be>
 80015c2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80015c6:	6852      	ldr	r2, [r2, #4]
 80015c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80015dc:	400b      	ands	r3, r1
 80015de:	6053      	str	r3, [r2, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f043 0204 	orr.w	r2, r3, #4
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd95 	bl	8001124 <HAL_I2S_ErrorCallback>
    }
  }
}
 80015fa:	e000      	b.n	80015fe <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80015fc:	bf00      	nop
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40003800 	.word	0x40003800
 800160c:	40003400 	.word	0x40003400

08001610 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <I2SEx_FullDuplexTx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d12a      	bne.n	800168c <I2SEx_FullDuplexTx_IT+0x68>
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	1c98      	adds	r0, r3, #2
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	6248      	str	r0, [r1, #36]	; 0x24
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	855a      	strh	r2, [r3, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d153      	bne.n	8001708 <I2SEx_FullDuplexTx_IT+0xe4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6859      	ldr	r1, [r3, #4]
 800166a:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800166e:	400b      	ands	r3, r1
 8001670:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001676:	b29b      	uxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d145      	bne.n	8001708 <I2SEx_FullDuplexTx_IT+0xe4>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffc3 	bl	8001610 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 800168a:	e03d      	b.n	8001708 <I2SEx_FullDuplexTx_IT+0xe4>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <I2SEx_FullDuplexTx_IT+0xec>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <I2SEx_FullDuplexTx_IT+0x76>
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <I2SEx_FullDuplexTx_IT+0xf0>)
 8001698:	e001      	b.n	800169e <I2SEx_FullDuplexTx_IT+0x7a>
 800169a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c98      	adds	r0, r3, #2
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	6248      	str	r0, [r1, #36]	; 0x24
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d121      	bne.n	8001708 <I2SEx_FullDuplexTx_IT+0xe4>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <I2SEx_FullDuplexTx_IT+0xec>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <I2SEx_FullDuplexTx_IT+0xae>
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <I2SEx_FullDuplexTx_IT+0xf0>)
 80016d0:	e001      	b.n	80016d6 <I2SEx_FullDuplexTx_IT+0xb2>
 80016d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <I2SEx_FullDuplexTx_IT+0xec>)
 80016dc:	428a      	cmp	r2, r1
 80016de:	d101      	bne.n	80016e4 <I2SEx_FullDuplexTx_IT+0xc0>
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <I2SEx_FullDuplexTx_IT+0xf0>)
 80016e2:	e001      	b.n	80016e8 <I2SEx_FullDuplexTx_IT+0xc4>
 80016e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80016e8:	6852      	ldr	r2, [r2, #4]
 80016ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016ee:	605a      	str	r2, [r3, #4]
      if(hi2s->RxXferCount == 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <I2SEx_FullDuplexTx_IT+0xe4>
        hi2s->State = HAL_I2S_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff84 	bl	8001610 <HAL_I2SEx_TxRxCpltCallback>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40003800 	.word	0x40003800
 8001714:	40003400 	.word	0x40003400

08001718 <I2SEx_FullDuplexRx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d12b      	bne.n	8001782 <I2SEx_FullDuplexRx_IT+0x6a>
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	1c99      	adds	r1, r3, #2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	b292      	uxth	r2, r2
 800173c:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	865a      	strh	r2, [r3, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d154      	bne.n	8001800 <I2SEx_FullDuplexRx_IT+0xe8>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8001764:	400b      	ands	r3, r1
 8001766:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d146      	bne.n	8001800 <I2SEx_FullDuplexRx_IT+0xe8>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff48 	bl	8001610 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 8001780:	e03e      	b.n	8001800 <I2SEx_FullDuplexRx_IT+0xe8>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	1c99      	adds	r1, r3, #2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	491d      	ldr	r1, [pc, #116]	; (8001808 <I2SEx_FullDuplexRx_IT+0xf0>)
 8001792:	428a      	cmp	r2, r1
 8001794:	d101      	bne.n	800179a <I2SEx_FullDuplexRx_IT+0x82>
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <I2SEx_FullDuplexRx_IT+0xf4>)
 8001798:	e001      	b.n	800179e <I2SEx_FullDuplexRx_IT+0x86>
 800179a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800179e:	68d2      	ldr	r2, [r2, #12]
 80017a0:	b292      	uxth	r2, r2
 80017a2:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	865a      	strh	r2, [r3, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d121      	bne.n	8001800 <I2SEx_FullDuplexRx_IT+0xe8>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a11      	ldr	r2, [pc, #68]	; (8001808 <I2SEx_FullDuplexRx_IT+0xf0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <I2SEx_FullDuplexRx_IT+0xb2>
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <I2SEx_FullDuplexRx_IT+0xf4>)
 80017c8:	e001      	b.n	80017ce <I2SEx_FullDuplexRx_IT+0xb6>
 80017ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	490d      	ldr	r1, [pc, #52]	; (8001808 <I2SEx_FullDuplexRx_IT+0xf0>)
 80017d4:	428a      	cmp	r2, r1
 80017d6:	d101      	bne.n	80017dc <I2SEx_FullDuplexRx_IT+0xc4>
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <I2SEx_FullDuplexRx_IT+0xf4>)
 80017da:	e001      	b.n	80017e0 <I2SEx_FullDuplexRx_IT+0xc8>
 80017dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80017e0:	6852      	ldr	r2, [r2, #4]
 80017e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017e6:	605a      	str	r2, [r3, #4]
      if(hi2s->TxXferCount == 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <I2SEx_FullDuplexRx_IT+0xe8>
        hi2s->State = HAL_I2S_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff08 	bl	8001610 <HAL_I2SEx_TxRxCpltCallback>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40003800 	.word	0x40003800
 800180c:	40003400 	.word	0x40003400

08001810 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	b08f      	sub	sp, #60	; 0x3c
 8001814:	af0a      	add	r7, sp, #40	; 0x28
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0f7      	b.n	8001a16 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f007 fcb4 	bl	800919c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fe4a 	bl	80044d2 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	687e      	ldr	r6, [r7, #4]
 8001846:	466d      	mov	r5, sp
 8001848:	f106 0410 	add.w	r4, r6, #16
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001858:	e885 0003 	stmia.w	r5, {r0, r1}
 800185c:	1d33      	adds	r3, r6, #4
 800185e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f002 fdd4 	bl	800440e <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fe41 	bl	80044f4 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e04c      	b.n	8001912 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3339      	adds	r3, #57	; 0x39
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	b2d8      	uxtb	r0, r3
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	4602      	mov	r2, r0
 80018a2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b298      	uxth	r0, r3
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	333e      	adds	r3, #62	; 0x3e
 80018b8:	4602      	mov	r2, r0
 80018ba:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	333b      	adds	r3, #59	; 0x3b
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3340      	adds	r3, #64	; 0x40
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3344      	adds	r3, #68	; 0x44
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	334c      	adds	r3, #76	; 0x4c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b0e      	cmp	r3, #14
 8001916:	d9af      	bls.n	8001878 <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e05a      	b.n	80019d4 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	b2d8      	uxtb	r0, r3
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800194a:	4602      	mov	r2, r0
 800194c:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	b298      	uxth	r0, r3
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	333e      	adds	r3, #62	; 0x3e
 8001962:	4602      	mov	r2, r0
 8001964:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3340      	adds	r3, #64	; 0x40
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b0e      	cmp	r3, #14
 80019d8:	d9a1      	bls.n	800191e <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	687e      	ldr	r6, [r7, #4]
 80019e2:	466d      	mov	r5, sp
 80019e4:	f106 0410 	add.w	r4, r6, #16
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f8:	1d33      	adds	r3, r6, #4
 80019fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	f002 fda1 	bl	8004544 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fdc2 	bl	8005598 <USB_DevDisconnect>
 return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a1e <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_PCD_Start+0x16>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e012      	b.n	8001a5a <HAL_PCD_Start+0x3c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fd92 	bl	800556a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fd30 	bl	80044b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <HAL_PCD_IRQHandler+0x218>)
 8001a8c:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fe22 	bl	80056dc <USB_GetMode>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8468 	bne.w	8002370 <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fd8e 	bl	80055c6 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 845e 	beq.w	800236e <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fd85 	bl	80055c6 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6952      	ldr	r2, [r2, #20]
 8001ad0:	f002 0202 	and.w	r2, r2, #2
 8001ad4:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fd73 	bl	80055c6 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001aea:	f040 80b2 	bne.w	8001c52 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fd7a 	bl	80055f0 <USB_ReadDevAllOutEpInterrupt>
 8001afc:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8001afe:	e0a4      	b.n	8001c4a <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8099 	beq.w	8001c3e <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fd9a 	bl	8005650 <USB_ReadDevOutEPInterrupt>
 8001b1c:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d06b      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b34:	461a      	mov	r2, r3
 8001b36:	2301      	movs	r3, #1
 8001b38:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d13c      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	0159      	lsls	r1, r3, #5
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	1ad1      	subs	r1, r2, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4403      	add	r3, r0
 8001b78:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b7c:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4419      	add	r1, r3
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4403      	add	r3, r0
 8001bb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bba:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f007 fb48 	bl	8009258 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d117      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d114      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x19c>
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d108      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	f003 fdb2 	bl	8005764 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f007 fb12 	bl	8009234 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2308      	movs	r3, #8
 8001c20:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	3301      	adds	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f af57 	bne.w	8001b00 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fcb5 	bl	80055c6 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c66:	f040 80c5 	bne.w	8001df4 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fcd6 	bl	8005620 <USB_ReadDevAllInEpInterrupt>
 8001c74:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8001c7a:	e0b7      	b.n	8001dec <HAL_PCD_IRQHandler+0x388>
 8001c7c:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80aa 	beq.w	8001de0 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fcf6 	bl	8005688 <USB_ReadDevInEPInterrupt>
 8001c9c:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d05a      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2301      	movs	r3, #1
 8001cda:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d11b      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3344      	adds	r3, #68	; 0x44
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4403      	add	r3, r0
 8001d04:	3340      	adds	r3, #64	; 0x40
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4419      	add	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4403      	add	r3, r0
 8001d18:	3344      	adds	r3, #68	; 0x44
 8001d1a:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f007 fab3 	bl	800928e <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d116      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x2fa>
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	334c      	adds	r3, #76	; 0x4c
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001d56:	461a      	mov	r2, r3
 8001d58:	2101      	movs	r1, #1
 8001d5a:	f003 fd03 	bl	8005764 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d74:	461a      	mov	r2, r3
 8001d76:	2308      	movs	r3, #8
 8001d78:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d90:	461a      	mov	r2, r3
 8001d92:	2310      	movs	r3, #16
 8001d94:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dac:	461a      	mov	r2, r3
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2302      	movs	r3, #2
 8001dcc:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fcf1 	bl	80027c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3301      	adds	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f af46 	bne.w	8001c80 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fbe4 	bl	80055c6 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e08:	d115      	bne.n	8001e36 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e10:	461a      	mov	r2, r3
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f007 faad 	bl	8009380 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	6952      	ldr	r2, [r2, #20]
 8001e30:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e34:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 fbc3 	bl	80055c6 <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e4a:	d112      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d102      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f007 fa67 	bl	8009330 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	6952      	ldr	r2, [r2, #20]
 8001e6c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e70:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fba5 	bl	80055c6 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e86:	f040 8091 	bne.w	8001fac <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fc7e 	bl	80047a8 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb0:	e014      	b.n	8001edc <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	23ff      	movs	r3, #255	; 0xff
 8001ec2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	23ff      	movs	r3, #255	; 0xff
 8001ed4:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	3301      	adds	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d8e5      	bhi.n	8001eb2 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eec:	461a      	mov	r2, r3
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efa:	461a      	mov	r2, r3
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f08:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d018      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f24:	f043 030b 	orr.w	r3, r3, #11
 8001f28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f32:	461a      	mov	r2, r3
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f043 030b 	orr.w	r3, r3, #11
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	e015      	b.n	8001f70 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f043 030b 	orr.w	r3, r3, #11
 8001f58:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f60:	461a      	mov	r2, r3
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f043 030b 	orr.w	r3, r3, #11
 8001f6e:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f76:	461a      	mov	r2, r3
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f84:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001f96:	461a      	mov	r2, r3
 8001f98:	f003 fbe4 	bl	8005764 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	6952      	ldr	r2, [r2, #20]
 8001fa6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001faa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fb08 	bl	80055c6 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc0:	f040 80da 	bne.w	8002178 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fb95 	bl	80056f8 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	68d2      	ldr	r2, [r2, #12]
 8001fd8:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001fdc:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fc40 	bl	8004868 <USB_GetDevSpeed>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffa:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	e0a9      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	; 0x40
 8002018:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800201a:	f001 f8ad 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 800201e:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4a7b      	ldr	r2, [pc, #492]	; (8002210 <HAL_PCD_IRQHandler+0x7ac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d90c      	bls.n	8002042 <HAL_PCD_IRQHandler+0x5de>
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4a7a      	ldr	r2, [pc, #488]	; (8002214 <HAL_PCD_IRQHandler+0x7b0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d808      	bhi.n	8002042 <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	68d2      	ldr	r2, [r2, #12]
 800203a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	e08f      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4a73      	ldr	r2, [pc, #460]	; (8002214 <HAL_PCD_IRQHandler+0x7b0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d90c      	bls.n	8002064 <HAL_PCD_IRQHandler+0x600>
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4a72      	ldr	r2, [pc, #456]	; (8002218 <HAL_PCD_IRQHandler+0x7b4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d808      	bhi.n	8002064 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	68d2      	ldr	r2, [r2, #12]
 800205c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	e07e      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4a6c      	ldr	r2, [pc, #432]	; (8002218 <HAL_PCD_IRQHandler+0x7b4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d90c      	bls.n	8002086 <HAL_PCD_IRQHandler+0x622>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4a6b      	ldr	r2, [pc, #428]	; (800221c <HAL_PCD_IRQHandler+0x7b8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d808      	bhi.n	8002086 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	e06d      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a64      	ldr	r2, [pc, #400]	; (800221c <HAL_PCD_IRQHandler+0x7b8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d90c      	bls.n	80020a8 <HAL_PCD_IRQHandler+0x644>
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4a63      	ldr	r2, [pc, #396]	; (8002220 <HAL_PCD_IRQHandler+0x7bc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d808      	bhi.n	80020a8 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	68d2      	ldr	r2, [r2, #12]
 80020a0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	e05c      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <HAL_PCD_IRQHandler+0x7bc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d90c      	bls.n	80020ca <HAL_PCD_IRQHandler+0x666>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4a5c      	ldr	r2, [pc, #368]	; (8002224 <HAL_PCD_IRQHandler+0x7c0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d808      	bhi.n	80020ca <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	68d2      	ldr	r2, [r2, #12]
 80020c2:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	e04b      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4a55      	ldr	r2, [pc, #340]	; (8002224 <HAL_PCD_IRQHandler+0x7c0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d90c      	bls.n	80020ec <HAL_PCD_IRQHandler+0x688>
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_PCD_IRQHandler+0x7c4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d808      	bhi.n	80020ec <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	e03a      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_PCD_IRQHandler+0x7c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d90c      	bls.n	800210e <HAL_PCD_IRQHandler+0x6aa>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4a4d      	ldr	r2, [pc, #308]	; (800222c <HAL_PCD_IRQHandler+0x7c8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d808      	bhi.n	800210e <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e029      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_PCD_IRQHandler+0x7c8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d90c      	bls.n	8002130 <HAL_PCD_IRQHandler+0x6cc>
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a45      	ldr	r2, [pc, #276]	; (8002230 <HAL_PCD_IRQHandler+0x7cc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d808      	bhi.n	8002130 <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	68d2      	ldr	r2, [r2, #12]
 8002128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	e018      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <HAL_PCD_IRQHandler+0x7cc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d90c      	bls.n	8002152 <HAL_PCD_IRQHandler+0x6ee>
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <HAL_PCD_IRQHandler+0x7d0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d808      	bhi.n	8002152 <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	68d2      	ldr	r2, [r2, #12]
 800214a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	e007      	b.n	8002162 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	68d2      	ldr	r2, [r2, #12]
 800215c:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8002160:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f007 f8bb 	bl	80092de <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	6952      	ldr	r2, [r2, #20]
 8002172:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002176:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fa22 	bl	80055c6 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b10      	cmp	r3, #16
 800218a:	d174      	bne.n	8002276 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	6992      	ldr	r2, [r2, #24]
 8002196:	f022 0210 	bic.w	r2, r2, #16
 800219a:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 020f 	and.w	r2, r3, #15
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	0c5b      	lsrs	r3, r3, #17
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d138      	bne.n	8002238 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d049      	beq.n	8002266 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6a38      	ldr	r0, [r7, #32]
 80021e6:	f003 f895 	bl	8005314 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f6:	441a      	add	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002208:	441a      	add	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	619a      	str	r2, [r3, #24]
 800220e:	e02a      	b.n	8002266 <HAL_PCD_IRQHandler+0x802>
 8002210:	00d8acbf 	.word	0x00d8acbf
 8002214:	00e4e1bf 	.word	0x00e4e1bf
 8002218:	00f423ff 	.word	0x00f423ff
 800221c:	0106737f 	.word	0x0106737f
 8002220:	011a499f 	.word	0x011a499f
 8002224:	01312cff 	.word	0x01312cff
 8002228:	014ca43f 	.word	0x014ca43f
 800222c:	016e35ff 	.word	0x016e35ff
 8002230:	01a6ab1f 	.word	0x01a6ab1f
 8002234:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	0c5b      	lsrs	r3, r3, #17
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	2b06      	cmp	r3, #6
 8002242:	d110      	bne.n	8002266 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800224a:	2208      	movs	r2, #8
 800224c:	4619      	mov	r1, r3
 800224e:	6a38      	ldr	r0, [r7, #32]
 8002250:	f003 f860 	bl	8005314 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002260:	441a      	add	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	6992      	ldr	r2, [r2, #24]
 8002270:	f042 0210 	orr.w	r2, r2, #16
 8002274:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f9a3 	bl	80055c6 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d10a      	bne.n	80022a0 <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f007 f819 	bl	80092c2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	6952      	ldr	r2, [r2, #20]
 800229a:	f002 0208 	and.w	r2, r2, #8
 800229e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 f98e 	bl	80055c6 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b4:	d10d      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f007 f87f 	bl	80093c0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	6952      	ldr	r2, [r2, #20]
 80022cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022d0:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f975 	bl	80055c6 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022e6:	d10d      	bne.n	8002304 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f007 f854 	bl	800939c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	6952      	ldr	r2, [r2, #20]
 80022fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002302:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f003 f95c 	bl	80055c6 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d10a      	bne.n	8002330 <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f007 f862 	bl	80093e4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	6952      	ldr	r2, [r2, #20]
 800232a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800232e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 f946 	bl	80055c6 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b04      	cmp	r3, #4
 8002342:	d115      	bne.n	8002370 <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f007 f852 	bl	8009400 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	6851      	ldr	r1, [r2, #4]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e000      	b.n	8002370 <HAL_PCD_IRQHandler+0x90c>
      return;
 800236e:	bf00      	nop
    }
  }
}
 8002370:	3730      	adds	r7, #48	; 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop

08002378 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_PCD_SetAddress+0x1a>
 800238e:	2302      	movs	r3, #2
 8002390:	e00f      	b.n	80023b2 <HAL_PCD_SetAddress+0x3a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f8bb 	bl	800551e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	70fb      	strb	r3, [r7, #3]
 80023cc:	460b      	mov	r3, r1
 80023ce:	803b      	strh	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80023d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da0b      	bge.n	80023f8 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	3338      	adds	r3, #56	; 0x38
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e00b      	b.n	8002410 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002416:	b2da      	uxtb	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800241c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	09db      	lsrs	r3, r3, #7
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800242c:	883a      	ldrh	r2, [r7, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	78ba      	ldrb	r2, [r7, #2]
 8002436:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 800244a:	78bb      	ldrb	r3, [r7, #2]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d102      	bne.n	8002456 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_PCD_EP_Open+0xaa>
 8002460:	2302      	movs	r3, #2
 8002462:	e00e      	b.n	8002482 <HAL_PCD_EP_Open+0xc8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fa2d 	bl	80048d2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8002480:	7afb      	ldrb	r3, [r7, #11]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800249a:	2b00      	cmp	r3, #0
 800249c:	da0b      	bge.n	80024b6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	3338      	adds	r3, #56	; 0x38
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e00b      	b.n	80024ce <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80024da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	09db      	lsrs	r3, r3, #7
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_PCD_EP_Close+0x6e>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e00e      	b.n	8002516 <HAL_PCD_EP_Close+0x8c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 fa6c 	bl	80049e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	460b      	mov	r3, r1
 800252c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800252e:	7afb      	ldrb	r3, [r7, #11]
 8002530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2200      	movs	r2, #0
 800255c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002564:	b2da      	uxtb	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6979      	ldr	r1, [r7, #20]
 8002590:	f002 fd2c 	bl	8004fec <USB_EP0StartXfer>
 8002594:	e008      	b.n	80025a8 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6979      	ldr	r1, [r7, #20]
 80025a4:	f002 fae0 	bl	8004b68 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	3338      	adds	r3, #56	; 0x38
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2201      	movs	r2, #1
 8002620:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002628:	b2da      	uxtb	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	6979      	ldr	r1, [r7, #20]
 8002654:	f002 fcca 	bl	8004fec <USB_EP0StartXfer>
 8002658:	e008      	b.n	800266c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6979      	ldr	r1, [r7, #20]
 8002668:	f002 fa7e 	bl	8004b68 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002686:	2b00      	cmp	r3, #0
 8002688:	da0b      	bge.n	80026a2 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	3338      	adds	r3, #56	; 0x38
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e009      	b.n	80026b6 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80026c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	09db      	lsrs	r3, r3, #7
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_PCD_EP_SetStall+0x70>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e01e      	b.n	8002724 <HAL_PCD_EP_SetStall+0xae>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fe34 	bl	8005362 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	b2d9      	uxtb	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002714:	461a      	mov	r2, r3
 8002716:	f003 f825 	bl	8005764 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273c:	2b00      	cmp	r3, #0
 800273e:	da0b      	bge.n	8002758 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e009      	b.n	800276c <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800277e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	09db      	lsrs	r3, r3, #7
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_PCD_EP_ClrStall+0x70>
 8002798:	2302      	movs	r3, #2
 800279a:	e00e      	b.n	80027ba <HAL_PCD_EP_ClrStall+0x8e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f002 fe4a 	bl	8005444 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b08a      	sub	sp, #40	; 0x28
 80027c6:	af02      	add	r7, sp, #8
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	3338      	adds	r3, #56	; 0x38
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d202      	bcs.n	8002808 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3303      	adds	r3, #3
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002810:	e02b      	b.n	800286a <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	d202      	bcs.n	800282e <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3303      	adds	r3, #3
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	b298      	uxth	r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4603      	mov	r3, r0
 800284c:	6978      	ldr	r0, [r7, #20]
 800284e:	f002 fd2c 	bl	80052aa <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	441a      	add	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	441a      	add	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	b29a      	uxth	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	429a      	cmp	r2, r3
 800287e:	d909      	bls.n	8002894 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002888:	429a      	cmp	r2, r3
 800288a:	d203      	bcs.n	8002894 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1be      	bne.n	8002812 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d110      	bne.n	80028bc <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 800289a:	2201      	movs	r2, #1
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028aa:	4619      	mov	r1, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	4013      	ands	r3, r2
 80028ba:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	70fb      	strb	r3, [r7, #3]
 80028d2:	4613      	mov	r3, r2
 80028d4:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	883a      	ldrh	r2, [r7, #0]
 80028f2:	0411      	lsls	r1, r2, #16
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
 80028fa:	e028      	b.n	800294e <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	4413      	add	r3, r2
 8002908:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e00d      	b.n	800292c <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	3340      	adds	r3, #64	; 0x40
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	4413      	add	r3, r2
 8002924:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	3301      	adds	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	3b01      	subs	r3, #1
 8002932:	429a      	cmp	r2, r3
 8002934:	dbec      	blt.n	8002910 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	3b01      	subs	r3, #1
 800293e:	883a      	ldrh	r2, [r7, #0]
 8002940:	0410      	lsls	r0, r2, #16
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4302      	orrs	r2, r0
 8002946:	3340      	adds	r3, #64	; 0x40
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	887a      	ldrh	r2, [r7, #2]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e22d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d075      	beq.n	8002a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299e:	4ba3      	ldr	r3, [pc, #652]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4ba0      	ldr	r3, [pc, #640]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d112      	bne.n	80029dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4b9d      	ldr	r3, [pc, #628]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c2:	d10b      	bne.n	80029dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	4b99      	ldr	r3, [pc, #612]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x108>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d157      	bne.n	8002a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e208      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCC_OscConfig+0x74>
 80029e6:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	4b90      	ldr	r3, [pc, #576]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xb0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4a8b      	ldr	r2, [pc, #556]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4a88      	ldr	r2, [pc, #544]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	4b87      	ldr	r3, [pc, #540]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xb0>
 8002a18:	4a84      	ldr	r2, [pc, #528]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	4b84      	ldr	r3, [pc, #528]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4a81      	ldr	r2, [pc, #516]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fd fe18 	bl	800066c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fd fe14 	bl	800066c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1cd      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xc0>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fd fe04 	bl	800066c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fd fe00 	bl	800066c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1b9      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0xe8>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x152>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e18d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4956      	ldr	r1, [pc, #344]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e03a      	b.n	8002b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <HAL_RCC_OscConfig+0x2b0>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fd fdb9 	bl	800066c <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fd fdb5 	bl	800066c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e16e      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4943      	ldr	r1, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_RCC_OscConfig+0x2b0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fd fd98 	bl	800066c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fd fd94 	bl	800066c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e14d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d030      	beq.n	8002bcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCC_OscConfig+0x2b4>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fd fd78 	bl	800066c <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fd fd74 	bl	800066c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e12d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x200>
 8002b9e:	e015      	b.n	8002bcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_OscConfig+0x2b4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fd fd61 	bl	800066c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bae:	f7fd fd5d 	bl	800066c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e116      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a0 	beq.w	8002d1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_OscConfig+0x2b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d121      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <HAL_RCC_OscConfig+0x2b8>)
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_RCC_OscConfig+0x2b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fd23 	bl	800066c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e011      	b.n	8002c4e <HAL_RCC_OscConfig+0x2ce>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	42470000 	.word	0x42470000
 8002c34:	42470e80 	.word	0x42470e80
 8002c38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fd fd16 	bl	800066c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0cf      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x478>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
 8002c62:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c64:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	e01c      	b.n	8002caa <HAL_RCC_OscConfig+0x32a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x312>
 8002c78:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c7a:	4b60      	ldr	r3, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x32a>
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fd fcdb 	bl	800066c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fd fcd7 	bl	800066c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e08e      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCC_OscConfig+0x33a>
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fcc5 	bl	800066c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fd fcc1 	bl	800066c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e078      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d10:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d064      	beq.n	8002dec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d05c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d141      	bne.n	8002dba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_RCC_OscConfig+0x480>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fc96 	bl	800066c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fd fc92 	bl	800066c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e04b      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d62:	4926      	ldr	r1, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	019b      	lsls	r3, r3, #6
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_OscConfig+0x480>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fd fc6b 	bl	800066c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fd fc67 	bl	800066c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e020      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x41a>
 8002db8:	e018      	b.n	8002dec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x480>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fd fc54 	bl	800066c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fd fc50 	bl	800066c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x448>
 8002de6:	e001      	b.n	8002dec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470060 	.word	0x42470060

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0ca      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b6      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	494f      	ldr	r1, [pc, #316]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	4b4f      	ldr	r3, [pc, #316]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07d      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06d      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e065      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4936      	ldr	r1, [pc, #216]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fd fbba 	bl	800066c <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd fbb6 	bl	800066c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04d      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 020f 	and.w	r2, r3, #15
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e030      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4911      	ldr	r1, [pc, #68]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f81d 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fd fb1c 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	0800afec 	.word	0x0800afec
 8002fc4:	20000a38 	.word	0x20000a38

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fcc:	b08f      	sub	sp, #60	; 0x3c
 8002fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe0:	4b62      	ldr	r3, [pc, #392]	; (800316c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d007      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x34>
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 80b2 	bne.w	800315a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff6:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002ffa:	e0b1      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffc:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003000:	e0ae      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003002:	4b5a      	ldr	r3, [pc, #360]	; (800316c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300c:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d04e      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003018:	4b54      	ldr	r3, [pc, #336]	; (800316c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	ea01 0103 	and.w	r1, r1, r3
 800302e:	ea02 0204 	and.w	r2, r2, r4
 8003032:	460b      	mov	r3, r1
 8003034:	4614      	mov	r4, r2
 8003036:	0160      	lsls	r0, r4, #5
 8003038:	6278      	str	r0, [r7, #36]	; 0x24
 800303a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800303c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003040:	6278      	str	r0, [r7, #36]	; 0x24
 8003042:	015b      	lsls	r3, r3, #5
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800304a:	1a5b      	subs	r3, r3, r1
 800304c:	eb64 0402 	sbc.w	r4, r4, r2
 8003050:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003054:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003058:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800305c:	ebb8 0803 	subs.w	r8, r8, r3
 8003060:	eb69 0904 	sbc.w	r9, r9, r4
 8003064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800307c:	eb18 0801 	adds.w	r8, r8, r1
 8003080:	eb49 0902 	adc.w	r9, r9, r2
 8003084:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800309c:	4640      	mov	r0, r8
 800309e:	4649      	mov	r1, r9
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	f7fd f8f1 	bl	8000290 <__aeabi_uldivmod>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	e043      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	ea01 0103 	and.w	r1, r1, r3
 80030cc:	ea02 0204 	and.w	r2, r2, r4
 80030d0:	460b      	mov	r3, r1
 80030d2:	4614      	mov	r4, r2
 80030d4:	0160      	lsls	r0, r4, #5
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030e8:	1a5b      	subs	r3, r3, r1
 80030ea:	eb64 0402 	sbc.w	r4, r4, r2
 80030ee:	01a6      	lsls	r6, r4, #6
 80030f0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80030f4:	019d      	lsls	r5, r3, #6
 80030f6:	1aed      	subs	r5, r5, r3
 80030f8:	eb66 0604 	sbc.w	r6, r6, r4
 80030fc:	00f3      	lsls	r3, r6, #3
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	00eb      	lsls	r3, r5, #3
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003110:	186d      	adds	r5, r5, r1
 8003112:	eb46 0602 	adc.w	r6, r6, r2
 8003116:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800311a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800311e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003122:	4655      	mov	r5, sl
 8003124:	465e      	mov	r6, fp
 8003126:	4628      	mov	r0, r5
 8003128:	4631      	mov	r1, r6
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	f04f 0400 	mov.w	r4, #0
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	f7fd f8ac 	bl	8000290 <__aeabi_uldivmod>
 8003138:	4603      	mov	r3, r0
 800313a:	460c      	mov	r4, r1
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	3301      	adds	r3, #1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003158:	e002      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800315c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800315e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003162:	4618      	mov	r0, r3
 8003164:	373c      	adds	r7, #60	; 0x3c
 8003166:	46bd      	mov	sp, r7
 8003168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000a38 	.word	0x20000a38

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4601      	mov	r1, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a9b      	lsrs	r3, r3, #10
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4a03      	ldr	r2, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	0800affc 	.word	0x0800affc

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d035      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031e0:	4b62      	ldr	r3, [pc, #392]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031e6:	f7fd fa41 	bl	800066c <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031ee:	f7fd fa3d 	bl	800066c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0b0      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003200:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800320c:	4958      	ldr	r1, [pc, #352]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	019a      	lsls	r2, r3, #6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003220:	4b52      	ldr	r3, [pc, #328]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003226:	f7fd fa21 	bl	800066c <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800322e:	f7fd fa1d 	bl	800066c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e090      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003240:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8083 	beq.w	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4a44      	ldr	r2, [pc, #272]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003260:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003276:	4a3f      	ldr	r2, [pc, #252]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003278:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003282:	f7fd f9f3 	bl	800066c <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fd f9ef 	bl	800066c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e062      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02f      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d028      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d014      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fd f9bd 	bl	800066c <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd f9b9 	bl	800066c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e02a      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ee      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003324:	d10d      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003326:	4912      	ldr	r1, [pc, #72]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]
 8003340:	e005      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800334c:	6093      	str	r3, [r2, #8]
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	4313      	orrs	r3, r2
 800335e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	42470068 	.word	0x42470068
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000
 8003378:	42470e40 	.word	0x42470e40

0800337c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d13d      	bne.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d12f      	bne.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033b0:	617b      	str	r3, [r7, #20]
          break;
 80033b2:	e02f      	b.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c0:	d108      	bne.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e007      	b.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fe:	0f1b      	lsrs	r3, r3, #28
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
          break;
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
          break;
 8003412:	bf00      	nop
        }
      }
      break;
 8003414:	bf00      	nop
    }
  }
  return frequency;
 8003416:	697b      	ldr	r3, [r7, #20]
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40023800 	.word	0x40023800
 8003428:	00bb8000 	.word	0x00bb8000
 800342c:	007a1200 	.word	0x007a1200
 8003430:	00f42400 	.word	0x00f42400

08003434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e055      	b.n	80034f2 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f005 fb65 	bl	8008b30 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6851      	ldr	r1, [r2, #4]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68d2      	ldr	r2, [r2, #12]
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6912      	ldr	r2, [r2, #16]
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6952      	ldr	r2, [r2, #20]
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6992      	ldr	r2, [r2, #24]
 80034a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	69d2      	ldr	r2, [r2, #28]
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6a12      	ldr	r2, [r2, #32]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6992      	ldr	r2, [r2, #24]
 80034c4:	0c12      	lsrs	r2, r2, #16
 80034c6:	f002 0104 	and.w	r1, r2, #4
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	69d2      	ldr	r2, [r2, #28]
 80034dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e0:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e01d      	b.n	8003548 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d106      	bne.n	8003526 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f005 fb37 	bl	8008b94 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f000 fb7b 	bl	8003c34 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	68d2      	ldr	r2, [r2, #12]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e01d      	b.n	800360a <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f005 fba6 	bl	8008d34 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f000 fb1a 	bl	8003c34 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}  
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fc26 	bl	8003e78 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_TIM_PWM_Start+0x60>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIM_PWM_Start+0x2c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <HAL_TIM_PWM_Start+0x64>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_TIM_PWM_Start+0x30>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_TIM_PWM_Start+0x32>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
} 
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40010000 	.word	0x40010000
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0202 	mvn.w	r2, #2
 80036a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa99 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa8b 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa9c 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0204 	mvn.w	r2, #4
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa6f 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa61 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa72 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0208 	mvn.w	r2, #8
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa45 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa37 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa48 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b10      	cmp	r3, #16
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b10      	cmp	r3, #16
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0210 	mvn.w	r2, #16
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2208      	movs	r2, #8
 80037aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa1b 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa0d 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa1e 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0201 	mvn.w	r2, #1
 80037f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f9e7 	bl	8003bce <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003824:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fde7 	bl	80043fa <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003850:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9e3 	bl	8003c1e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b20      	cmp	r3, #32
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0220 	mvn.w	r2, #32
 800387c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fdb1 	bl	80043e6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e0b4      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x184>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	f200 809f 	bhi.w	80039fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	080039fd 	.word	0x080039fd
 80038cc:	080039fd 	.word	0x080039fd
 80038d0:	080039fd 	.word	0x080039fd
 80038d4:	08003939 	.word	0x08003939
 80038d8:	080039fd 	.word	0x080039fd
 80038dc:	080039fd 	.word	0x080039fd
 80038e0:	080039fd 	.word	0x080039fd
 80038e4:	0800397b 	.word	0x0800397b
 80038e8:	080039fd 	.word	0x080039fd
 80038ec:	080039fd 	.word	0x080039fd
 80038f0:	080039fd 	.word	0x080039fd
 80038f4:	080039bb 	.word	0x080039bb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fade 	bl	8003ec0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	6992      	ldr	r2, [r2, #24]
 800390e:	f042 0208 	orr.w	r2, r2, #8
 8003912:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6992      	ldr	r2, [r2, #24]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	6991      	ldr	r1, [r2, #24]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	6912      	ldr	r2, [r2, #16]
 8003932:	430a      	orrs	r2, r1
 8003934:	619a      	str	r2, [r3, #24]
    }
    break;
 8003936:	e062      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa22 	bl	8003d88 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	6992      	ldr	r2, [r2, #24]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003952:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	6992      	ldr	r2, [r2, #24]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	6991      	ldr	r1, [r2, #24]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	6912      	ldr	r2, [r2, #16]
 8003972:	0212      	lsls	r2, r2, #8
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
    }
    break;
 8003978:	e041      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fb11 	bl	8003fa8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	69d2      	ldr	r2, [r2, #28]
 8003990:	f042 0208 	orr.w	r2, r2, #8
 8003994:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	69d2      	ldr	r2, [r2, #28]
 80039a0:	f022 0204 	bic.w	r2, r2, #4
 80039a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	69d1      	ldr	r1, [r2, #28]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	6912      	ldr	r2, [r2, #16]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	61da      	str	r2, [r3, #28]
    }
    break;
 80039b8:	e021      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb69 	bl	8004098 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	69d2      	ldr	r2, [r2, #28]
 80039d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	69d2      	ldr	r2, [r2, #28]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	69d1      	ldr	r1, [r2, #28]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	6912      	ldr	r2, [r2, #16]
 80039f4:	0212      	lsls	r2, r2, #8
 80039f6:	430a      	orrs	r2, r1
 80039f8:	61da      	str	r2, [r3, #28]
    }
    break;
 80039fa:	e000      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80039fc:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0c8      	b.n	8003bc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d077      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x144>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d80e      	bhi.n	8003a8e <HAL_TIM_ConfigClockSource+0x76>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	f000 808a 	beq.w	8003b8a <HAL_TIM_ConfigClockSource+0x172>
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d802      	bhi.n	8003a80 <HAL_TIM_ConfigClockSource+0x68>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d07e      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8003a7e:	e099      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f000 8089 	beq.w	8003b98 <HAL_TIM_ConfigClockSource+0x180>
 8003a86:	2b30      	cmp	r3, #48	; 0x30
 8003a88:	f000 808d 	beq.w	8003ba6 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8003a8c:	e092      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003a8e:	2b70      	cmp	r3, #112	; 0x70
 8003a90:	d016      	beq.n	8003ac0 <HAL_TIM_ConfigClockSource+0xa8>
 8003a92:	2b70      	cmp	r3, #112	; 0x70
 8003a94:	d804      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x88>
 8003a96:	2b50      	cmp	r3, #80	; 0x50
 8003a98:	d040      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x104>
 8003a9a:	2b60      	cmp	r3, #96	; 0x60
 8003a9c:	d04e      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8003a9e:	e089      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x96>
 8003aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aaa:	d024      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8003aac:	e082      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	6892      	ldr	r2, [r2, #8]
 8003ab8:	f022 0207 	bic.w	r2, r2, #7
 8003abc:	609a      	str	r2, [r3, #8]
    break;
 8003abe:	e079      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f000 fbc9 	bl	8004266 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ae2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]
    break;
 8003af4:	e05e      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6899      	ldr	r1, [r3, #8]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f000 fbae 	bl	8004266 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	6892      	ldr	r2, [r2, #8]
 8003b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b18:	609a      	str	r2, [r3, #8]
    break;
 8003b1a:	e04b      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f000 fb15 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2150      	movs	r1, #80	; 0x50
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fb76 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003b3a:	e03b      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f000 fb38 	bl	80041be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2160      	movs	r1, #96	; 0x60
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fb66 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003b5a:	e02b      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f000 faf5 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fb56 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003b7a:	e01b      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fb4f 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003b88:	e014      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2110      	movs	r1, #16
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fb48 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003b96:	e00d      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fb41 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2130      	movs	r1, #48	; 0x30
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb3a 	bl	8004226 <TIM_ITRx_SetConfig>
    break;
 8003bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a44      	ldr	r2, [pc, #272]	; (8003d5c <TIM_Base_SetConfig+0x128>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <TIM_Base_SetConfig+0x44>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0x44>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a41      	ldr	r2, [pc, #260]	; (8003d60 <TIM_Base_SetConfig+0x12c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0x44>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a40      	ldr	r2, [pc, #256]	; (8003d64 <TIM_Base_SetConfig+0x130>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0x44>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <TIM_Base_SetConfig+0x134>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0x44>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a3e      	ldr	r2, [pc, #248]	; (8003d6c <TIM_Base_SetConfig+0x138>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <TIM_Base_SetConfig+0x48>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <TIM_Base_SetConfig+0x4a>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a31      	ldr	r2, [pc, #196]	; (8003d5c <TIM_Base_SetConfig+0x128>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d02b      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d027      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a2e      	ldr	r2, [pc, #184]	; (8003d60 <TIM_Base_SetConfig+0x12c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d023      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <TIM_Base_SetConfig+0x130>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01f      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <TIM_Base_SetConfig+0x134>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d01b      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <TIM_Base_SetConfig+0x138>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d017      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <TIM_Base_SetConfig+0x13c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a29      	ldr	r2, [pc, #164]	; (8003d74 <TIM_Base_SetConfig+0x140>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00f      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a28      	ldr	r2, [pc, #160]	; (8003d78 <TIM_Base_SetConfig+0x144>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <TIM_Base_SetConfig+0x148>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <TIM_Base_SetConfig+0x14c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0xc0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_Base_SetConfig+0x150>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <TIM_Base_SetConfig+0xc4>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <TIM_Base_SetConfig+0xc6>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <TIM_Base_SetConfig+0x128>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0x102>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <TIM_Base_SetConfig+0x138>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <TIM_Base_SetConfig+0x106>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <TIM_Base_SetConfig+0x108>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40010400 	.word	0x40010400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400
 8003d78:	40014800 	.word	0x40014800
 8003d7c:	40001800 	.word	0x40001800
 8003d80:	40001c00 	.word	0x40001c00
 8003d84:	40002000 	.word	0x40002000

08003d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0210 	bic.w	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dca:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f023 0320 	bic.w	r3, r3, #32
 8003dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <TIM_OC2_SetConfig+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC2_SetConfig+0x74>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <TIM_OC2_SetConfig+0xec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <TIM_OC2_SetConfig+0x78>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <TIM_OC2_SetConfig+0x7a>
 8003e00:	2300      	movs	r3, #0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d021      	beq.n	8003e4a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e20:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400

08003e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1a      	ldr	r2, [r3, #32]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f023 0302 	bic.w	r3, r3, #2
 8003f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <TIM_OC1_SetConfig+0xe0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC1_SetConfig+0x70>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <TIM_OC1_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <TIM_OC1_SetConfig+0x74>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <TIM_OC1_SetConfig+0x76>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01e      	beq.n	8003f78 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 0308 	bic.w	r3, r3, #8
 8003f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
} 
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <TIM_OC3_SetConfig+0xe8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC3_SetConfig+0x72>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <TIM_OC3_SetConfig+0xec>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <TIM_OC3_SetConfig+0x76>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <TIM_OC3_SetConfig+0x78>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d021      	beq.n	8004068 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800404e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40010400 	.word	0x40010400

08004098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a14      	ldr	r2, [pc, #80]	; (8004150 <TIM_OC4_SetConfig+0xb8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC4_SetConfig+0x74>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <TIM_OC4_SetConfig+0xbc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <TIM_OC4_SetConfig+0x78>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <TIM_OC4_SetConfig+0x7a>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800411c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	019b      	lsls	r3, r3, #6
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40010000 	.word	0x40010000
 8004154:	40010400 	.word	0x40010400

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f023 030a 	bic.w	r3, r3, #10
 800419c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b087      	sub	sp, #28
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0210 	bic.w	r2, r3, #16
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	031b      	lsls	r3, r3, #12
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004244:	887b      	ldrh	r3, [r7, #2]
 8004246:	f043 0307 	orr.w	r3, r3, #7
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004284:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	431a      	orrs	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4313      	orrs	r3, r2
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	609a      	str	r2, [r3, #8]
} 
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042be:	2302      	movs	r3, #2
 80042c0:	e032      	b.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6852      	ldr	r2, [r2, #4]
 80042dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042e0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	6851      	ldr	r1, [r2, #4]
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	6892      	ldr	r2, [r2, #8]
 80042fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004302:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	6891      	ldr	r1, [r2, #8]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	6852      	ldr	r2, [r2, #4]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
} 
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800434c:	2302      	movs	r3, #2
 800434e:	e044      	b.n	80043da <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800440e:	b084      	sub	sp, #16
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	f107 0014 	add.w	r0, r7, #20
 800441c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	2b01      	cmp	r3, #1
 8004424:	d120      	bne.n	8004468 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 800444e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004450:	2b01      	cmp	r3, #1
 8004452:	d105      	bne.n	8004460 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f001 f9c5 	bl	80057f0 <USB_CoreReset>
 8004466:	e00c      	b.n	8004482 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 f9bb 	bl	80057f0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10b      	bne.n	80044a0 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f043 0206 	orr.w	r2, r3, #6
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ac:	b004      	add	sp, #16
 80044ae:	4770      	bx	lr

080044b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d106      	bne.n	8004520 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e008      	b.n	8004532 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8004532:	2032      	movs	r0, #50	; 0x32
 8004534:	f7fc f8a6 	bl	8000684 <HAL_Delay>
  
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004544:	b084      	sub	sp, #16
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	f107 001c 	add.w	r0, r7, #28
 8004552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 800455a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
 800456c:	e005      	b.n	800457a <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004580:	461a      	mov	r2, r3
 8004582:	2300      	movs	r3, #0
 8004584:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	461a      	mov	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10c      	bne.n	80045b8 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80045a4:	2100      	movs	r1, #0
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f946 	bl	8004838 <USB_SetDevSpeed>
 80045ac:	e008      	b.n	80045c0 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80045ae:	2101      	movs	r1, #1
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f941 	bl	8004838 <USB_SetDevSpeed>
 80045b6:	e003      	b.n	80045c0 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80045b8:	2103      	movs	r1, #3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f93c 	bl	8004838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80045c0:	2110      	movs	r1, #16
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8f0 	bl	80047a8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f913 	bl	80047f4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	461a      	mov	r2, r3
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e034      	b.n	8004670 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461c:	d10a      	bne.n	8004634 <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	461a      	mov	r2, r3
 800462c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e008      	b.n	8004646 <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	461a      	mov	r2, r3
 8004666:	23ff      	movs	r3, #255	; 0xff
 8004668:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d8c6      	bhi.n	8004606 <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e034      	b.n	80046e8 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004694:	d10a      	bne.n	80046ac <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e008      	b.n	80046be <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	23ff      	movs	r3, #255	; 0xff
 80046e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d8c6      	bhi.n	800467e <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004704:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	2b01      	cmp	r3, #1
 800470a:	d117      	bne.n	800473c <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	461a      	mov	r2, r3
 8004714:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <USB_DevInit+0x25c>)
 8004716:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	f043 0303 	orr.w	r3, r3, #3
 8004730:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f043 0210 	orr.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <USB_DevInit+0x260>)
 8004762:	4313      	orrs	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f043 0208 	orr.w	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800477a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800479c:	b004      	add	sp, #16
 800479e:	4770      	bx	lr
 80047a0:	00800100 	.word	0x00800100
 80047a4:	803c3800 	.word	0x803c3800

080047a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <USB_FlushTxFifo+0x48>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e006      	b.n	80047e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d0f0      	beq.n	80047c2 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	00030d40 	.word	0x00030d40

080047f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2210      	movs	r2, #16
 8004804:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <USB_FlushRxFifo+0x40>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e006      	b.n	8004826 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b10      	cmp	r3, #16
 8004822:	d0f0      	beq.n	8004806 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	00030d40 	.word	0x00030d40

08004838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	4619      	mov	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0306 	and.w	r3, r3, #6
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e01c      	b.n	80048c4 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0306 	and.w	r3, r3, #6
 8004896:	2b02      	cmp	r3, #2
 8004898:	d007      	beq.n	80048aa <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d102      	bne.n	80048b0 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 80048aa:	2303      	movs	r3, #3
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e009      	b.n	80048c4 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0306 	and.w	r3, r3, #6
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d101      	bne.n	80048c4 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 80048c0:	2302      	movs	r3, #2
 80048c2:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d13e      	bne.n	8004962 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	4619      	mov	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	2301      	movs	r3, #1
 80048fc:	4083      	lsls	r3, r0
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4313      	orrs	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d15c      	bne.n	80049d6 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	4618      	mov	r0, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	78c9      	ldrb	r1, [r1, #3]
 8004948:	0489      	lsls	r1, r1, #18
 800494a:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	7809      	ldrb	r1, [r1, #0]
 8004950:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004952:	430b      	orrs	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	6003      	str	r3, [r0, #0]
 8004960:	e039      	b.n	80049d6 <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	4619      	mov	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004970:	69da      	ldr	r2, [r3, #28]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	2301      	movs	r3, #1
 800497a:	4083      	lsls	r3, r0
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	4313      	orrs	r3, r2
 8004980:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11d      	bne.n	80049d6 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	4618      	mov	r0, r3
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	6839      	ldr	r1, [r7, #0]
 80049c4:	78c9      	ldrb	r1, [r1, #3]
 80049c6:	0489      	lsls	r1, r1, #18
 80049c8:	430b      	orrs	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d4:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d154      	bne.n	8004aa4 <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	4619      	mov	r1, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a1e:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a34:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	461a      	mov	r2, r3
 8004a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a4a:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a43      	ldr	r2, [pc, #268]	; (8004b64 <USB_DeactivateEndpoint+0x180>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e07d      	b.n	8004b5a <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d0e9      	beq.n	8004a4c <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8004a78:	2110      	movs	r1, #16
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fe94 	bl	80047a8 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	4619      	mov	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	2301      	movs	r3, #1
 8004a98:	4083      	lsls	r3, r0
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61cb      	str	r3, [r1, #28]
 8004aa2:	e059      	b.n	8004b58 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac8:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ade:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	461a      	mov	r2, r3
 8004af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004af4:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3301      	adds	r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <USB_DeactivateEndpoint+0x180>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e028      	b.n	8004b5a <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d0ea      	beq.n	8004af6 <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	461a      	mov	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b34:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4083      	lsls	r3, r0
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	43db      	mvns	r3, r3
 8004b54:	4013      	ands	r3, r2
 8004b56:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	00030d40 	.word	0x00030d40

08004b68 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	f040 8146 	bne.w	8004e10 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d13b      	bne.n	8004c04 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bda:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	4619      	mov	r1, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	0cdb      	lsrs	r3, r3, #19
 8004bfe:	04db      	lsls	r3, r3, #19
 8004c00:	610b      	str	r3, [r1, #16]
 8004c02:	e086      	b.n	8004d12 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	4619      	mov	r1, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	0cdb      	lsrs	r3, r3, #19
 8004c26:	04db      	lsls	r3, r3, #19
 8004c28:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	4619      	mov	r1, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c52:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	4618      	mov	r0, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6959      	ldr	r1, [r3, #20]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	440b      	add	r3, r1
 8004c7e:	1e59      	subs	r1, r3, #1
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c88:	04d9      	lsls	r1, r3, #19
 8004c8a:	4b8c      	ldr	r3, [pc, #560]	; (8004ebc <USB_EPStartXfer+0x354>)
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	78db      	ldrb	r3, [r3, #3]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d125      	bne.n	8004d12 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cea:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d10:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10b      	bne.n	8004d30 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	461a      	mov	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	6153      	str	r3, [r2, #20]
 8004d2e:	e016      	b.n	8004d5e <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	78db      	ldrb	r3, [r3, #3]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d012      	beq.n	8004d5e <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	4619      	mov	r1, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	2301      	movs	r3, #1
 8004d58:	4083      	lsls	r3, r0
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d12e      	bne.n	8004dc4 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d113      	bne.n	8004d9e <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	4619      	mov	r1, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d9a:	600b      	str	r3, [r1, #0]
 8004d9c:	e012      	b.n	8004dc4 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	4619      	mov	r1, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de8:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	f040 80f5 	bne.w	8004fde <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	68d9      	ldr	r1, [r3, #12]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	b298      	uxth	r0, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4603      	mov	r3, r0
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fa4e 	bl	80052aa <USB_WritePacket>
 8004e0e:	e0e6      	b.n	8004fde <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	4619      	mov	r1, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	0cdb      	lsrs	r3, r3, #19
 8004e32:	04db      	lsls	r3, r3, #19
 8004e34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	4619      	mov	r1, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d12b      	bne.n	8004ec0 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	4619      	mov	r1, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e90:	4313      	orrs	r3, r2
 8004e92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb8:	610b      	str	r3, [r1, #16]
 8004eba:	e03c      	b.n	8004f36 <USB_EPStartXfer+0x3ce>
 8004ebc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4413      	add	r3, r2
 8004eca:	1e5a      	subs	r2, r3, #1
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	8afb      	ldrh	r3, [r7, #22]
 8004ef8:	04db      	lsls	r3, r3, #19
 8004efa:	4618      	mov	r0, r3
 8004efc:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <USB_EPStartXfer+0x480>)
 8004efe:	4003      	ands	r3, r0
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	4618      	mov	r0, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	8af9      	ldrh	r1, [r7, #22]
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	4313      	orrs	r3, r2
 8004f34:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10a      	bne.n	8004f52 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	78db      	ldrb	r3, [r3, #3]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12e      	bne.n	8004fb8 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d113      	bne.n	8004f92 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f78:	4619      	mov	r1, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e012      	b.n	8004fb8 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fdc:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	1ff80000 	.word	0x1ff80000

08004fec <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	f040 80d2 	bne.w	80051a8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d13b      	bne.n	8005084 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501a:	4619      	mov	r1, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005034:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	4619      	mov	r1, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	4619      	mov	r1, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	0cdb      	lsrs	r3, r3, #19
 800507e:	04db      	lsls	r3, r3, #19
 8005080:	610b      	str	r3, [r1, #16]
 8005082:	e05a      	b.n	800513a <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	4619      	mov	r1, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	0cdb      	lsrs	r3, r3, #19
 80050a6:	04db      	lsls	r3, r3, #19
 80050a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	4619      	mov	r1, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d2:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d903      	bls.n	80050e8 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	4619      	mov	r1, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	4619      	mov	r1, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005136:	4313      	orrs	r3, r2
 8005138:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	4619      	mov	r1, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800515e:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10b      	bne.n	800517e <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	6153      	str	r3, [r2, #20]
 800517c:	e08e      	b.n	800529c <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 808a 	beq.w	800529c <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	4619      	mov	r1, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	2301      	movs	r3, #1
 80051a0:	4083      	lsls	r3, r0
 80051a2:	4313      	orrs	r3, r2
 80051a4:	634b      	str	r3, [r1, #52]	; 0x34
 80051a6:	e079      	b.n	800529c <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	4619      	mov	r1, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	0cdb      	lsrs	r3, r3, #19
 80051ca:	04db      	lsls	r3, r3, #19
 80051cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	4619      	mov	r1, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f6:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	4619      	mov	r1, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	4619      	mov	r1, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005256:	4313      	orrs	r3, r2
 8005258:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10a      	bne.n	8005276 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	4619      	mov	r1, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	4611      	mov	r1, r2
 80052b6:	461a      	mov	r2, r3
 80052b8:	460b      	mov	r3, r1
 80052ba:	71fb      	strb	r3, [r7, #7]
 80052bc:	4613      	mov	r3, r2
 80052be:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 80052c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11a      	bne.n	8005306 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 80052d0:	88bb      	ldrh	r3, [r7, #4]
 80052d2:	3303      	adds	r3, #3
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e00f      	b.n	80052fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	031a      	lsls	r2, r3, #12
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3301      	adds	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	3304      	adds	r3, #4
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	429a      	cmp	r2, r3
 8005304:	d3eb      	bcc.n	80052de <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	3303      	adds	r3, #3
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e00b      	b.n	800534c <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3301      	adds	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3304      	adds	r3, #4
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d3ef      	bcc.n	8005334 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8005354:	68bb      	ldr	r3, [r7, #8]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d130      	bne.n	80053d6 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	db12      	blt.n	80053ae <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	4619      	mov	r1, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ac:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	4619      	mov	r1, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d2:	600b      	str	r3, [r1, #0]
 80053d4:	e02f      	b.n	8005436 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db12      	blt.n	8005410 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	4619      	mov	r1, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800540e:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	4619      	mov	r1, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005434:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d12e      	bne.n	80054b4 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	4619      	mov	r1, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800547a:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d003      	beq.n	800548c <USB_EPClearStall+0x48>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	78db      	ldrb	r3, [r3, #3]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d141      	bne.n	8005510 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	4619      	mov	r1, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b0:	600b      	str	r3, [r1, #0]
 80054b2:	e02d      	b.n	8005510 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	4619      	mov	r1, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054d8:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	78db      	ldrb	r3, [r3, #3]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d003      	beq.n	80054ea <USB_EPClearStall+0xa6>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	78db      	ldrb	r3, [r3, #3]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d112      	bne.n	8005510 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	4619      	mov	r1, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	461a      	mov	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800553e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	4619      	mov	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f023 0302 	bic.w	r3, r3, #2
 8005586:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005588:	2003      	movs	r0, #3
 800558a:	f7fb f87b 	bl	8000684 <HAL_Delay>
  
  return HAL_OK;  
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80055b6:	2003      	movs	r0, #3
 80055b8:	f7fb f864 	bl	8000684 <HAL_Delay>
  
  return HAL_OK;  
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4013      	ands	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  return v;  
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	0c1b      	lsrs	r3, r3, #16
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4013      	ands	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	b29b      	uxth	r3, r3
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  return v;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	01db      	lsls	r3, r3, #7
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  return v;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0301 	and.w	r3, r3, #1
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005714:	f023 0307 	bic.w	r3, r3, #7
 8005718:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0306 	and.w	r3, r3, #6
 8005726:	2b04      	cmp	r3, #4
 8005728:	d10a      	bne.n	8005740 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f043 0303 	orr.w	r3, r3, #3
 800573e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	461a      	mov	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005792:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f043 0318 	orr.w	r3, r3, #24
 80057a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	461a      	mov	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057be:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10c      	bne.n	80057e0 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80057de:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a13      	ldr	r2, [pc, #76]	; (8005854 <USB_CoreReset+0x64>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e01b      	b.n	8005846 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	daf2      	bge.n	80057fc <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f043 0201 	orr.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <USB_CoreReset+0x64>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e006      	b.n	8005846 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d0f0      	beq.n	8005826 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	00030d40 	.word	0x00030d40

08005858 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7c1b      	ldrb	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10e      	bne.n	800588e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005874:	2202      	movs	r2, #2
 8005876:	2181      	movs	r1, #129	; 0x81
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f003 fe55 	bl	8009528 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800587e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005882:	2202      	movs	r2, #2
 8005884:	2101      	movs	r1, #1
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f003 fe4e 	bl	8009528 <USBD_LL_OpenEP>
 800588c:	e00b      	b.n	80058a6 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	2202      	movs	r2, #2
 8005892:	2181      	movs	r1, #129	; 0x81
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f003 fe47 	bl	8009528 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	2202      	movs	r2, #2
 800589e:	2101      	movs	r1, #1
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f003 fe41 	bl	8009528 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80058a6:	2308      	movs	r3, #8
 80058a8:	2203      	movs	r2, #3
 80058aa:	2182      	movs	r1, #130	; 0x82
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f003 fe3b 	bl	8009528 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80058b2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058b6:	f004 fa83 	bl	8009dc0 <malloc>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	e026      	b.n	8005922 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058da:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7c1b      	ldrb	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005908:	2101      	movs	r1, #1
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f003 ff88 	bl	8009820 <USBD_LL_PrepareReceive>
 8005910:	e007      	b.n	8005922 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005918:	2340      	movs	r3, #64	; 0x40
 800591a:	2101      	movs	r1, #1
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f003 ff7f 	bl	8009820 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800593c:	2181      	movs	r1, #129	; 0x81
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f003 fe30 	bl	80095a4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005944:	2101      	movs	r1, #1
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f003 fe2c 	bl	80095a4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800594c:	2182      	movs	r1, #130	; 0x82
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f003 fe28 	bl	80095a4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800596e:	4618      	mov	r0, r3
 8005970:	f004 fa2e 	bl	8009dd0 <free>
    pdev->pClassData = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005998:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d03a      	beq.n	8005a1c <USBD_CDC_Setup+0x94>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d000      	beq.n	80059ac <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80059aa:	e043      	b.n	8005a34 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	88db      	ldrh	r3, [r3, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d029      	beq.n	8005a08 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da11      	bge.n	80059e2 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80059ca:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	88d2      	ldrh	r2, [r2, #6]
 80059d0:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 80059d2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	88db      	ldrh	r3, [r3, #6]
 80059d8:	461a      	mov	r2, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 f870 	bl	8006ac0 <USBD_CtlSendData>
    break;
 80059e0:	e029      	b.n	8005a36 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	785a      	ldrb	r2, [r3, #1]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	88db      	ldrh	r3, [r3, #6]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 80059f8:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	88db      	ldrh	r3, [r3, #6]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f88b 	bl	8006b1c <USBD_CtlPrepareRx>
    break;
 8005a06:	e016      	b.n	8005a36 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	7850      	ldrb	r0, [r2, #1]
 8005a14:	2200      	movs	r2, #0
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	4798      	blx	r3
    break;
 8005a1a:	e00c      	b.n	8005a36 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b0a      	cmp	r3, #10
 8005a22:	d001      	beq.n	8005a28 <USBD_CDC_Setup+0xa0>
 8005a24:	2b0b      	cmp	r3, #11
      break;
 8005a26:	e005      	b.n	8005a34 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8005a28:	2201      	movs	r2, #1
 8005a2a:	4905      	ldr	r1, [pc, #20]	; (8005a40 <USBD_CDC_Setup+0xb8>)
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 f847 	bl	8006ac0 <USBD_CtlSendData>
      break;
 8005a32:	bf00      	nop
    break;
 8005a34:	bf00      	nop
  }
  return USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000b00 	.word	0x20000b00

08005a44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a56:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8005a6e:	2302      	movs	r3, #2
  }
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a8e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f003 fefd 	bl	8009894 <USBD_LL_GetRxDataSize>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4798      	blx	r3

    return USBD_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ae0:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <USBD_CDC_EP0_RxReady+0x46>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005af2:	2bff      	cmp	r3, #255	; 0xff
 8005af4:	d010      	beq.n	8005b18 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005b04:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	22ff      	movs	r2, #255	; 0xff
 8005b14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2243      	movs	r2, #67	; 0x43
 8005b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b32:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000090 	.word	0x20000090

08005b44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2243      	movs	r2, #67	; 0x43
 8005b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b52:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	2000004c 	.word	0x2000004c

08005b64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2243      	movs	r2, #67	; 0x43
 8005b70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	200000d4 	.word	0x200000d4

08005b84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	220a      	movs	r2, #10
 8005b90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b92:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	20000008 	.word	0x20000008

08005ba4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b087      	sub	sp, #28
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005be6:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c16:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c3c:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d110      	bne.n	8005c74 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2181      	movs	r1, #129	; 0x81
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f003 fd9e 	bl	80097ac <USBD_LL_Transmit>
      
      return USBD_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e002      	b.n	8005c7a <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c78:	2302      	movs	r3, #2
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c90:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	7c1b      	ldrb	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cae:	2101      	movs	r1, #1
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f003 fdb5 	bl	8009820 <USBD_LL_PrepareReceive>
 8005cb6:	e007      	b.n	8005cc8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f003 fdac 	bl	8009820 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <USBD_Init+0x2a>
  {
    USBD_ErrLog("Invalid Device handle");
 8005cec:	4814      	ldr	r0, [pc, #80]	; (8005d40 <USBD_Init+0x68>)
 8005cee:	f004 fc05 	bl	800a4fc <iprintf>
 8005cf2:	4814      	ldr	r0, [pc, #80]	; (8005d44 <USBD_Init+0x6c>)
 8005cf4:	f004 fc02 	bl	800a4fc <iprintf>
 8005cf8:	200a      	movs	r0, #10
 8005cfa:	f004 fc17 	bl	800a52c <putchar>
    return USBD_FAIL; 
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e01a      	b.n	8005d38 <USBD_Init+0x60>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	79fa      	ldrb	r2, [r7, #7]
 8005d2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f003 fb73 	bl	800941c <USBD_LL_Init>
  
  return USBD_OK; 
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	0800ae6c 	.word	0x0800ae6c
 8005d44:	0800ae74 	.word	0x0800ae74

08005d48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d006      	beq.n	8005d6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e00a      	b.n	8005d80 <USBD_RegisterClass+0x38>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
 8005d6a:	4808      	ldr	r0, [pc, #32]	; (8005d8c <USBD_RegisterClass+0x44>)
 8005d6c:	f004 fbc6 	bl	800a4fc <iprintf>
 8005d70:	4807      	ldr	r0, [pc, #28]	; (8005d90 <USBD_RegisterClass+0x48>)
 8005d72:	f004 fbc3 	bl	800a4fc <iprintf>
 8005d76:	200a      	movs	r0, #10
 8005d78:	f004 fbd8 	bl	800a52c <putchar>
    status = USBD_FAIL; 
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	0800ae6c 	.word	0x0800ae6c
 8005d90:	0800ae8c 	.word	0x0800ae8c

08005d94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f003 fb91 	bl	80094c4 <USBD_LL_Start>
  
  return USBD_OK;  
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	4611      	mov	r1, r2
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	4611      	mov	r1, r2
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
  return USBD_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fd98 	bl	800696e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005e5a:	f003 031f 	and.w	r3, r3, #31
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d00b      	beq.n	8005e7a <USBD_LL_SetupStage+0x54>
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d011      	beq.n	8005e8a <USBD_LL_SetupStage+0x64>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d117      	bne.n	8005e9a <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9c6 	bl	8006204 <USBD_StdDevReq>
    break;
 8005e78:	e01a      	b.n	8005eb0 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa0e 	bl	80062a4 <USBD_StdItfReq>
    break;
 8005e88:	e012      	b.n	8005eb0 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa39 	bl	800630a <USBD_StdEPReq>
    break;
 8005e98:	e00a      	b.n	8005eb0 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f003 fbb1 	bl	8009610 <USBD_LL_StallEP>
    break;
 8005eae:	bf00      	nop
  }  
  return USBD_OK;  
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b086      	sub	sp, #24
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005ec8:	7afb      	ldrb	r3, [r7, #11]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d138      	bne.n	8005f40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005ed4:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d142      	bne.n	8005f66 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d914      	bls.n	8005f16 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	1ad2      	subs	r2, r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	bf28      	it	cs
 8005f06:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fe22 	bl	8006b58 <USBD_CtlContinueRx>
 8005f14:	e027      	b.n	8005f66 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d105      	bne.n	8005f38 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fe1f 	bl	8006b7c <USBD_CtlSendStatus>
 8005f3e:	e012      	b.n	8005f66 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00c      	beq.n	8005f66 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d107      	bne.n	8005f66 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	7afa      	ldrb	r2, [r7, #11]
 8005f60:	4611      	mov	r1, r2
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	4798      	blx	r3
  }  
  return USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d16c      	bne.n	800605e <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3314      	adds	r3, #20
 8005f88:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d157      	bne.n	8006044 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d915      	bls.n	8005fcc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fd9d 	bl	8006af8 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f003 fc2b 	bl	8009820 <USBD_LL_PrepareReceive>
 8005fca:	e03b      	b.n	8006044 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	68d2      	ldr	r2, [r2, #12]
 8005fd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fd8:	fb02 f201 	mul.w	r2, r2, r1
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11c      	bne.n	800601c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d316      	bcc.n	800601c <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d20f      	bcs.n	800601c <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2100      	movs	r1, #0
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fd79 	bl	8006af8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800600e:	2300      	movs	r3, #0
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f003 fc03 	bl	8009820 <USBD_LL_PrepareReceive>
 800601a:	e013      	b.n	8006044 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800602e:	2b03      	cmp	r3, #3
 8006030:	d105      	bne.n	800603e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fdaf 	bl	8006ba2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800604a:	2b01      	cmp	r3, #1
 800604c:	d11a      	bne.n	8006084 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff feac 	bl	8005dac <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800605c:	e012      	b.n	8006084 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8006070:	2b03      	cmp	r3, #3
 8006072:	d107      	bne.n	8006084 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	7afa      	ldrb	r2, [r7, #11]
 800607e:	4611      	mov	r1, r2
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	4798      	blx	r3
  }  
  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006096:	2340      	movs	r3, #64	; 0x40
 8006098:	2200      	movs	r2, #0
 800609a:	2100      	movs	r1, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f003 fa43 	bl	8009528 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80060aa:	2340      	movs	r3, #64	; 0x40
 80060ac:	2200      	movs	r2, #0
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f003 fa39 	bl	8009528 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2240      	movs	r2, #64	; 0x40
 80060ba:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	4611      	mov	r1, r2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
 
  
  return USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2204      	movs	r2, #4
 8006124:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006166:	2b03      	cmp	r3, #3
 8006168:	d10b      	bne.n	8006182 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6852      	ldr	r2, [r2, #4]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
   
  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	2b09      	cmp	r3, #9
 8006218:	d839      	bhi.n	800628e <USBD_StdDevReq+0x8a>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <USBD_StdDevReq+0x1c>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006271 	.word	0x08006271
 8006224:	08006285 	.word	0x08006285
 8006228:	0800628f 	.word	0x0800628f
 800622c:	0800627b 	.word	0x0800627b
 8006230:	0800628f 	.word	0x0800628f
 8006234:	08006253 	.word	0x08006253
 8006238:	08006249 	.word	0x08006249
 800623c:	0800628f 	.word	0x0800628f
 8006240:	08006267 	.word	0x08006267
 8006244:	0800625d 	.word	0x0800625d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f936 	bl	80064bc <USBD_GetDescriptor>
    break;
 8006250:	e022      	b.n	8006298 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa25 	bl	80066a4 <USBD_SetAddress>
    break;
 800625a:	e01d      	b.n	8006298 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa5e 	bl	8006720 <USBD_SetConfig>
    break;
 8006264:	e018      	b.n	8006298 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fae1 	bl	8006830 <USBD_GetConfig>
    break;
 800626e:	e013      	b.n	8006298 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb0e 	bl	8006894 <USBD_GetStatus>
    break;
 8006278:	e00e      	b.n	8006298 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fb33 	bl	80068e8 <USBD_SetFeature>
    break;
 8006282:	e009      	b.n	8006298 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fb49 	bl	800691e <USBD_ClrFeature>
    break;
 800628c:	e004      	b.n	8006298 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fba9 	bl	80069e8 <USBD_CtlError>
    break;
 8006296:	bf00      	nop
  }
  
  return ret;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop

080062a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d11b      	bne.n	80062f4 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	889b      	ldrh	r3, [r3, #4]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d811      	bhi.n	80062ea <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	88db      	ldrh	r3, [r3, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d110      	bne.n	80062fe <USBD_StdItfReq+0x5a>
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fc4a 	bl	8006b7c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80062e8:	e009      	b.n	80062fe <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fb7b 	bl	80069e8 <USBD_CtlError>
    break;
 80062f2:	e004      	b.n	80062fe <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fb76 	bl	80069e8 <USBD_CtlError>
    break;
 80062fc:	e000      	b.n	8006300 <USBD_StdItfReq+0x5c>
    break;
 80062fe:	bf00      	nop
  }
  return USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	889b      	ldrh	r3, [r3, #4]
 800631c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006326:	2b20      	cmp	r3, #32
 8006328:	d108      	bne.n	800633c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
    
    return USBD_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	e0ba      	b.n	80064b2 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d039      	beq.n	80063b8 <USBD_StdEPReq+0xae>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d002      	beq.n	800634e <USBD_StdEPReq+0x44>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d06b      	beq.n	8006424 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800634c:	e0b0      	b.n	80064b0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006354:	2b02      	cmp	r3, #2
 8006356:	d002      	beq.n	800635e <USBD_StdEPReq+0x54>
 8006358:	2b03      	cmp	r3, #3
 800635a:	d00c      	beq.n	8006376 <USBD_StdEPReq+0x6c>
 800635c:	e025      	b.n	80063aa <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d027      	beq.n	80063b4 <USBD_StdEPReq+0xaa>
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d024      	beq.n	80063b4 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f003 f94e 	bl	8009610 <USBD_LL_StallEP>
      break;	
 8006374:	e01e      	b.n	80063b4 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <USBD_StdEPReq+0x8a>
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d004      	beq.n	8006394 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f003 f93e 	bl	8009610 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fbea 	bl	8006b7c <USBD_CtlSendStatus>
      break;
 80063a8:	e005      	b.n	80063b6 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fb1b 	bl	80069e8 <USBD_CtlError>
      break;    
 80063b2:	e000      	b.n	80063b6 <USBD_StdEPReq+0xac>
      break;	
 80063b4:	bf00      	nop
    break;
 80063b6:	e07b      	b.n	80064b0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d002      	beq.n	80063c8 <USBD_StdEPReq+0xbe>
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d00c      	beq.n	80063e0 <USBD_StdEPReq+0xd6>
 80063c6:	e024      	b.n	8006412 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d026      	beq.n	800641c <USBD_StdEPReq+0x112>
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d023      	beq.n	800641c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f003 f919 	bl	8009610 <USBD_LL_StallEP>
      break;	
 80063de:	e01d      	b.n	800641c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	885b      	ldrh	r3, [r3, #2]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11b      	bne.n	8006420 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f003 f940 	bl	800967c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fbb6 	bl	8006b7c <USBD_CtlSendStatus>
      break;
 8006410:	e006      	b.n	8006420 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fae7 	bl	80069e8 <USBD_CtlError>
      break;    
 800641a:	e002      	b.n	8006422 <USBD_StdEPReq+0x118>
      break;	
 800641c:	bf00      	nop
 800641e:	e047      	b.n	80064b0 <USBD_StdEPReq+0x1a6>
      break;
 8006420:	bf00      	nop
    break;
 8006422:	e045      	b.n	80064b0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800642a:	2b02      	cmp	r3, #2
 800642c:	d002      	beq.n	8006434 <USBD_StdEPReq+0x12a>
 800642e:	2b03      	cmp	r3, #3
 8006430:	d00b      	beq.n	800644a <USBD_StdEPReq+0x140>
 8006432:	e036      	b.n	80064a2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643a:	2b00      	cmp	r3, #0
 800643c:	d036      	beq.n	80064ac <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f003 f8e4 	bl	8009610 <USBD_LL_StallEP>
      break;	
 8006448:	e030      	b.n	80064ac <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800644a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	da08      	bge.n	8006464 <USBD_StdEPReq+0x15a>
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006458:	3301      	adds	r3, #1
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	3304      	adds	r3, #4
 8006462:	e007      	b.n	8006474 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800646a:	3310      	adds	r3, #16
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	3304      	adds	r3, #4
 8006474:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f003 f934 	bl	80096e8 <USBD_LL_IsStallEP>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e002      	b.n	8006494 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006494:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006496:	2202      	movs	r2, #2
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb10 	bl	8006ac0 <USBD_CtlSendData>
      break;
 80064a0:	e005      	b.n	80064ae <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa9f 	bl	80069e8 <USBD_CtlError>
      break;
 80064aa:	e000      	b.n	80064ae <USBD_StdEPReq+0x1a4>
      break;	
 80064ac:	bf00      	nop
    break;
 80064ae:	bf00      	nop
  }
  return ret;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	885b      	ldrh	r3, [r3, #2]
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	f200 80c9 	bhi.w	8006668 <USBD_GetDescriptor+0x1ac>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <USBD_GetDescriptor+0x20>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064f9 	.word	0x080064f9
 80064e0:	08006511 	.word	0x08006511
 80064e4:	08006551 	.word	0x08006551
 80064e8:	08006669 	.word	0x08006669
 80064ec:	08006669 	.word	0x08006669
 80064f0:	08006615 	.word	0x08006615
 80064f4:	0800663b 	.word	0x0800663b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	7c12      	ldrb	r2, [r2, #16]
 8006504:	f107 010a 	add.w	r1, r7, #10
 8006508:	4610      	mov	r0, r2
 800650a:	4798      	blx	r3
 800650c:	60f8      	str	r0, [r7, #12]
    break;
 800650e:	e0b0      	b.n	8006672 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7c1b      	ldrb	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10d      	bne.n	8006534 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f107 020a 	add.w	r2, r7, #10
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
 8006528:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	2202      	movs	r2, #2
 8006530:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006532:	e09e      	b.n	8006672 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f107 020a 	add.w	r2, r7, #10
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	2202      	movs	r2, #2
 800654c:	701a      	strb	r2, [r3, #0]
    break;
 800654e:	e090      	b.n	8006672 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	885b      	ldrh	r3, [r3, #2]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b05      	cmp	r3, #5
 8006558:	d856      	bhi.n	8006608 <USBD_GetDescriptor+0x14c>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <USBD_GetDescriptor+0xa4>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006579 	.word	0x08006579
 8006564:	08006591 	.word	0x08006591
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065c1 	.word	0x080065c1
 8006570:	080065d9 	.word	0x080065d9
 8006574:	080065f1 	.word	0x080065f1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 010a 	add.w	r1, r7, #10
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
      break;
 800658e:	e040      	b.n	8006612 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	7c12      	ldrb	r2, [r2, #16]
 800659c:	f107 010a 	add.w	r1, r7, #10
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
      break;
 80065a6:	e034      	b.n	8006612 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 010a 	add.w	r1, r7, #10
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
      break;
 80065be:	e028      	b.n	8006612 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	7c12      	ldrb	r2, [r2, #16]
 80065cc:	f107 010a 	add.w	r1, r7, #10
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	60f8      	str	r0, [r7, #12]
      break;
 80065d6:	e01c      	b.n	8006612 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7c12      	ldrb	r2, [r2, #16]
 80065e4:	f107 010a 	add.w	r1, r7, #10
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
      break;
 80065ee:	e010      	b.n	8006612 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7c12      	ldrb	r2, [r2, #16]
 80065fc:	f107 010a 	add.w	r1, r7, #10
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
      break;
 8006606:	e004      	b.n	8006612 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9ec 	bl	80069e8 <USBD_CtlError>
      return;
 8006610:	e044      	b.n	800669c <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8006612:	e02e      	b.n	8006672 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	7c1b      	ldrb	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	f107 020a 	add.w	r2, r7, #10
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
 800662c:	60f8      	str	r0, [r7, #12]
      break;
 800662e:	e020      	b.n	8006672 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9d8 	bl	80069e8 <USBD_CtlError>
      return;
 8006638:	e030      	b.n	800669c <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7c1b      	ldrb	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10d      	bne.n	800665e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	f107 020a 	add.w	r2, r7, #10
 800664e:	4610      	mov	r0, r2
 8006650:	4798      	blx	r3
 8006652:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	2207      	movs	r2, #7
 800665a:	701a      	strb	r2, [r3, #0]
      break; 
 800665c:	e009      	b.n	8006672 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9c1 	bl	80069e8 <USBD_CtlError>
      return;
 8006666:	e019      	b.n	800669c <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9bc 	bl	80069e8 <USBD_CtlError>
    return;
 8006670:	e014      	b.n	800669c <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006672:	897b      	ldrh	r3, [r7, #10]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d011      	beq.n	800669c <USBD_GetDescriptor+0x1e0>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00d      	beq.n	800669c <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	88da      	ldrh	r2, [r3, #6]
 8006684:	897b      	ldrh	r3, [r7, #10]
 8006686:	4293      	cmp	r3, r2
 8006688:	bf28      	it	cs
 800668a:	4613      	movcs	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006690:	897b      	ldrh	r3, [r7, #10]
 8006692:	461a      	mov	r2, r3
 8006694:	68f9      	ldr	r1, [r7, #12]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa12 	bl	8006ac0 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop

080066a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	889b      	ldrh	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d12c      	bne.n	8006710 <USBD_SetAddress+0x6c>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	88db      	ldrh	r3, [r3, #6]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d128      	bne.n	8006710 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d104      	bne.n	80066de <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f986 	bl	80069e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80066dc:	e01c      	b.n	8006718 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7bfa      	ldrb	r2, [r7, #15]
 80066e2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f003 f828 	bl	8009740 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa43 	bl	8006b7c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006704:	e008      	b.n	8006718 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800670e:	e003      	b.n	8006718 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f968 	bl	80069e8 <USBD_CtlError>
  } 
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	885b      	ldrh	r3, [r3, #2]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	4b3e      	ldr	r3, [pc, #248]	; (800682c <USBD_SetConfig+0x10c>)
 8006732:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <USBD_SetConfig+0x10c>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d904      	bls.n	8006746 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f952 	bl	80069e8 <USBD_CtlError>
 8006744:	e06f      	b.n	8006826 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800674c:	2b02      	cmp	r3, #2
 800674e:	d002      	beq.n	8006756 <USBD_SetConfig+0x36>
 8006750:	2b03      	cmp	r3, #3
 8006752:	d023      	beq.n	800679c <USBD_SetConfig+0x7c>
 8006754:	e062      	b.n	800681c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8006756:	4b35      	ldr	r3, [pc, #212]	; (800682c <USBD_SetConfig+0x10c>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01a      	beq.n	8006794 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <USBD_SetConfig+0x10c>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2203      	movs	r2, #3
 800676c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006770:	4b2e      	ldr	r3, [pc, #184]	; (800682c <USBD_SetConfig+0x10c>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fb23 	bl	8005dc2 <USBD_SetClassConfig>
 800677c:	4603      	mov	r3, r0
 800677e:	2b02      	cmp	r3, #2
 8006780:	d104      	bne.n	800678c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f92f 	bl	80069e8 <USBD_CtlError>
          return;
 800678a:	e04c      	b.n	8006826 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f9f5 	bl	8006b7c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8006792:	e048      	b.n	8006826 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f9f1 	bl	8006b7c <USBD_CtlSendStatus>
      break;
 800679a:	e044      	b.n	8006826 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800679c:	4b23      	ldr	r3, [pc, #140]	; (800682c <USBD_SetConfig+0x10c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d112      	bne.n	80067ca <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <USBD_SetConfig+0x10c>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <USBD_SetConfig+0x10c>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fb1f 	bl	8005e00 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9da 	bl	8006b7c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80067c8:	e02d      	b.n	8006826 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <USBD_SetConfig+0x10c>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d01d      	beq.n	8006814 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff fb0d 	bl	8005e00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <USBD_SetConfig+0x10c>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <USBD_SetConfig+0x10c>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fae3 	bl	8005dc2 <USBD_SetClassConfig>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d104      	bne.n	800680c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f8ef 	bl	80069e8 <USBD_CtlError>
          return;
 800680a:	e00c      	b.n	8006826 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f9b5 	bl	8006b7c <USBD_CtlSendStatus>
      break;
 8006812:	e008      	b.n	8006826 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9b1 	bl	8006b7c <USBD_CtlSendStatus>
      break;
 800681a:	e004      	b.n	8006826 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f8e2 	bl	80069e8 <USBD_CtlError>
      break;
 8006824:	bf00      	nop
    }
  }
}
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000b01 	.word	0x20000b01

08006830 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d004      	beq.n	800684c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f8cf 	bl	80069e8 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800684a:	e01f      	b.n	800688c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006852:	2b02      	cmp	r3, #2
 8006854:	d002      	beq.n	800685c <USBD_GetConfig+0x2c>
 8006856:	2b03      	cmp	r3, #3
 8006858:	d00b      	beq.n	8006872 <USBD_GetConfig+0x42>
 800685a:	e012      	b.n	8006882 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8006866:	2201      	movs	r2, #1
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f928 	bl	8006ac0 <USBD_CtlSendData>
      break;
 8006870:	e00c      	b.n	800688c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8006876:	2201      	movs	r2, #1
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f920 	bl	8006ac0 <USBD_CtlSendData>
      break;
 8006880:	e004      	b.n	800688c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f8af 	bl	80069e8 <USBD_CtlError>
      break;
 800688a:	bf00      	nop
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80068a4:	3b02      	subs	r3, #2
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d815      	bhi.n	80068d6 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f043 0202 	orr.w	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80068ca:	2202      	movs	r2, #2
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8f6 	bl	8006ac0 <USBD_CtlSendData>
                      2);
    break;
 80068d4:	e004      	b.n	80068e0 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f885 	bl	80069e8 <USBD_CtlError>
    break;
 80068de:	bf00      	nop
  }
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	885b      	ldrh	r3, [r3, #2]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10d      	bne.n	8006916 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f933 	bl	8006b7c <USBD_CtlSendStatus>
  }

}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800692e:	3b02      	subs	r3, #2
 8006930:	2b01      	cmp	r3, #1
 8006932:	d812      	bhi.n	800695a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d113      	bne.n	8006964 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f912 	bl	8006b7c <USBD_CtlSendStatus>
    }
    break;
 8006958:	e004      	b.n	8006964 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f843 	bl	80069e8 <USBD_CtlError>
    break;
 8006962:	e000      	b.n	8006966 <USBD_ClrFeature+0x48>
    break;
 8006964:	bf00      	nop
  }
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785a      	ldrb	r2, [r3, #1]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	3302      	adds	r3, #2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b29a      	uxth	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	3303      	adds	r3, #3
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	b29b      	uxth	r3, r3
 800699c:	4413      	add	r3, r2
 800699e:	b29a      	uxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	3304      	adds	r3, #4
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	3305      	adds	r3, #5
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	4413      	add	r3, r2
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	3306      	adds	r3, #6
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	3307      	adds	r3, #7
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	80da      	strh	r2, [r3, #6]

}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f002 fe0b 	bl	8009610 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80069fa:	2100      	movs	r1, #0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f002 fe07 	bl	8009610 <USBD_LL_StallEP>
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d033      	beq.n	8006a88 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f835 	bl	8006a90 <USBD_GetLen>
 8006a26:	4603      	mov	r3, r0
 8006a28:	3301      	adds	r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	75fa      	strb	r2, [r7, #23]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4413      	add	r3, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	8812      	ldrh	r2, [r2, #0]
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	75fa      	strb	r2, [r7, #23]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4413      	add	r3, r2
 8006a54:	2203      	movs	r2, #3
 8006a56:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8006a58:	e012      	b.n	8006a80 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	75fa      	strb	r2, [r7, #23]
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	441a      	add	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	60f9      	str	r1, [r7, #12]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	75fa      	strb	r2, [r7, #23]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e8      	bne.n	8006a5a <USBD_GetString+0x50>
    }
  } 
}
 8006a88:	bf00      	nop
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006a9c:	e005      	b.n	8006aaa <USBD_GetLen+0x1a>
    {
        len++;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f5      	bne.n	8006a9e <USBD_GetLen+0xe>
    }

    return len;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f002 fe5f 	bl	80097ac <USBD_LL_Transmit>
  
  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f002 fe4d 	bl	80097ac <USBD_LL_Transmit>
  
  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8006b32:	88fa      	ldrh	r2, [r7, #6]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	2100      	movs	r1, #0
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f002 fe69 	bl	8009820 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f002 fe57 	bl	8009820 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2204      	movs	r2, #4
 8006b88:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fe0a 	bl	80097ac <USBD_LL_Transmit>
  
  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2205      	movs	r2, #5
 8006bae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fe31 	bl	8009820 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UserCode_Init>:
uint8_t vcp_data[VCP_BUFFER_SIZE] = "";
uint8_t vcp_result;


void UserCode_Init()
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bd2:	4806      	ldr	r0, [pc, #24]	; (8006bec <UserCode_Init+0x24>)
 8006bd4:	f7fa f848 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bde:	4803      	ldr	r0, [pc, #12]	; (8006bec <UserCode_Init+0x24>)
 8006be0:	f7fa f842 	bl	8000c68 <HAL_GPIO_WritePin>

	LED_init_for_measures();
 8006be4:	f000 fc34 	bl	8007450 <LED_init_for_measures>
	//sequence_InitTestSequence();
}
 8006be8:	bf00      	nop
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40020c00 	.word	0x40020c00

08006bf0 <UserCode_While>:

void UserCode_While()
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
	// Check if any data has been received on the USB Virtual Com Port (VCP)
	if(VCP_retrieveInputData(vcp_data, &vcp_length) != 0)
 8006bf4:	490c      	ldr	r1, [pc, #48]	; (8006c28 <UserCode_While+0x38>)
 8006bf6:	480d      	ldr	r0, [pc, #52]	; (8006c2c <UserCode_While+0x3c>)
 8006bf8:	f003 f804 	bl	8009c04 <VCP_retrieveInputData>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d010      	beq.n	8006c24 <UserCode_While+0x34>
	{
		// Check that we have no memory overflow
		if(vcp_length > VCP_BUFFER_SIZE)
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <UserCode_While+0x38>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b64      	cmp	r3, #100	; 0x64
 8006c08:	d905      	bls.n	8006c16 <UserCode_While+0x26>
		{
			// THE VCP buffer is too small ! The program is already corrupt at this point !
			// Increase the VCP buffer size or find a way to limit the partial buffer size.
			assert(0);
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <UserCode_While+0x40>)
 8006c0c:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <UserCode_While+0x44>)
 8006c0e:	212c      	movs	r1, #44	; 0x2c
 8006c10:	4809      	ldr	r0, [pc, #36]	; (8006c38 <UserCode_While+0x48>)
 8006c12:	f003 f867 	bl	8009ce4 <__assert_func>

		// Echo the received data to the PC
		//VCP_SendBuffer(vcp_data, vcp_length);

		// Decode the partial JSON data
		jsonDecoding(vcp_data, vcp_length);
 8006c16:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <UserCode_While+0x38>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4803      	ldr	r0, [pc, #12]	; (8006c2c <UserCode_While+0x3c>)
 8006c20:	f000 fb14 	bl	800724c <jsonDecoding>
	}
}
 8006c24:	bf00      	nop
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	2000f964 	.word	0x2000f964
 8006c2c:	20000b04 	.word	0x20000b04
 8006c30:	0800aea4 	.word	0x0800aea4
 8006c34:	0800afdc 	.word	0x0800afdc
 8006c38:	0800aea8 	.word	0x0800aea8

08006c3c <generalObjectReceived>:
// ------------------------------------------------------------------



void generalObjectReceived()
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	// Debug -> send back the data read
	VCP_SendString("General : ");
 8006c40:	4804      	ldr	r0, [pc, #16]	; (8006c54 <generalObjectReceived+0x18>)
 8006c42:	f002 ff6b 	bl	8009b1c <VCP_SendString>

	VCP_SendJsonObjectReceivedValues(currentObject);
 8006c46:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <generalObjectReceived+0x1c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 fee6 	bl	8009a1c <VCP_SendJsonObjectReceivedValues>
}
 8006c50:	bf00      	nop
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	0800aed4 	.word	0x0800aed4
 8006c58:	2000fac8 	.word	0x2000fac8

08006c5c <jsonResetObjectsFlags>:


void jsonResetObjectsFlags(JsonObject_t *object)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for(i = 0; i < object->numbers_count; i++)
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
 8006c68:	e00a      	b.n	8006c80 <jsonResetObjectsFlags+0x24>
	{
		object->numbers[i]->flag = 0;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2200      	movs	r2, #0
 8006c78:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < object->numbers_count; i++)
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791b      	ldrb	r3, [r3, #4]
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3ef      	bcc.n	8006c6a <jsonResetObjectsFlags+0xe>
	}

	for(i = 0; i < object->strings_count; i++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
 8006c8e:	e00b      	b.n	8006ca8 <jsonResetObjectsFlags+0x4c>
	{
		object->strings[i]->flag = 0;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	for(i = 0; i < object->strings_count; i++)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	7b1b      	ldrb	r3, [r3, #12]
 8006cac:	7bfa      	ldrb	r2, [r7, #15]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3ee      	bcc.n	8006c90 <jsonResetObjectsFlags+0x34>
	}

	for(i = 0; i < object->arrays_count; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
 8006cb6:	e00a      	b.n	8006cce <jsonResetObjectsFlags+0x72>
	{
		object->arrays[i]->flag = 0;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < object->arrays_count; i++)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7d1b      	ldrb	r3, [r3, #20]
 8006cd2:	7bfa      	ldrb	r2, [r7, #15]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3ef      	bcc.n	8006cb8 <jsonResetObjectsFlags+0x5c>
	}
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <jsonStringReceived>:
	VCP_SendString(" : ");
}


void jsonStringReceived()
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
	uint8_t i;

	if(!currentObject)
 8006cea:	4b20      	ldr	r3, [pc, #128]	; (8006d6c <jsonStringReceived+0x88>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d038      	beq.n	8006d64 <jsonStringReceived+0x80>
		return;

	for(i = 0; i < currentObject->strings_count; i++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	71fb      	strb	r3, [r7, #7]
 8006cf6:	e02e      	b.n	8006d56 <jsonStringReceived+0x72>
	{
		if(strcmp(jsonDecodedString[jsonCurrentLevel], currentObject->strings[i]->name) == 0)
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <jsonStringReceived+0x8c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2332      	movs	r3, #50	; 0x32
 8006d00:	fb03 f302 	mul.w	r3, r3, r2
 8006d04:	4a1b      	ldr	r2, [pc, #108]	; (8006d74 <jsonStringReceived+0x90>)
 8006d06:	1898      	adds	r0, r3, r2
 8006d08:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <jsonStringReceived+0x88>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7f9 fa59 	bl	80001d0 <strcmp>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d115      	bne.n	8006d50 <jsonStringReceived+0x6c>
		{
			strcpy(currentObject->strings[i]->value, jsonStringValueDecoded);
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <jsonStringReceived+0x88>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4910      	ldr	r1, [pc, #64]	; (8006d78 <jsonStringReceived+0x94>)
 8006d36:	4618      	mov	r0, r3
 8006d38:	f003 fc1c 	bl	800a574 <strcpy>
			currentObject->strings[i]->flag = 1;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <jsonStringReceived+0x88>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	for(i = 0; i < currentObject->strings_count; i++)
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	3301      	adds	r3, #1
 8006d54:	71fb      	strb	r3, [r7, #7]
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <jsonStringReceived+0x88>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	7b1b      	ldrb	r3, [r3, #12]
 8006d5c:	79fa      	ldrb	r2, [r7, #7]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3ca      	bcc.n	8006cf8 <jsonStringReceived+0x14>
 8006d62:	e000      	b.n	8006d66 <jsonStringReceived+0x82>
		return;
 8006d64:	bf00      	nop
		}
	}
}
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	2000fac8 	.word	0x2000fac8
 8006d70:	20000b69 	.word	0x20000b69
 8006d74:	2000f9a0 	.word	0x2000f9a0
 8006d78:	2000f96c 	.word	0x2000f96c

08006d7c <jsonNumberReceived>:

void jsonNumberReceived()
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
	uint8_t i;

	if(!currentObject)
 8006d82:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <jsonNumberReceived+0x84>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d035      	beq.n	8006df6 <jsonNumberReceived+0x7a>
		return;

	for(i = 0; i < currentObject->numbers_count; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	71fb      	strb	r3, [r7, #7]
 8006d8e:	e02b      	b.n	8006de8 <jsonNumberReceived+0x6c>
	{
		if(strcmp(jsonDecodedString[jsonCurrentLevel], currentObject->numbers[i]->name) == 0)
 8006d90:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <jsonNumberReceived+0x88>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	2332      	movs	r3, #50	; 0x32
 8006d98:	fb03 f302 	mul.w	r3, r3, r2
 8006d9c:	4a1a      	ldr	r2, [pc, #104]	; (8006e08 <jsonNumberReceived+0x8c>)
 8006d9e:	1898      	adds	r0, r3, r2
 8006da0:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <jsonNumberReceived+0x84>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4619      	mov	r1, r3
 8006db2:	f7f9 fa0d 	bl	80001d0 <strcmp>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d112      	bne.n	8006de2 <jsonNumberReceived+0x66>
		{
			currentObject->numbers[i]->value = jsonNumberDecoded;
 8006dbc:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <jsonNumberReceived+0x84>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <jsonNumberReceived+0x90>)
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	605a      	str	r2, [r3, #4]
			currentObject->numbers[i]->flag = 1;
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <jsonNumberReceived+0x84>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < currentObject->numbers_count; i++)
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	3301      	adds	r3, #1
 8006de6:	71fb      	strb	r3, [r7, #7]
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <jsonNumberReceived+0x84>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	791b      	ldrb	r3, [r3, #4]
 8006dee:	79fa      	ldrb	r2, [r7, #7]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3cd      	bcc.n	8006d90 <jsonNumberReceived+0x14>
 8006df4:	e000      	b.n	8006df8 <jsonNumberReceived+0x7c>
		return;
 8006df6:	bf00      	nop
		}
	}
}
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2000fac8 	.word	0x2000fac8
 8006e04:	20000b69 	.word	0x20000b69
 8006e08:	2000f9a0 	.word	0x2000f9a0
 8006e0c:	2000facc 	.word	0x2000facc

08006e10 <jsonArrayValueReceived>:

void jsonArrayValueReceived()
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
	uint8_t i;

	if(!currentObject)
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <jsonArrayValueReceived+0x98>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d03f      	beq.n	8006e9e <jsonArrayValueReceived+0x8e>
		return;

	for(i = 0; i < currentObject->arrays_count; i++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	71fb      	strb	r3, [r7, #7]
 8006e22:	e035      	b.n	8006e90 <jsonArrayValueReceived+0x80>
	{
		if(strcmp(jsonDecodedString[jsonCurrentLevel], currentObject->arrays[i]->name) == 0)
 8006e24:	4b21      	ldr	r3, [pc, #132]	; (8006eac <jsonArrayValueReceived+0x9c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2332      	movs	r3, #50	; 0x32
 8006e2c:	fb03 f302 	mul.w	r3, r3, r2
 8006e30:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <jsonArrayValueReceived+0xa0>)
 8006e32:	1898      	adds	r0, r3, r2
 8006e34:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <jsonArrayValueReceived+0x98>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7f9 f9c3 	bl	80001d0 <strcmp>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11c      	bne.n	8006e8a <jsonArrayValueReceived+0x7a>
		{
			currentObject->arrays[i]->values[jsonArrayValuePosition[jsonCurrentLevel]] = jsonNumberDecoded;
 8006e50:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <jsonArrayValueReceived+0x98>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <jsonArrayValueReceived+0x9c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	4619      	mov	r1, r3
 8006e66:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <jsonArrayValueReceived+0xa4>)
 8006e68:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	4413      	add	r3, r2
 8006e70:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <jsonArrayValueReceived+0xa8>)
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	b292      	uxth	r2, r2
 8006e76:	801a      	strh	r2, [r3, #0]
			currentObject->arrays[i]->flag = 1;
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <jsonArrayValueReceived+0x98>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2201      	movs	r2, #1
 8006e88:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < currentObject->arrays_count; i++)
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	71fb      	strb	r3, [r7, #7]
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <jsonArrayValueReceived+0x98>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	7d1b      	ldrb	r3, [r3, #20]
 8006e96:	79fa      	ldrb	r2, [r7, #7]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d3c3      	bcc.n	8006e24 <jsonArrayValueReceived+0x14>
 8006e9c:	e000      	b.n	8006ea0 <jsonArrayValueReceived+0x90>
		return;
 8006e9e:	bf00      	nop
		}
	}
}
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000fac8 	.word	0x2000fac8
 8006eac:	20000b69 	.word	0x20000b69
 8006eb0:	2000f9a0 	.word	0x2000f9a0
 8006eb4:	2000fabc 	.word	0x2000fabc
 8006eb8:	2000facc 	.word	0x2000facc

08006ebc <jsonStartOfObject>:

void jsonStartOfObject()
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
	uint8_t i;

	objectsStack[jsonCurrentLevel] = currentObject;
 8006ec2:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <jsonStartOfObject+0x90>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <jsonStartOfObject+0x94>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <jsonStartOfObject+0x98>)
 8006ece:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(!currentObject)
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	; (8006f50 <jsonStartOfObject+0x94>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d034      	beq.n	8006f44 <jsonStartOfObject+0x88>
		return;

	for(i = 0; i < currentObject->objects_count; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	e027      	b.n	8006f30 <jsonStartOfObject+0x74>
	{
		if(strcmp(jsonDecodedString[jsonCurrentLevel], currentObject->objects[i]->name) == 0)
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <jsonStartOfObject+0x90>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2332      	movs	r3, #50	; 0x32
 8006ee8:	fb03 f302 	mul.w	r3, r3, r2
 8006eec:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <jsonStartOfObject+0x9c>)
 8006eee:	1898      	adds	r0, r3, r2
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <jsonStartOfObject+0x94>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f7f9 f965 	bl	80001d0 <strcmp>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10e      	bne.n	8006f2a <jsonStartOfObject+0x6e>
		{
			currentObject = currentObject->objects[i];
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <jsonStartOfObject+0x94>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <jsonStartOfObject+0x94>)
 8006f1c:	6013      	str	r3, [r2, #0]
			jsonResetObjectsFlags(currentObject);
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <jsonStartOfObject+0x94>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fe9a 	bl	8006c5c <jsonResetObjectsFlags>
			return;
 8006f28:	e00d      	b.n	8006f46 <jsonStartOfObject+0x8a>
	for(i = 0; i < currentObject->objects_count; i++)
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	71fb      	strb	r3, [r7, #7]
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <jsonStartOfObject+0x94>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	7f1b      	ldrb	r3, [r3, #28]
 8006f36:	79fa      	ldrb	r2, [r7, #7]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d3d1      	bcc.n	8006ee0 <jsonStartOfObject+0x24>
		}
	}

	currentObject = NULL;
 8006f3c:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <jsonStartOfObject+0x94>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e000      	b.n	8006f46 <jsonStartOfObject+0x8a>
		return;
 8006f44:	bf00      	nop
}
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000b69 	.word	0x20000b69
 8006f50:	2000fac8 	.word	0x2000fac8
 8006f54:	2000faa4 	.word	0x2000faa4
 8006f58:	2000f9a0 	.word	0x2000f9a0

08006f5c <jsonObjectReceived>:


void jsonObjectReceived()
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
	// Call the object function handler
	if(currentObject && currentObject->objectReceived != NULL)
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <jsonObjectReceived+0x34>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <jsonObjectReceived+0x1e>
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <jsonObjectReceived+0x34>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <jsonObjectReceived+0x1e>
	{
		currentObject->objectReceived();
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <jsonObjectReceived+0x34>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	4798      	blx	r3
	}

	// Select the new active object
	currentObject = objectsStack[jsonCurrentLevel-1];
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <jsonObjectReceived+0x38>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4a05      	ldr	r2, [pc, #20]	; (8006f98 <jsonObjectReceived+0x3c>)
 8006f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f86:	4a02      	ldr	r2, [pc, #8]	; (8006f90 <jsonObjectReceived+0x34>)
 8006f88:	6013      	str	r3, [r2, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2000fac8 	.word	0x2000fac8
 8006f94:	20000b69 	.word	0x20000b69
 8006f98:	2000faa4 	.word	0x2000faa4

08006f9c <jsonParseObject>:


// We will receive all characters since an object has been detected. The first character will be "{" and we have to detect the end and report back
enum JsonObjectResult jsonParseObject(char c, uint8_t currentLevel)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	460a      	mov	r2, r1
 8006fa6:	71fb      	strb	r3, [r7, #7]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	71bb      	strb	r3, [r7, #6]
	switch(jsonObjectStates[currentLevel])
 8006fac:	79bb      	ldrb	r3, [r7, #6]
 8006fae:	4aa0      	ldr	r2, [pc, #640]	; (8007230 <jsonParseObject+0x294>)
 8006fb0:	5cd3      	ldrb	r3, [r2, r3]
 8006fb2:	3b02      	subs	r3, #2
 8006fb4:	2b07      	cmp	r3, #7
 8006fb6:	f200 8121 	bhi.w	80071fc <jsonParseObject+0x260>
 8006fba:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <jsonParseObject+0x24>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08006fe1 	.word	0x08006fe1
 8006fc4:	08007003 	.word	0x08007003
 8006fc8:	080070d9 	.word	0x080070d9
 8006fcc:	0800705b 	.word	0x0800705b
 8006fd0:	0800706d 	.word	0x0800706d
 8006fd4:	08007175 	.word	0x08007175
 8006fd8:	0800711d 	.word	0x0800711d
 8006fdc:	080071db 	.word	0x080071db
	{
	// Wait for start of string
	case JSON_START:
		if(c == '"')
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b22      	cmp	r3, #34	; 0x22
 8006fe4:	d107      	bne.n	8006ff6 <jsonParseObject+0x5a>
		{
			// Start of a string
			jsonObjectStates[currentLevel] = JSON_NAME_STRING_DECODING;
 8006fe6:	79bb      	ldrb	r3, [r7, #6]
 8006fe8:	4a91      	ldr	r2, [pc, #580]	; (8007230 <jsonParseObject+0x294>)
 8006fea:	2103      	movs	r1, #3
 8006fec:	54d1      	strb	r1, [r2, r3]
			jsonDecodedStringPosition = 0;
 8006fee:	4b91      	ldr	r3, [pc, #580]	; (8007234 <jsonParseObject+0x298>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
		}
		else if(c == '}')
		{
			return JSON_END_OF_OBJECT;
		}
		break;
 8006ff4:	e107      	b.n	8007206 <jsonParseObject+0x26a>
		else if(c == '}')
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	2b7d      	cmp	r3, #125	; 0x7d
 8006ffa:	f040 8104 	bne.w	8007206 <jsonParseObject+0x26a>
			return JSON_END_OF_OBJECT;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e111      	b.n	8007226 <jsonParseObject+0x28a>

	case JSON_NAME_STRING_DECODING:
		if(c == '"')
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	2b22      	cmp	r3, #34	; 0x22
 8007006:	d110      	bne.n	800702a <jsonParseObject+0x8e>
		{
			// Add end of string character
			jsonDecodedString[currentLevel][jsonDecodedStringPosition] = '\0';
 8007008:	79bb      	ldrb	r3, [r7, #6]
 800700a:	4a8a      	ldr	r2, [pc, #552]	; (8007234 <jsonParseObject+0x298>)
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	4610      	mov	r0, r2
 8007010:	4a89      	ldr	r2, [pc, #548]	; (8007238 <jsonParseObject+0x29c>)
 8007012:	2132      	movs	r1, #50	; 0x32
 8007014:	fb01 f303 	mul.w	r3, r1, r3
 8007018:	4413      	add	r3, r2
 800701a:	4403      	add	r3, r0
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]

			jsonObjectStates[currentLevel] = JSON_WAIT_SEPARATOR;
 8007020:	79bb      	ldrb	r3, [r7, #6]
 8007022:	4a83      	ldr	r2, [pc, #524]	; (8007230 <jsonParseObject+0x294>)
 8007024:	2105      	movs	r1, #5
 8007026:	54d1      	strb	r1, [r2, r3]
			{
				jsonDecodedString[currentLevel][jsonDecodedStringPosition] = c;
				jsonDecodedStringPosition++;
			}
		}
		break;
 8007028:	e0ef      	b.n	800720a <jsonParseObject+0x26e>
			if(jsonDecodedStringPosition < JSON_MAX_STRING_LENGTH - 1)
 800702a:	4b82      	ldr	r3, [pc, #520]	; (8007234 <jsonParseObject+0x298>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b30      	cmp	r3, #48	; 0x30
 8007030:	f200 80eb 	bhi.w	800720a <jsonParseObject+0x26e>
				jsonDecodedString[currentLevel][jsonDecodedStringPosition] = c;
 8007034:	79bb      	ldrb	r3, [r7, #6]
 8007036:	4a7f      	ldr	r2, [pc, #508]	; (8007234 <jsonParseObject+0x298>)
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	4610      	mov	r0, r2
 800703c:	4a7e      	ldr	r2, [pc, #504]	; (8007238 <jsonParseObject+0x29c>)
 800703e:	2132      	movs	r1, #50	; 0x32
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	4413      	add	r3, r2
 8007046:	4403      	add	r3, r0
 8007048:	79fa      	ldrb	r2, [r7, #7]
 800704a:	701a      	strb	r2, [r3, #0]
				jsonDecodedStringPosition++;
 800704c:	4b79      	ldr	r3, [pc, #484]	; (8007234 <jsonParseObject+0x298>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	4b77      	ldr	r3, [pc, #476]	; (8007234 <jsonParseObject+0x298>)
 8007056:	701a      	strb	r2, [r3, #0]
		break;
 8007058:	e0d7      	b.n	800720a <jsonParseObject+0x26e>

	case JSON_WAIT_SEPARATOR:
		if(c == ':')
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	2b3a      	cmp	r3, #58	; 0x3a
 800705e:	f040 80d6 	bne.w	800720e <jsonParseObject+0x272>
		{
			jsonObjectStates[currentLevel] = JSON_CHOOSE_VALUE_TYPE;
 8007062:	79bb      	ldrb	r3, [r7, #6]
 8007064:	4a72      	ldr	r2, [pc, #456]	; (8007230 <jsonParseObject+0x294>)
 8007066:	2106      	movs	r1, #6
 8007068:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800706a:	e0d0      	b.n	800720e <jsonParseObject+0x272>

	case JSON_CHOOSE_VALUE_TYPE:
		if(c == '{')
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b7b      	cmp	r3, #123	; 0x7b
 8007070:	d105      	bne.n	800707e <jsonParseObject+0xe2>
		{
			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 8007072:	79bb      	ldrb	r3, [r7, #6]
 8007074:	4a6e      	ldr	r2, [pc, #440]	; (8007230 <jsonParseObject+0x294>)
 8007076:	2109      	movs	r1, #9
 8007078:	54d1      	strb	r1, [r2, r3]
			return JSON_NEW_OBJECT;
 800707a:	2302      	movs	r3, #2
 800707c:	e0d3      	b.n	8007226 <jsonParseObject+0x28a>
		}
		else if(c == '"')
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	2b22      	cmp	r3, #34	; 0x22
 8007082:	d107      	bne.n	8007094 <jsonParseObject+0xf8>
		{
			jsonObjectStates[currentLevel] = JSON_STRING_DECODING;
 8007084:	79bb      	ldrb	r3, [r7, #6]
 8007086:	4a6a      	ldr	r2, [pc, #424]	; (8007230 <jsonParseObject+0x294>)
 8007088:	2104      	movs	r1, #4
 800708a:	54d1      	strb	r1, [r2, r3]
			jsonStringValueDecodedPosition = 0;
 800708c:	4b6b      	ldr	r3, [pc, #428]	; (800723c <jsonParseObject+0x2a0>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
		{
			jsonObjectStates[currentLevel] = JSON_NUMBER_DECODING;
			// Store the first digit in the decoded value (-48 : refer to ASCII table)
			jsonNumberDecoded = c - 48;
		}
		break;
 8007092:	e0be      	b.n	8007212 <jsonParseObject+0x276>
		else if(c == '[')
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	2b5b      	cmp	r3, #91	; 0x5b
 8007098:	d10c      	bne.n	80070b4 <jsonParseObject+0x118>
			jsonObjectStates[currentLevel] = JSON_ARRAY_DECODING;
 800709a:	79bb      	ldrb	r3, [r7, #6]
 800709c:	4a64      	ldr	r2, [pc, #400]	; (8007230 <jsonParseObject+0x294>)
 800709e:	2107      	movs	r1, #7
 80070a0:	54d1      	strb	r1, [r2, r3]
			jsonArrayValuePosition[currentLevel] = 0;
 80070a2:	79bb      	ldrb	r3, [r7, #6]
 80070a4:	4a66      	ldr	r2, [pc, #408]	; (8007240 <jsonParseObject+0x2a4>)
 80070a6:	2100      	movs	r1, #0
 80070a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			jsonNumberDecoded = 0;
 80070ac:	4b65      	ldr	r3, [pc, #404]	; (8007244 <jsonParseObject+0x2a8>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
		break;
 80070b2:	e0ae      	b.n	8007212 <jsonParseObject+0x276>
		else if(c >= '0' && c <= '9')
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b2f      	cmp	r3, #47	; 0x2f
 80070b8:	f240 80ab 	bls.w	8007212 <jsonParseObject+0x276>
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b39      	cmp	r3, #57	; 0x39
 80070c0:	f200 80a7 	bhi.w	8007212 <jsonParseObject+0x276>
			jsonObjectStates[currentLevel] = JSON_NUMBER_DECODING;
 80070c4:	79bb      	ldrb	r3, [r7, #6]
 80070c6:	4a5a      	ldr	r2, [pc, #360]	; (8007230 <jsonParseObject+0x294>)
 80070c8:	2108      	movs	r1, #8
 80070ca:	54d1      	strb	r1, [r2, r3]
			jsonNumberDecoded = c - 48;
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	3b30      	subs	r3, #48	; 0x30
 80070d0:	461a      	mov	r2, r3
 80070d2:	4b5c      	ldr	r3, [pc, #368]	; (8007244 <jsonParseObject+0x2a8>)
 80070d4:	601a      	str	r2, [r3, #0]
		break;
 80070d6:	e09c      	b.n	8007212 <jsonParseObject+0x276>

	case JSON_STRING_DECODING:
		if(c == '"')
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b22      	cmp	r3, #34	; 0x22
 80070dc:	d10c      	bne.n	80070f8 <jsonParseObject+0x15c>
		{
			// Add end of string character
			jsonStringValueDecoded[jsonStringValueDecodedPosition] = '\0';
 80070de:	4b57      	ldr	r3, [pc, #348]	; (800723c <jsonParseObject+0x2a0>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	4b58      	ldr	r3, [pc, #352]	; (8007248 <jsonParseObject+0x2ac>)
 80070e6:	2100      	movs	r1, #0
 80070e8:	5499      	strb	r1, [r3, r2]

			// Validate data
			jsonStringReceived();
 80070ea:	f7ff fdfb 	bl	8006ce4 <jsonStringReceived>

			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 80070ee:	79bb      	ldrb	r3, [r7, #6]
 80070f0:	4a4f      	ldr	r2, [pc, #316]	; (8007230 <jsonParseObject+0x294>)
 80070f2:	2109      	movs	r1, #9
 80070f4:	54d1      	strb	r1, [r2, r3]
			{
				jsonStringValueDecoded[jsonStringValueDecodedPosition] = c;
				jsonStringValueDecodedPosition++;
			}
		}
		break;
 80070f6:	e08e      	b.n	8007216 <jsonParseObject+0x27a>
			if(jsonStringValueDecodedPosition < JSON_MAX_STRING_LENGTH - 1)
 80070f8:	4b50      	ldr	r3, [pc, #320]	; (800723c <jsonParseObject+0x2a0>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b30      	cmp	r3, #48	; 0x30
 80070fe:	f200 808a 	bhi.w	8007216 <jsonParseObject+0x27a>
				jsonStringValueDecoded[jsonStringValueDecodedPosition] = c;
 8007102:	4b4e      	ldr	r3, [pc, #312]	; (800723c <jsonParseObject+0x2a0>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	4619      	mov	r1, r3
 8007108:	4a4f      	ldr	r2, [pc, #316]	; (8007248 <jsonParseObject+0x2ac>)
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	5453      	strb	r3, [r2, r1]
				jsonStringValueDecodedPosition++;
 800710e:	4b4b      	ldr	r3, [pc, #300]	; (800723c <jsonParseObject+0x2a0>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4b49      	ldr	r3, [pc, #292]	; (800723c <jsonParseObject+0x2a0>)
 8007118:	701a      	strb	r2, [r3, #0]
		break;
 800711a:	e07c      	b.n	8007216 <jsonParseObject+0x27a>

	case JSON_NUMBER_DECODING:
		// A new value will be given for this level
		if(c == ',')
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	2b2c      	cmp	r3, #44	; 0x2c
 8007120:	d106      	bne.n	8007130 <jsonParseObject+0x194>
		{
			// Validate number
			jsonNumberReceived();
 8007122:	f7ff fe2b 	bl	8006d7c <jsonNumberReceived>

			jsonObjectStates[currentLevel] = JSON_START;
 8007126:	79bb      	ldrb	r3, [r7, #6]
 8007128:	4a41      	ldr	r2, [pc, #260]	; (8007230 <jsonParseObject+0x294>)
 800712a:	2102      	movs	r1, #2
 800712c:	54d1      	strb	r1, [r2, r3]
		{
			jsonNumberDecoded *= 10;
			// Subtract 48 to c to get the actual number value (ASCII table)
			jsonNumberDecoded += (c - 48);
		}
		break;
 800712e:	e074      	b.n	800721a <jsonParseObject+0x27e>
		else if(c == '}')
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b7d      	cmp	r3, #125	; 0x7d
 8007134:	d107      	bne.n	8007146 <jsonParseObject+0x1aa>
			jsonNumberReceived();
 8007136:	f7ff fe21 	bl	8006d7c <jsonNumberReceived>
			jsonObjectStates[currentLevel] = JSON_START;
 800713a:	79bb      	ldrb	r3, [r7, #6]
 800713c:	4a3c      	ldr	r2, [pc, #240]	; (8007230 <jsonParseObject+0x294>)
 800713e:	2102      	movs	r1, #2
 8007140:	54d1      	strb	r1, [r2, r3]
			return JSON_END_OF_OBJECT;
 8007142:	2301      	movs	r3, #1
 8007144:	e06f      	b.n	8007226 <jsonParseObject+0x28a>
		else if(c >= '0' && c <= '9')
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	2b2f      	cmp	r3, #47	; 0x2f
 800714a:	d966      	bls.n	800721a <jsonParseObject+0x27e>
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	2b39      	cmp	r3, #57	; 0x39
 8007150:	d863      	bhi.n	800721a <jsonParseObject+0x27e>
			jsonNumberDecoded *= 10;
 8007152:	4b3c      	ldr	r3, [pc, #240]	; (8007244 <jsonParseObject+0x2a8>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	461a      	mov	r2, r3
 8007160:	4b38      	ldr	r3, [pc, #224]	; (8007244 <jsonParseObject+0x2a8>)
 8007162:	601a      	str	r2, [r3, #0]
			jsonNumberDecoded += (c - 48);
 8007164:	79fa      	ldrb	r2, [r7, #7]
 8007166:	4b37      	ldr	r3, [pc, #220]	; (8007244 <jsonParseObject+0x2a8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4413      	add	r3, r2
 800716c:	3b30      	subs	r3, #48	; 0x30
 800716e:	4a35      	ldr	r2, [pc, #212]	; (8007244 <jsonParseObject+0x2a8>)
 8007170:	6013      	str	r3, [r2, #0]
		break;
 8007172:	e052      	b.n	800721a <jsonParseObject+0x27e>

	// Only support number arrays decoding
	case JSON_ARRAY_DECODING:

		if(c == ']')
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b5d      	cmp	r3, #93	; 0x5d
 8007178:	d106      	bne.n	8007188 <jsonParseObject+0x1ec>
		{
			jsonArrayValueReceived();
 800717a:	f7ff fe49 	bl	8006e10 <jsonArrayValueReceived>

			jsonObjectStates[currentLevel] = JSON_END_OR_NEW_VALUE;
 800717e:	79bb      	ldrb	r3, [r7, #6]
 8007180:	4a2b      	ldr	r2, [pc, #172]	; (8007230 <jsonParseObject+0x294>)
 8007182:	2109      	movs	r1, #9
 8007184:	54d1      	strb	r1, [r2, r3]
			jsonNumberDecoded *= 10;
			// Subtract 48 to c to get the actual number value (ASCII table)
			jsonNumberDecoded += (c - 48);
		}

		break;
 8007186:	e04a      	b.n	800721e <jsonParseObject+0x282>
		else if(c == ',')
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	2b2c      	cmp	r3, #44	; 0x2c
 800718c:	d10e      	bne.n	80071ac <jsonParseObject+0x210>
			jsonArrayValueReceived();
 800718e:	f7ff fe3f 	bl	8006e10 <jsonArrayValueReceived>
			jsonArrayValuePosition[currentLevel]++;
 8007192:	79bb      	ldrb	r3, [r7, #6]
 8007194:	4a2a      	ldr	r2, [pc, #168]	; (8007240 <jsonParseObject+0x2a4>)
 8007196:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800719a:	3201      	adds	r2, #1
 800719c:	b291      	uxth	r1, r2
 800719e:	4a28      	ldr	r2, [pc, #160]	; (8007240 <jsonParseObject+0x2a4>)
 80071a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			jsonNumberDecoded = 0;
 80071a4:	4b27      	ldr	r3, [pc, #156]	; (8007244 <jsonParseObject+0x2a8>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
		break;
 80071aa:	e038      	b.n	800721e <jsonParseObject+0x282>
		else if(c >= '0' && c <= '9')
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	2b2f      	cmp	r3, #47	; 0x2f
 80071b0:	d935      	bls.n	800721e <jsonParseObject+0x282>
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	2b39      	cmp	r3, #57	; 0x39
 80071b6:	d832      	bhi.n	800721e <jsonParseObject+0x282>
			jsonNumberDecoded *= 10;
 80071b8:	4b22      	ldr	r3, [pc, #136]	; (8007244 <jsonParseObject+0x2a8>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b1f      	ldr	r3, [pc, #124]	; (8007244 <jsonParseObject+0x2a8>)
 80071c8:	601a      	str	r2, [r3, #0]
			jsonNumberDecoded += (c - 48);
 80071ca:	79fa      	ldrb	r2, [r7, #7]
 80071cc:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <jsonParseObject+0x2a8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4413      	add	r3, r2
 80071d2:	3b30      	subs	r3, #48	; 0x30
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <jsonParseObject+0x2a8>)
 80071d6:	6013      	str	r3, [r2, #0]
		break;
 80071d8:	e021      	b.n	800721e <jsonParseObject+0x282>

	case JSON_END_OR_NEW_VALUE:
		// A new value will be given for this level
		if(c == ',')
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	2b2c      	cmp	r3, #44	; 0x2c
 80071de:	d104      	bne.n	80071ea <jsonParseObject+0x24e>
		{
			jsonObjectStates[currentLevel] = JSON_START;
 80071e0:	79bb      	ldrb	r3, [r7, #6]
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <jsonParseObject+0x294>)
 80071e4:	2102      	movs	r1, #2
 80071e6:	54d1      	strb	r1, [r2, r3]
		else if(c == '}')
		{
			jsonObjectStates[currentLevel] = JSON_START;
			return JSON_END_OF_OBJECT;
		}
		break;
 80071e8:	e01b      	b.n	8007222 <jsonParseObject+0x286>
		else if(c == '}')
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	2b7d      	cmp	r3, #125	; 0x7d
 80071ee:	d118      	bne.n	8007222 <jsonParseObject+0x286>
			jsonObjectStates[currentLevel] = JSON_START;
 80071f0:	79bb      	ldrb	r3, [r7, #6]
 80071f2:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <jsonParseObject+0x294>)
 80071f4:	2102      	movs	r1, #2
 80071f6:	54d1      	strb	r1, [r2, r3]
			return JSON_END_OF_OBJECT;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e014      	b.n	8007226 <jsonParseObject+0x28a>

	default:
		jsonObjectStates[currentLevel] = JSON_IDLE;
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	4a0c      	ldr	r2, [pc, #48]	; (8007230 <jsonParseObject+0x294>)
 8007200:	2100      	movs	r1, #0
 8007202:	54d1      	strb	r1, [r2, r3]
		break;
 8007204:	e00e      	b.n	8007224 <jsonParseObject+0x288>
		break;
 8007206:	bf00      	nop
 8007208:	e00c      	b.n	8007224 <jsonParseObject+0x288>
		break;
 800720a:	bf00      	nop
 800720c:	e00a      	b.n	8007224 <jsonParseObject+0x288>
		break;
 800720e:	bf00      	nop
 8007210:	e008      	b.n	8007224 <jsonParseObject+0x288>
		break;
 8007212:	bf00      	nop
 8007214:	e006      	b.n	8007224 <jsonParseObject+0x288>
		break;
 8007216:	bf00      	nop
 8007218:	e004      	b.n	8007224 <jsonParseObject+0x288>
		break;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <jsonParseObject+0x288>
		break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <jsonParseObject+0x288>
		break;
 8007222:	bf00      	nop
	}

	return JSON_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000fa9c 	.word	0x2000fa9c
 8007234:	2000fab8 	.word	0x2000fab8
 8007238:	2000f9a0 	.word	0x2000f9a0
 800723c:	2000f968 	.word	0x2000f968
 8007240:	2000fabc 	.word	0x2000fabc
 8007244:	2000facc 	.word	0x2000facc
 8007248:	2000f96c 	.word	0x2000f96c

0800724c <jsonDecoding>:




void jsonDecoding(uint8_t* buf, uint16_t len)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	807b      	strh	r3, [r7, #2]
	uint16_t index;

	// Decode the partial json data
	for(index = 0; index < len; index++)
 8007258:	2300      	movs	r3, #0
 800725a:	81fb      	strh	r3, [r7, #14]
 800725c:	e060      	b.n	8007320 <jsonDecoding+0xd4>
	{
		// We only detect the main object at this stage, the decoding is done inside jsonParseObject
		char c = buf[index];
 800725e:	89fb      	ldrh	r3, [r7, #14]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4413      	add	r3, r2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	737b      	strb	r3, [r7, #13]
		uint8_t result;

		switch(jsonMainDecoderState)
 8007268:	4b31      	ldr	r3, [pc, #196]	; (8007330 <jsonDecoding+0xe4>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <jsonDecoding+0x2a>
 8007270:	2b01      	cmp	r3, #1
 8007272:	d018      	beq.n	80072a6 <jsonDecoding+0x5a>
 8007274:	e04a      	b.n	800730c <jsonDecoding+0xc0>
		{
		case JSON_IDLE:
			if(c == '{')
 8007276:	7b7b      	ldrb	r3, [r7, #13]
 8007278:	2b7b      	cmp	r3, #123	; 0x7b
 800727a:	d14b      	bne.n	8007314 <jsonDecoding+0xc8>
			{
				// Start of a json file
				jsonMainDecoderState = JSON_MAIN_OBJECT;
 800727c:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <jsonDecoding+0xe4>)
 800727e:	2201      	movs	r2, #1
 8007280:	701a      	strb	r2, [r3, #0]

				// Initialise the first object level
				jsonCurrentLevel = 0;
 8007282:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <jsonDecoding+0xe8>)
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]
				jsonObjectStates[jsonCurrentLevel] = JSON_START;
 8007288:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <jsonDecoding+0xe8>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <jsonDecoding+0xec>)
 8007290:	2102      	movs	r1, #2
 8007292:	5499      	strb	r1, [r3, r2]
				currentObject = &mainJson;
 8007294:	4b29      	ldr	r3, [pc, #164]	; (800733c <jsonDecoding+0xf0>)
 8007296:	4a2a      	ldr	r2, [pc, #168]	; (8007340 <jsonDecoding+0xf4>)
 8007298:	601a      	str	r2, [r3, #0]
				jsonResetObjectsFlags(currentObject);
 800729a:	4b28      	ldr	r3, [pc, #160]	; (800733c <jsonDecoding+0xf0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fcdc 	bl	8006c5c <jsonResetObjectsFlags>
			}
			break;
 80072a4:	e036      	b.n	8007314 <jsonDecoding+0xc8>

		case JSON_MAIN_OBJECT:
			result = jsonParseObject(c, jsonCurrentLevel);
 80072a6:	4b23      	ldr	r3, [pc, #140]	; (8007334 <jsonDecoding+0xe8>)
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	7b7b      	ldrb	r3, [r7, #13]
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fe74 	bl	8006f9c <jsonParseObject>
 80072b4:	4603      	mov	r3, r0
 80072b6:	733b      	strb	r3, [r7, #12]

			// The current object has finished
			if(result == JSON_END_OF_OBJECT)
 80072b8:	7b3b      	ldrb	r3, [r7, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d110      	bne.n	80072e0 <jsonDecoding+0x94>
			{
				// End of JSON file
				if(jsonCurrentLevel == 0)
 80072be:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <jsonDecoding+0xe8>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <jsonDecoding+0x82>
				{
					jsonMainDecoderState = JSON_IDLE;
 80072c6:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <jsonDecoding+0xe4>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
					jsonCurrentLevel++;
					jsonObjectStates[jsonCurrentLevel] = JSON_START;
				}
			}

			break;
 80072cc:	e024      	b.n	8007318 <jsonDecoding+0xcc>
					jsonObjectReceived();
 80072ce:	f7ff fe45 	bl	8006f5c <jsonObjectReceived>
					jsonCurrentLevel--;
 80072d2:	4b18      	ldr	r3, [pc, #96]	; (8007334 <jsonDecoding+0xe8>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	4b16      	ldr	r3, [pc, #88]	; (8007334 <jsonDecoding+0xe8>)
 80072dc:	701a      	strb	r2, [r3, #0]
			break;
 80072de:	e01b      	b.n	8007318 <jsonDecoding+0xcc>
			else if(result == JSON_NEW_OBJECT)
 80072e0:	7b3b      	ldrb	r3, [r7, #12]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d118      	bne.n	8007318 <jsonDecoding+0xcc>
				if(jsonCurrentLevel == JSON_MAX_LEVELS-1)
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <jsonDecoding+0xe8>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d014      	beq.n	8007318 <jsonDecoding+0xcc>
					jsonStartOfObject();
 80072ee:	f7ff fde5 	bl	8006ebc <jsonStartOfObject>
					jsonCurrentLevel++;
 80072f2:	4b10      	ldr	r3, [pc, #64]	; (8007334 <jsonDecoding+0xe8>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	4b0e      	ldr	r3, [pc, #56]	; (8007334 <jsonDecoding+0xe8>)
 80072fc:	701a      	strb	r2, [r3, #0]
					jsonObjectStates[jsonCurrentLevel] = JSON_START;
 80072fe:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <jsonDecoding+0xe8>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <jsonDecoding+0xec>)
 8007306:	2102      	movs	r1, #2
 8007308:	5499      	strb	r1, [r3, r2]
			break;
 800730a:	e005      	b.n	8007318 <jsonDecoding+0xcc>

		default:
			jsonMainDecoderState = JSON_IDLE;
 800730c:	4b08      	ldr	r3, [pc, #32]	; (8007330 <jsonDecoding+0xe4>)
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
			break;
 8007312:	e002      	b.n	800731a <jsonDecoding+0xce>
			break;
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <jsonDecoding+0xce>
			break;
 8007318:	bf00      	nop
	for(index = 0; index < len; index++)
 800731a:	89fb      	ldrh	r3, [r7, #14]
 800731c:	3301      	adds	r3, #1
 800731e:	81fb      	strh	r3, [r7, #14]
 8007320:	89fa      	ldrh	r2, [r7, #14]
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	429a      	cmp	r2, r3
 8007326:	d39a      	bcc.n	800725e <jsonDecoding+0x12>
		}
	}
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000b68 	.word	0x20000b68
 8007334:	20000b69 	.word	0x20000b69
 8007338:	2000fa9c 	.word	0x2000fa9c
 800733c:	2000fac8 	.word	0x2000fac8
 8007340:	2000018c 	.word	0x2000018c

08007344 <LED_ObjectReceived>:
static led_t leds[MAX_LED_CHANNELS];
uint8_t testMeasureLED;


void LED_ObjectReceived()
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	; 0x38
 8007348:	af00      	add	r7, sp, #0
	char buffer[50];

	// The index is necessary to modify either LED
	if(ledConfig.index.flag)
 800734a:	4b3b      	ldr	r3, [pc, #236]	; (8007438 <LED_ObjectReceived+0xf4>)
 800734c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d02d      	beq.n	80073b0 <LED_ObjectReceived+0x6c>
	{
		if(ledConfig.pwm_duty.flag)
 8007354:	4b38      	ldr	r3, [pc, #224]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007356:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <LED_ObjectReceived+0x2e>
		{
			LED_change_PWM_duty(ledConfig.index.value, ledConfig.pwm_duty.value);
 800735e:	4b36      	ldr	r3, [pc, #216]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	b2da      	uxtb	r2, r3
 8007364:	4b34      	ldr	r3, [pc, #208]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007368:	b29b      	uxth	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f000 f93f 	bl	80075f0 <LED_change_PWM_duty>
		}

		if(ledConfig.pattern_length.flag)
 8007372:	4b31      	ldr	r3, [pc, #196]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007374:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <LED_ObjectReceived+0x4e>
		{
			LED_change_pattern_data(ledConfig.index.value, ledConfig.pattern_length.value, ledConfig.pattern_data.values);
 800737c:	4b2e      	ldr	r3, [pc, #184]	; (8007438 <LED_ObjectReceived+0xf4>)
 800737e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007380:	b2d8      	uxtb	r0, r3
 8007382:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	b299      	uxth	r1, r3
 8007388:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <LED_ObjectReceived+0xf4>)
 800738a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800738c:	461a      	mov	r2, r3
 800738e:	f000 f953 	bl	8007638 <LED_change_pattern_data>
		}

		if(ledConfig.pattern_interval.flag)
 8007392:	4b29      	ldr	r3, [pc, #164]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007394:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <LED_ObjectReceived+0x6c>
		{
			LED_change_pattern_interval(ledConfig.index.value, ledConfig.pattern_interval.value);
 800739c:	4b26      	ldr	r3, [pc, #152]	; (8007438 <LED_ObjectReceived+0xf4>)
 800739e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	4b25      	ldr	r3, [pc, #148]	; (8007438 <LED_ObjectReceived+0xf4>)
 80073a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f000 f98a 	bl	80076c4 <LED_change_pattern_interval>
		}
	}

	// Debug -> send back the data read
	VCP_SendString("LED : ");
 80073b0:	4822      	ldr	r0, [pc, #136]	; (800743c <LED_ObjectReceived+0xf8>)
 80073b2:	f002 fbb3 	bl	8009b1c <VCP_SendString>

	//VCP_SendCurrentObjectReceivedValues();

	if(ledConfig.pattern_length.flag && ledConfig.pattern_data.flag)
 80073b6:	4b20      	ldr	r3, [pc, #128]	; (8007438 <LED_ObjectReceived+0xf4>)
 80073b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d033      	beq.n	8007428 <LED_ObjectReceived+0xe4>
 80073c0:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <LED_ObjectReceived+0xf4>)
 80073c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d02e      	beq.n	8007428 <LED_ObjectReceived+0xe4>
	{
		uint16_t i;
		VCP_SendString("\r\n\t");
 80073ca:	481d      	ldr	r0, [pc, #116]	; (8007440 <LED_ObjectReceived+0xfc>)
 80073cc:	f002 fba6 	bl	8009b1c <VCP_SendString>
		VCP_SendString(ledConfig.pattern_data.name);
 80073d0:	4b19      	ldr	r3, [pc, #100]	; (8007438 <LED_ObjectReceived+0xf4>)
 80073d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d4:	4618      	mov	r0, r3
 80073d6:	f002 fba1 	bl	8009b1c <VCP_SendString>
		VCP_SendString(" : \r\n\t\t");
 80073da:	481a      	ldr	r0, [pc, #104]	; (8007444 <LED_ObjectReceived+0x100>)
 80073dc:	f002 fb9e 	bl	8009b1c <VCP_SendString>

		for(i = 0; i < ledConfig.pattern_length.value; i++)
 80073e0:	2300      	movs	r3, #0
 80073e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80073e4:	e01b      	b.n	800741e <LED_ObjectReceived+0xda>
		{
			itoa(ledConfig.pattern_data.values[i], buffer, 10);
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <LED_ObjectReceived+0xf4>)
 80073e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	1d3b      	adds	r3, r7, #4
 80073f6:	220a      	movs	r2, #10
 80073f8:	4619      	mov	r1, r3
 80073fa:	f002 fcdf 	bl	8009dbc <itoa>
			VCP_SendString(buffer);
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f002 fb8b 	bl	8009b1c <VCP_SendString>

			if(i != ledConfig.pattern_length.value-1)
 8007406:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <LED_ObjectReceived+0xf4>)
 800740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740c:	3b01      	subs	r3, #1
 800740e:	429a      	cmp	r2, r3
 8007410:	d002      	beq.n	8007418 <LED_ObjectReceived+0xd4>
				VCP_SendString(", ");
 8007412:	480d      	ldr	r0, [pc, #52]	; (8007448 <LED_ObjectReceived+0x104>)
 8007414:	f002 fb82 	bl	8009b1c <VCP_SendString>
		for(i = 0; i < ledConfig.pattern_length.value; i++)
 8007418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800741a:	3301      	adds	r3, #1
 800741c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800741e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <LED_ObjectReceived+0xf4>)
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	429a      	cmp	r2, r3
 8007426:	d3de      	bcc.n	80073e6 <LED_ObjectReceived+0xa2>
		}
	}

	VCP_SendString("\r\n");
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <LED_ObjectReceived+0x108>)
 800742a:	f002 fb77 	bl	8009b1c <VCP_SendString>
}
 800742e:	bf00      	nop
 8007430:	3738      	adds	r7, #56	; 0x38
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200001b4 	.word	0x200001b4
 800743c:	0800af3c 	.word	0x0800af3c
 8007440:	0800af44 	.word	0x0800af44
 8007444:	0800af48 	.word	0x0800af48
 8007448:	0800af50 	.word	0x0800af50
 800744c:	0800af54 	.word	0x0800af54

08007450 <LED_init_for_measures>:


void LED_init_for_measures()
{
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(j = 0; j < 20; j++)
 8007456:	2300      	movs	r3, #0
 8007458:	71bb      	strb	r3, [r7, #6]
 800745a:	e055      	b.n	8007508 <LED_init_for_measures+0xb8>
	{
		for(i = 1; i <= 16; i++)
 800745c:	2301      	movs	r3, #1
 800745e:	71fb      	strb	r3, [r7, #7]
 8007460:	e015      	b.n	800748e <LED_init_for_measures+0x3e>
		{
			leds[j].pattern_data[i-1] = i * 4095;
 8007462:	79ba      	ldrb	r2, [r7, #6]
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	3b01      	subs	r3, #1
 8007468:	79f9      	ldrb	r1, [r7, #7]
 800746a:	b289      	uxth	r1, r1
 800746c:	4608      	mov	r0, r1
 800746e:	0300      	lsls	r0, r0, #12
 8007470:	1a41      	subs	r1, r0, r1
 8007472:	b28c      	uxth	r4, r1
 8007474:	4938      	ldr	r1, [pc, #224]	; (8007558 <LED_init_for_measures+0x108>)
 8007476:	f240 30f2 	movw	r0, #1010	; 0x3f2
 800747a:	fb00 f202 	mul.w	r2, r0, r2
 800747e:	4413      	add	r3, r2
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	440b      	add	r3, r1
 8007484:	4622      	mov	r2, r4
 8007486:	805a      	strh	r2, [r3, #2]
		for(i = 1; i <= 16; i++)
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	3301      	adds	r3, #1
 800748c:	71fb      	strb	r3, [r7, #7]
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	2b10      	cmp	r3, #16
 8007492:	d9e6      	bls.n	8007462 <LED_init_for_measures+0x12>
		}

		leds[j].pattern_length = 16;
 8007494:	79bb      	ldrb	r3, [r7, #6]
 8007496:	4a30      	ldr	r2, [pc, #192]	; (8007558 <LED_init_for_measures+0x108>)
 8007498:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 80074a6:	2210      	movs	r2, #16
 80074a8:	801a      	strh	r2, [r3, #0]
		leds[j].pattern_interval = 180000;
 80074aa:	79bb      	ldrb	r3, [r7, #6]
 80074ac:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <LED_init_for_measures+0x108>)
 80074ae:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80074bc:	4a27      	ldr	r2, [pc, #156]	; (800755c <LED_init_for_measures+0x10c>)
 80074be:	601a      	str	r2, [r3, #0]
		leds[j].pattern_position = 0;
 80074c0:	79bb      	ldrb	r3, [r7, #6]
 80074c2:	4a25      	ldr	r2, [pc, #148]	; (8007558 <LED_init_for_measures+0x108>)
 80074c4:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80074d2:	2200      	movs	r2, #0
 80074d4:	801a      	strh	r2, [r3, #0]
		leds[j].pattern_interval_count = 0;
 80074d6:	79bb      	ldrb	r3, [r7, #6]
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <LED_init_for_measures+0x108>)
 80074da:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	4413      	add	r3, r2
 80074e4:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]
		leds[j].pattern_on = 0;
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	4a1a      	ldr	r2, [pc, #104]	; (8007558 <LED_init_for_measures+0x108>)
 80074f0:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 80074fe:	2200      	movs	r2, #0
 8007500:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 20; j++)
 8007502:	79bb      	ldrb	r3, [r7, #6]
 8007504:	3301      	adds	r3, #1
 8007506:	71bb      	strb	r3, [r7, #6]
 8007508:	79bb      	ldrb	r3, [r7, #6]
 800750a:	2b13      	cmp	r3, #19
 800750c:	d9a6      	bls.n	800745c <LED_init_for_measures+0xc>
	}
#ifdef TEST_LED
	testMeasureLED = 1;
 800750e:	4b14      	ldr	r3, [pc, #80]	; (8007560 <LED_init_for_measures+0x110>)
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
	leds[testMeasureLED].pattern_on = 1;
 8007514:	4b12      	ldr	r3, [pc, #72]	; (8007560 <LED_init_for_measures+0x110>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <LED_init_for_measures+0x108>)
 800751c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8007520:	fb03 f301 	mul.w	r3, r3, r1
 8007524:	4413      	add	r3, r2
 8007526:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 800752a:	2201      	movs	r2, #1
 800752c:	701a      	strb	r2, [r3, #0]
	LED_change_PWM_duty(testMeasureLED, leds[testMeasureLED].pattern_data[0]);
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <LED_init_for_measures+0x110>)
 8007530:	7818      	ldrb	r0, [r3, #0]
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <LED_init_for_measures+0x110>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	4619      	mov	r1, r3
 8007538:	4a07      	ldr	r2, [pc, #28]	; (8007558 <LED_init_for_measures+0x108>)
 800753a:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800753e:	fb03 f301 	mul.w	r3, r3, r1
 8007542:	4413      	add	r3, r2
 8007544:	3302      	adds	r3, #2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	4619      	mov	r1, r3
 800754a:	f000 f851 	bl	80075f0 <LED_change_PWM_duty>
#endif
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	bd90      	pop	{r4, r7, pc}
 8007556:	bf00      	nop
 8007558:	20000b6c 	.word	0x20000b6c
 800755c:	0002bf20 	.word	0x0002bf20
 8007560:	2000fad0 	.word	0x2000fad0

08007564 <LED_measure_update>:

void LED_measure_update()
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
#ifdef TEST_LED
	leds[testMeasureLED].pattern_on = 0;
 8007568:	4b1f      	ldr	r3, [pc, #124]	; (80075e8 <LED_measure_update+0x84>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	4a1f      	ldr	r2, [pc, #124]	; (80075ec <LED_measure_update+0x88>)
 8007570:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8007574:	fb03 f301 	mul.w	r3, r3, r1
 8007578:	4413      	add	r3, r2
 800757a:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
	LED_change_PWM_duty(testMeasureLED, 0);
 8007582:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <LED_measure_update+0x84>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f831 	bl	80075f0 <LED_change_PWM_duty>
	if(testMeasureLED == 2)
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <LED_measure_update+0x84>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d103      	bne.n	800759e <LED_measure_update+0x3a>
	{
		testMeasureLED = 0;
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <LED_measure_update+0x84>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
		// Stop the test
		return;
 800759c:	e022      	b.n	80075e4 <LED_measure_update+0x80>
	}
	else
	{
		testMeasureLED++;
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <LED_measure_update+0x84>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <LED_measure_update+0x84>)
 80075a8:	701a      	strb	r2, [r3, #0]
	}

	leds[testMeasureLED].pattern_on = 1;
 80075aa:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <LED_measure_update+0x84>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	4619      	mov	r1, r3
 80075b0:	4a0e      	ldr	r2, [pc, #56]	; (80075ec <LED_measure_update+0x88>)
 80075b2:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80075b6:	fb03 f301 	mul.w	r3, r3, r1
 80075ba:	4413      	add	r3, r2
 80075bc:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
	LED_change_PWM_duty(testMeasureLED, leds[testMeasureLED].pattern_data[0]);
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <LED_measure_update+0x84>)
 80075c6:	7818      	ldrb	r0, [r3, #0]
 80075c8:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <LED_measure_update+0x84>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	4a07      	ldr	r2, [pc, #28]	; (80075ec <LED_measure_update+0x88>)
 80075d0:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80075d4:	fb03 f301 	mul.w	r3, r3, r1
 80075d8:	4413      	add	r3, r2
 80075da:	3302      	adds	r3, #2
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	4619      	mov	r1, r3
 80075e0:	f000 f806 	bl	80075f0 <LED_change_PWM_duty>
#endif
}
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	2000fad0 	.word	0x2000fad0
 80075ec:	20000b6c 	.word	0x20000b6c

080075f0 <LED_change_PWM_duty>:

void LED_change_PWM_duty(uint8_t index, uint16_t duty)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	460a      	mov	r2, r1
 80075fa:	71fb      	strb	r3, [r7, #7]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80bb      	strh	r3, [r7, #4]
	leds[index].duty = duty;
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	4a0c      	ldr	r2, [pc, #48]	; (8007634 <LED_change_PWM_duty+0x44>)
 8007604:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	4413      	add	r3, r2
 800760e:	88ba      	ldrh	r2, [r7, #4]
 8007610:	801a      	strh	r2, [r3, #0]
	change_PWM_duty(index, leds[index].duty);
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	4a07      	ldr	r2, [pc, #28]	; (8007634 <LED_change_PWM_duty+0x44>)
 8007616:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	4413      	add	r3, r2
 8007620:	881a      	ldrh	r2, [r3, #0]
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f934 	bl	8007894 <change_PWM_duty>
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000b6c 	.word	0x20000b6c

08007638 <LED_change_pattern_data>:

void LED_change_pattern_data(uint8_t index, uint16_t length, uint16_t *data)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	603a      	str	r2, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
 8007644:	460b      	mov	r3, r1
 8007646:	80bb      	strh	r3, [r7, #4]
	if(length == 0)
 8007648:	88bb      	ldrh	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d110      	bne.n	8007670 <LED_change_pattern_data+0x38>
	{
		leds[index].pattern_on = 0;
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <LED_change_pattern_data+0x88>)
 8007652:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	4413      	add	r3, r2
 800765c:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
		LED_change_PWM_duty(index, 0);
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff ffc1 	bl	80075f0 <LED_change_PWM_duty>
	{
		memcpy(leds[index].pattern_data, data, length * sizeof(uint16_t));
		leds[index].pattern_on = 1;
		leds[index].pattern_length = length;
	}
}
 800766e:	e023      	b.n	80076b8 <LED_change_pattern_data+0x80>
		memcpy(leds[index].pattern_data, data, length * sizeof(uint16_t));
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <LED_change_pattern_data+0x88>)
 800767c:	4413      	add	r3, r2
 800767e:	1c98      	adds	r0, r3, #2
 8007680:	88bb      	ldrh	r3, [r7, #4]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	461a      	mov	r2, r3
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	f002 fbaa 	bl	8009de0 <memcpy>
		leds[index].pattern_on = 1;
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <LED_change_pattern_data+0x88>)
 8007690:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 800769e:	2201      	movs	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]
		leds[index].pattern_length = length;
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	4a06      	ldr	r2, [pc, #24]	; (80076c0 <LED_change_pattern_data+0x88>)
 80076a6:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 80076b4:	88ba      	ldrh	r2, [r7, #4]
 80076b6:	801a      	strh	r2, [r3, #0]
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000b6c 	.word	0x20000b6c

080076c4 <LED_change_pattern_interval>:

void LED_change_pattern_interval(uint8_t index, uint16_t interval)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	460a      	mov	r2, r1
 80076ce:	71fb      	strb	r3, [r7, #7]
 80076d0:	4613      	mov	r3, r2
 80076d2:	80bb      	strh	r3, [r7, #4]
	leds[index].pattern_interval = interval;
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	88ba      	ldrh	r2, [r7, #4]
 80076d8:	4907      	ldr	r1, [pc, #28]	; (80076f8 <LED_change_pattern_interval+0x34>)
 80076da:	f240 70e4 	movw	r0, #2020	; 0x7e4
 80076de:	fb00 f303 	mul.w	r3, r0, r3
 80076e2:	440b      	add	r3, r1
 80076e4:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80076e8:	601a      	str	r2, [r3, #0]
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000b6c 	.word	0x20000b6c

080076fc <LED_timer_interval_irq>:

void LED_timer_interval_irq()
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < MAX_LED_CHANNELS; i++)
 8007702:	2300      	movs	r3, #0
 8007704:	71fb      	strb	r3, [r7, #7]
 8007706:	e0b2      	b.n	800786e <LED_timer_interval_irq+0x172>
	{
		if(leds[i].pattern_on)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	4a5d      	ldr	r2, [pc, #372]	; (8007880 <LED_timer_interval_irq+0x184>)
 800770c:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	4413      	add	r3, r2
 8007716:	f203 73e2 	addw	r3, r3, #2018	; 0x7e2
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80a3 	beq.w	8007868 <LED_timer_interval_irq+0x16c>
		{
			leds[i].pattern_interval_count++;
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	4956      	ldr	r1, [pc, #344]	; (8007880 <LED_timer_interval_irq+0x184>)
 8007726:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800772a:	fb02 f203 	mul.w	r2, r2, r3
 800772e:	440a      	add	r2, r1
 8007730:	f202 72dc 	addw	r2, r2, #2012	; 0x7dc
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	3201      	adds	r2, #1
 8007738:	4951      	ldr	r1, [pc, #324]	; (8007880 <LED_timer_interval_irq+0x184>)
 800773a:	f240 70e4 	movw	r0, #2020	; 0x7e4
 800773e:	fb00 f303 	mul.w	r3, r0, r3
 8007742:	440b      	add	r3, r1
 8007744:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 8007748:	601a      	str	r2, [r3, #0]
			if(leds[i].pattern_interval_count >= leds[i].pattern_interval)
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	4a4c      	ldr	r2, [pc, #304]	; (8007880 <LED_timer_interval_irq+0x184>)
 800774e:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	4947      	ldr	r1, [pc, #284]	; (8007880 <LED_timer_interval_irq+0x184>)
 8007762:	f240 70e4 	movw	r0, #2020	; 0x7e4
 8007766:	fb00 f303 	mul.w	r3, r0, r3
 800776a:	440b      	add	r3, r1
 800776c:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d378      	bcc.n	8007868 <LED_timer_interval_irq+0x16c>
			{
				leds[i].pattern_interval_count = 0;
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	4a41      	ldr	r2, [pc, #260]	; (8007880 <LED_timer_interval_irq+0x184>)
 800777a:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	4413      	add	r3, r2
 8007784:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

				// Load next value
				leds[i].pattern_position++;
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	493c      	ldr	r1, [pc, #240]	; (8007880 <LED_timer_interval_irq+0x184>)
 8007790:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8007794:	fb02 f203 	mul.w	r2, r2, r3
 8007798:	440a      	add	r2, r1
 800779a:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 800779e:	8812      	ldrh	r2, [r2, #0]
 80077a0:	3201      	adds	r2, #1
 80077a2:	b290      	uxth	r0, r2
 80077a4:	4a36      	ldr	r2, [pc, #216]	; (8007880 <LED_timer_interval_irq+0x184>)
 80077a6:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80077b4:	4602      	mov	r2, r0
 80077b6:	801a      	strh	r2, [r3, #0]
				if(leds[i].pattern_position >= leds[i].pattern_length)
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	4a31      	ldr	r2, [pc, #196]	; (8007880 <LED_timer_interval_irq+0x184>)
 80077bc:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80077ca:	881a      	ldrh	r2, [r3, #0]
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	492c      	ldr	r1, [pc, #176]	; (8007880 <LED_timer_interval_irq+0x184>)
 80077d0:	f240 70e4 	movw	r0, #2020	; 0x7e4
 80077d4:	fb00 f303 	mul.w	r3, r0, r3
 80077d8:	440b      	add	r3, r1
 80077da:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d327      	bcc.n	8007834 <LED_timer_interval_irq+0x138>
				{
					leds[i].pattern_position = 0;
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	4a26      	ldr	r2, [pc, #152]	; (8007880 <LED_timer_interval_irq+0x184>)
 80077e8:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80077f6:	2200      	movs	r2, #0
 80077f8:	801a      	strh	r2, [r3, #0]

					LED_change_PWM_duty(i, leds[i].pattern_data[leds[i].pattern_position]);
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	79fa      	ldrb	r2, [r7, #7]
 80077fe:	4920      	ldr	r1, [pc, #128]	; (8007880 <LED_timer_interval_irq+0x184>)
 8007800:	f240 70e4 	movw	r0, #2020	; 0x7e4
 8007804:	fb00 f202 	mul.w	r2, r0, r2
 8007808:	440a      	add	r2, r1
 800780a:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 800780e:	8812      	ldrh	r2, [r2, #0]
 8007810:	4610      	mov	r0, r2
 8007812:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <LED_timer_interval_irq+0x184>)
 8007814:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4403      	add	r3, r0
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	4413      	add	r3, r2
 8007822:	885a      	ldrh	r2, [r3, #2]
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fee1 	bl	80075f0 <LED_change_PWM_duty>
					LED_measure_update();
 800782e:	f7ff fe99 	bl	8007564 <LED_measure_update>
 8007832:	e019      	b.n	8007868 <LED_timer_interval_irq+0x16c>
				}
				else
				{
					LED_change_PWM_duty(i, leds[i].pattern_data[leds[i].pattern_position]);
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	79fa      	ldrb	r2, [r7, #7]
 8007838:	4911      	ldr	r1, [pc, #68]	; (8007880 <LED_timer_interval_irq+0x184>)
 800783a:	f240 70e4 	movw	r0, #2020	; 0x7e4
 800783e:	fb00 f202 	mul.w	r2, r0, r2
 8007842:	440a      	add	r2, r1
 8007844:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8007848:	8812      	ldrh	r2, [r2, #0]
 800784a:	4610      	mov	r0, r2
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <LED_timer_interval_irq+0x184>)
 800784e:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8007852:	fb01 f303 	mul.w	r3, r1, r3
 8007856:	4403      	add	r3, r0
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4413      	add	r3, r2
 800785c:	885a      	ldrh	r2, [r3, #2]
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fec4 	bl	80075f0 <LED_change_PWM_duty>
	for(i = 0; i < MAX_LED_CHANNELS; i++)
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	3301      	adds	r3, #1
 800786c:	71fb      	strb	r3, [r7, #7]
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	2b13      	cmp	r3, #19
 8007872:	f67f af49 	bls.w	8007708 <LED_timer_interval_irq+0xc>
				}
			}
		}
	}
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000b6c 	.word	0x20000b6c

08007884 <tim6_IRQ>:
/* USER CODE BEGIN 0 */

uint8_t tim6_irq_flag = 0;

void tim6_IRQ()
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
	// Called every millisecond
	LED_timer_interval_irq();
 8007888:	f7ff ff38 	bl	80076fc <LED_timer_interval_irq>
	sequence_timer_IRQ();
 800788c:	f001 f808 	bl	80088a0 <sequence_timer_IRQ>
}
 8007890:	bf00      	nop
 8007892:	bd80      	pop	{r7, pc}

08007894 <change_PWM_duty>:

void change_PWM_duty(uint8_t led, uint16_t duty)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	460a      	mov	r2, r1
 800789e:	71fb      	strb	r3, [r7, #7]
 80078a0:	4613      	mov	r3, r2
 80078a2:	80bb      	strh	r3, [r7, #4]
	switch(led)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b13      	cmp	r3, #19
 80078a8:	f200 80ae 	bhi.w	8007a08 <change_PWM_duty+0x174>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <change_PWM_duty+0x20>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	08007905 	.word	0x08007905
 80078b8:	0800790f 	.word	0x0800790f
 80078bc:	08007919 	.word	0x08007919
 80078c0:	08007927 	.word	0x08007927
 80078c4:	08007935 	.word	0x08007935
 80078c8:	08007943 	.word	0x08007943
 80078cc:	0800794d 	.word	0x0800794d
 80078d0:	0800795b 	.word	0x0800795b
 80078d4:	08007969 	.word	0x08007969
 80078d8:	08007977 	.word	0x08007977
 80078dc:	08007985 	.word	0x08007985
 80078e0:	08007993 	.word	0x08007993
 80078e4:	0800799d 	.word	0x0800799d
 80078e8:	080079ab 	.word	0x080079ab
 80078ec:	080079b9 	.word	0x080079b9
 80078f0:	080079c7 	.word	0x080079c7
 80078f4:	080079d5 	.word	0x080079d5
 80078f8:	080079e3 	.word	0x080079e3
 80078fc:	080079f1 	.word	0x080079f1
 8007900:	080079fb 	.word	0x080079fb
	{
	case 0:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, duty);
 8007904:	4b44      	ldr	r3, [pc, #272]	; (8007a18 <change_PWM_duty+0x184>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	88ba      	ldrh	r2, [r7, #4]
 800790a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800790c:	e07d      	b.n	8007a0a <change_PWM_duty+0x176>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 800790e:	4b43      	ldr	r3, [pc, #268]	; (8007a1c <change_PWM_duty+0x188>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	88ba      	ldrh	r2, [r7, #4]
 8007914:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8007916:	e078      	b.n	8007a0a <change_PWM_duty+0x176>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, duty);
 8007918:	4b41      	ldr	r3, [pc, #260]	; (8007a20 <change_PWM_duty+0x18c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3334      	adds	r3, #52	; 0x34
 800791e:	330c      	adds	r3, #12
 8007920:	88ba      	ldrh	r2, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
		break;
 8007924:	e071      	b.n	8007a0a <change_PWM_duty+0x176>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
 8007926:	4b3f      	ldr	r3, [pc, #252]	; (8007a24 <change_PWM_duty+0x190>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3334      	adds	r3, #52	; 0x34
 800792c:	3308      	adds	r3, #8
 800792e:	88ba      	ldrh	r2, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
		break;
 8007932:	e06a      	b.n	8007a0a <change_PWM_duty+0x176>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 8007934:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <change_PWM_duty+0x188>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3334      	adds	r3, #52	; 0x34
 800793a:	3308      	adds	r3, #8
 800793c:	88ba      	ldrh	r2, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
		break;
 8007940:	e063      	b.n	8007a0a <change_PWM_duty+0x176>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 8007942:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <change_PWM_duty+0x194>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	88ba      	ldrh	r2, [r7, #4]
 8007948:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800794a:	e05e      	b.n	8007a0a <change_PWM_duty+0x176>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <change_PWM_duty+0x194>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3334      	adds	r3, #52	; 0x34
 8007952:	3308      	adds	r3, #8
 8007954:	88ba      	ldrh	r2, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
		break;
 8007958:	e057      	b.n	8007a0a <change_PWM_duty+0x176>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty);
 800795a:	4b33      	ldr	r3, [pc, #204]	; (8007a28 <change_PWM_duty+0x194>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3334      	adds	r3, #52	; 0x34
 8007960:	330c      	adds	r3, #12
 8007962:	88ba      	ldrh	r2, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
		break;
 8007966:	e050      	b.n	8007a0a <change_PWM_duty+0x176>
	case 8:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8007968:	4b2e      	ldr	r3, [pc, #184]	; (8007a24 <change_PWM_duty+0x190>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3334      	adds	r3, #52	; 0x34
 800796e:	3304      	adds	r3, #4
 8007970:	88ba      	ldrh	r2, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
		break;
 8007974:	e049      	b.n	8007a0a <change_PWM_duty+0x176>
	case 9:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty);
 8007976:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <change_PWM_duty+0x190>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3334      	adds	r3, #52	; 0x34
 800797c:	330c      	adds	r3, #12
 800797e:	88ba      	ldrh	r2, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
		break;
 8007982:	e042      	b.n	8007a0a <change_PWM_duty+0x176>
	case 10:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
 8007984:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <change_PWM_duty+0x194>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3334      	adds	r3, #52	; 0x34
 800798a:	3304      	adds	r3, #4
 800798c:	88ba      	ldrh	r2, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
		break;
 8007990:	e03b      	b.n	8007a0a <change_PWM_duty+0x176>
	case 11:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8007992:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <change_PWM_duty+0x190>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	88ba      	ldrh	r2, [r7, #4]
 8007998:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800799a:	e036      	b.n	8007a0a <change_PWM_duty+0x176>
	case 12:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, duty);
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <change_PWM_duty+0x184>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3334      	adds	r3, #52	; 0x34
 80079a2:	3308      	adds	r3, #8
 80079a4:	88ba      	ldrh	r2, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]
		break;
 80079a8:	e02f      	b.n	8007a0a <change_PWM_duty+0x176>
	case 13:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty);
 80079aa:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <change_PWM_duty+0x188>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3334      	adds	r3, #52	; 0x34
 80079b0:	330c      	adds	r3, #12
 80079b2:	88ba      	ldrh	r2, [r7, #4]
 80079b4:	601a      	str	r2, [r3, #0]
		break;
 80079b6:	e028      	b.n	8007a0a <change_PWM_duty+0x176>
	case 14:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, duty);
 80079b8:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <change_PWM_duty+0x184>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3334      	adds	r3, #52	; 0x34
 80079be:	330c      	adds	r3, #12
 80079c0:	88ba      	ldrh	r2, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
		break;
 80079c4:	e021      	b.n	8007a0a <change_PWM_duty+0x176>
	case 15:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <change_PWM_duty+0x188>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3334      	adds	r3, #52	; 0x34
 80079cc:	3304      	adds	r3, #4
 80079ce:	88ba      	ldrh	r2, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
		break;
 80079d2:	e01a      	b.n	8007a0a <change_PWM_duty+0x176>
	case 16:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty);
 80079d4:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <change_PWM_duty+0x198>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3334      	adds	r3, #52	; 0x34
 80079da:	3304      	adds	r3, #4
 80079dc:	88ba      	ldrh	r2, [r7, #4]
 80079de:	601a      	str	r2, [r3, #0]
		break;
 80079e0:	e013      	b.n	8007a0a <change_PWM_duty+0x176>
	case 17:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty);
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <change_PWM_duty+0x198>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3334      	adds	r3, #52	; 0x34
 80079e8:	3308      	adds	r3, #8
 80079ea:	88ba      	ldrh	r2, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
		break;
 80079ee:	e00c      	b.n	8007a0a <change_PWM_duty+0x176>
	case 18:
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, duty);
 80079f0:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <change_PWM_duty+0x19c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	88ba      	ldrh	r2, [r7, #4]
 80079f6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80079f8:	e007      	b.n	8007a0a <change_PWM_duty+0x176>
	case 19:
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, duty);
 80079fa:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <change_PWM_duty+0x19c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3334      	adds	r3, #52	; 0x34
 8007a00:	3304      	adds	r3, #4
 8007a02:	88ba      	ldrh	r2, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
		break;
 8007a06:	e000      	b.n	8007a0a <change_PWM_duty+0x176>
	default:
		break;
 8007a08:	bf00      	nop
	}
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	2000fad4 	.word	0x2000fad4
 8007a1c:	2000fc54 	.word	0x2000fc54
 8007a20:	2000fba0 	.word	0x2000fba0
 8007a24:	2000fd24 	.word	0x2000fd24
 8007a28:	2000fbdc 	.word	0x2000fbdc
 8007a2c:	2000fb10 	.word	0x2000fb10
 8007a30:	2000fc90 	.word	0x2000fc90

08007a34 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a38:	f7f8 fdb2 	bl	80005a0 <HAL_Init>

  /* USER CODE BEGIN Init */


 HAL_GPIO_WritePin(EN_15V_GPIO_Port, EN_15V_Pin, GPIO_PIN_RESET);
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a42:	484a      	ldr	r0, [pc, #296]	; (8007b6c <main+0x138>)
 8007a44:	f7f9 f910 	bl	8000c68 <HAL_GPIO_WritePin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a48:	f000 f8a2 	bl	8007b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a4c:	f000 fe26 	bl	800869c <MX_GPIO_Init>
  MX_I2C1_Init();
 8007a50:	f000 f92a 	bl	8007ca8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007a54:	f000 f95c 	bl	8007d10 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007a58:	f000 f98e 	bl	8007d78 <MX_SPI1_Init>
  MX_TIM1_Init();
 8007a5c:	f000 f9c8 	bl	8007df0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8007a60:	f000 fa88 	bl	8007f74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007a64:	f000 fb1e 	bl	80080a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007a68:	f000 fbb6 	bl	80081d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8007a6c:	f000 fc16 	bl	800829c <MX_TIM5_Init>
  MX_TIM8_Init();
 8007a70:	f000 fcba 	bl	80083e8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8007a74:	f000 fd6c 	bl	8008550 <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 8007a78:	f001 faaa 	bl	8008fd0 <MX_USB_DEVICE_Init>
  MX_TIM12_Init();
 8007a7c:	f000 fdd4 	bl	8008628 <MX_TIM12_Init>
  MX_TIM6_Init();
 8007a80:	f000 fc7c 	bl	800837c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  UserCode_Init();
 8007a84:	f7ff f8a0 	bl	8006bc8 <UserCode_Init>

  // Enable timers for PWM
	HAL_TIM_Base_Start(&htim1);
 8007a88:	4839      	ldr	r0, [pc, #228]	; (8007b70 <main+0x13c>)
 8007a8a:	f7fb fd61 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4837      	ldr	r0, [pc, #220]	; (8007b70 <main+0x13c>)
 8007a92:	f7fb fdbf 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8007a96:	2104      	movs	r1, #4
 8007a98:	4835      	ldr	r0, [pc, #212]	; (8007b70 <main+0x13c>)
 8007a9a:	f7fb fdbb 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8007a9e:	2108      	movs	r1, #8
 8007aa0:	4833      	ldr	r0, [pc, #204]	; (8007b70 <main+0x13c>)
 8007aa2:	f7fb fdb7 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8007aa6:	210c      	movs	r1, #12
 8007aa8:	4831      	ldr	r0, [pc, #196]	; (8007b70 <main+0x13c>)
 8007aaa:	f7fb fdb3 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 8007aae:	4831      	ldr	r0, [pc, #196]	; (8007b74 <main+0x140>)
 8007ab0:	f7fb fd4e 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	482f      	ldr	r0, [pc, #188]	; (8007b74 <main+0x140>)
 8007ab8:	f7fb fdac 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8007abc:	2104      	movs	r1, #4
 8007abe:	482d      	ldr	r0, [pc, #180]	; (8007b74 <main+0x140>)
 8007ac0:	f7fb fda8 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8007ac4:	2108      	movs	r1, #8
 8007ac6:	482b      	ldr	r0, [pc, #172]	; (8007b74 <main+0x140>)
 8007ac8:	f7fb fda4 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8007acc:	210c      	movs	r1, #12
 8007ace:	4829      	ldr	r0, [pc, #164]	; (8007b74 <main+0x140>)
 8007ad0:	f7fb fda0 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8007ad4:	4828      	ldr	r0, [pc, #160]	; (8007b78 <main+0x144>)
 8007ad6:	f7fb fd3b 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8007ada:	2100      	movs	r1, #0
 8007adc:	4826      	ldr	r0, [pc, #152]	; (8007b78 <main+0x144>)
 8007ade:	f7fb fd99 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4824      	ldr	r0, [pc, #144]	; (8007b78 <main+0x144>)
 8007ae6:	f7fb fd95 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8007aea:	2108      	movs	r1, #8
 8007aec:	4822      	ldr	r0, [pc, #136]	; (8007b78 <main+0x144>)
 8007aee:	f7fb fd91 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8007af2:	210c      	movs	r1, #12
 8007af4:	4820      	ldr	r0, [pc, #128]	; (8007b78 <main+0x144>)
 8007af6:	f7fb fd8d 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 8007afa:	4820      	ldr	r0, [pc, #128]	; (8007b7c <main+0x148>)
 8007afc:	f7fb fd28 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2 );
 8007b00:	2104      	movs	r1, #4
 8007b02:	481e      	ldr	r0, [pc, #120]	; (8007b7c <main+0x148>)
 8007b04:	f7fb fd86 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8007b08:	2108      	movs	r1, #8
 8007b0a:	481c      	ldr	r0, [pc, #112]	; (8007b7c <main+0x148>)
 8007b0c:	f7fb fd82 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim5);
 8007b10:	481b      	ldr	r0, [pc, #108]	; (8007b80 <main+0x14c>)
 8007b12:	f7fb fd1d 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8007b16:	210c      	movs	r1, #12
 8007b18:	4819      	ldr	r0, [pc, #100]	; (8007b80 <main+0x14c>)
 8007b1a:	f7fb fd7b 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim8);
 8007b1e:	4819      	ldr	r0, [pc, #100]	; (8007b84 <main+0x150>)
 8007b20:	f7fb fd16 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007b24:	2100      	movs	r1, #0
 8007b26:	4817      	ldr	r0, [pc, #92]	; (8007b84 <main+0x150>)
 8007b28:	f7fb fd74 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	4815      	ldr	r0, [pc, #84]	; (8007b84 <main+0x150>)
 8007b30:	f7fb fd70 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8007b34:	210c      	movs	r1, #12
 8007b36:	4813      	ldr	r0, [pc, #76]	; (8007b84 <main+0x150>)
 8007b38:	f7fb fd6c 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim9);
 8007b3c:	4812      	ldr	r0, [pc, #72]	; (8007b88 <main+0x154>)
 8007b3e:	f7fb fd07 	bl	8003550 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8007b42:	2100      	movs	r1, #0
 8007b44:	4810      	ldr	r0, [pc, #64]	; (8007b88 <main+0x154>)
 8007b46:	f7fb fd65 	bl	8003614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8007b4a:	2104      	movs	r1, #4
 8007b4c:	480e      	ldr	r0, [pc, #56]	; (8007b88 <main+0x154>)
 8007b4e:	f7fb fd61 	bl	8003614 <HAL_TIM_PWM_Start>

  // Activate power output for the LEDs
  HAL_GPIO_WritePin(EN_15V_GPIO_Port, EN_15V_Pin, GPIO_PIN_SET);
 8007b52:	2201      	movs	r2, #1
 8007b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b58:	4804      	ldr	r0, [pc, #16]	; (8007b6c <main+0x138>)
 8007b5a:	f7f9 f885 	bl	8000c68 <HAL_GPIO_WritePin>

  //VCP_SendString("Connected !\r\n");

  HAL_TIM_Base_Start_IT(&htim6);
 8007b5e:	480b      	ldr	r0, [pc, #44]	; (8007b8c <main+0x158>)
 8007b60:	f7fb fd11 	bl	8003586 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  UserCode_While();
 8007b64:	f7ff f844 	bl	8006bf0 <UserCode_While>
 8007b68:	e7fc      	b.n	8007b64 <main+0x130>
 8007b6a:	bf00      	nop
 8007b6c:	40020800 	.word	0x40020800
 8007b70:	2000fc54 	.word	0x2000fc54
 8007b74:	2000fd24 	.word	0x2000fd24
 8007b78:	2000fbdc 	.word	0x2000fbdc
 8007b7c:	2000fb10 	.word	0x2000fb10
 8007b80:	2000fba0 	.word	0x2000fba0
 8007b84:	2000fad4 	.word	0x2000fad4
 8007b88:	2000fc90 	.word	0x2000fc90
 8007b8c:	2000fc18 	.word	0x2000fc18

08007b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b098      	sub	sp, #96	; 0x60
 8007b94:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	4a3f      	ldr	r2, [pc, #252]	; (8007c98 <SystemClock_Config+0x108>)
 8007b9c:	4b3e      	ldr	r3, [pc, #248]	; (8007c98 <SystemClock_Config+0x108>)
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba6:	4b3c      	ldr	r3, [pc, #240]	; (8007c98 <SystemClock_Config+0x108>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	4a39      	ldr	r2, [pc, #228]	; (8007c9c <SystemClock_Config+0x10c>)
 8007bb8:	4b38      	ldr	r3, [pc, #224]	; (8007c9c <SystemClock_Config+0x10c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <SystemClock_Config+0x10c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bca:	607b      	str	r3, [r7, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007bdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007be2:	2308      	movs	r3, #8
 8007be4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007be6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007bea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007bec:	2302      	movs	r3, #2
 8007bee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007bf0:	2307      	movs	r3, #7
 8007bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fa fec1 	bl	8002980 <HAL_RCC_OscConfig>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007c04:	f240 1149 	movw	r1, #329	; 0x149
 8007c08:	4825      	ldr	r0, [pc, #148]	; (8007ca0 <SystemClock_Config+0x110>)
 8007c0a:	f000 fe43 	bl	8008894 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c0e:	230f      	movs	r3, #15
 8007c10:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c12:	2302      	movs	r3, #2
 8007c14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c16:	2300      	movs	r3, #0
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007c1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c24:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007c26:	f107 031c 	add.w	r3, r7, #28
 8007c2a:	2105      	movs	r1, #5
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fb f8e9 	bl	8002e04 <HAL_RCC_ClockConfig>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <SystemClock_Config+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007c38:	f240 1157 	movw	r1, #343	; 0x157
 8007c3c:	4818      	ldr	r0, [pc, #96]	; (8007ca0 <SystemClock_Config+0x110>)
 8007c3e:	f000 fe29 	bl	8008894 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007c42:	2301      	movs	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007c46:	23c0      	movs	r3, #192	; 0xc0
 8007c48:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fb fab0 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007c5e:	f240 115f 	movw	r1, #351	; 0x15f
 8007c62:	480f      	ldr	r0, [pc, #60]	; (8007ca0 <SystemClock_Config+0x110>)
 8007c64:	f000 fe16 	bl	8008894 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007c68:	f7fb fa86 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <SystemClock_Config+0x114>)
 8007c70:	fba3 2302 	umull	r2, r3, r3, r2
 8007c74:	099b      	lsrs	r3, r3, #6
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7f8 fe25 	bl	80008c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007c7c:	2004      	movs	r0, #4
 8007c7e:	f7f8 fe2f 	bl	80008e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007c82:	2200      	movs	r2, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	f7f8 fdf2 	bl	8000872 <HAL_NVIC_SetPriority>
}
 8007c8e:	bf00      	nop
 8007c90:	3760      	adds	r7, #96	; 0x60
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	40007000 	.word	0x40007000
 8007ca0:	0800af58 	.word	0x0800af58
 8007ca4:	10624dd3 	.word	0x10624dd3

08007ca8 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007cac:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cae:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <MX_I2C1_Init+0x5c>)
 8007cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cb4:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <MX_I2C1_Init+0x60>)
 8007cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007cbe:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007cde:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007ce4:	4806      	ldr	r0, [pc, #24]	; (8007d00 <MX_I2C1_Init+0x58>)
 8007ce6:	f7f8 ffd9 	bl	8000c9c <HAL_I2C_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <MX_I2C1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007cf0:	f240 117d 	movw	r1, #381	; 0x17d
 8007cf4:	4805      	ldr	r0, [pc, #20]	; (8007d0c <MX_I2C1_Init+0x64>)
 8007cf6:	f000 fdcd 	bl	8008894 <_Error_Handler>
  }

}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	2000fb4c 	.word	0x2000fb4c
 8007d04:	40005400 	.word	0x40005400
 8007d08:	000186a0 	.word	0x000186a0
 8007d0c:	0800af58 	.word	0x0800af58

08007d10 <MX_I2S3_Init>:

/* I2S3 init function */
static void MX_I2S3_Init(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8007d14:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d16:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <MX_I2S3_Init+0x5c>)
 8007d18:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d20:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8007d22:	4b11      	ldr	r3, [pc, #68]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007d28:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d34:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007d36:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d38:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <MX_I2S3_Init+0x60>)
 8007d3a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007d48:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007d4e:	4806      	ldr	r0, [pc, #24]	; (8007d68 <MX_I2S3_Init+0x58>)
 8007d50:	f7f9 f884 	bl	8000e5c <HAL_I2S_Init>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <MX_I2S3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007d5a:	f240 1191 	movw	r1, #401	; 0x191
 8007d5e:	4805      	ldr	r0, [pc, #20]	; (8007d74 <MX_I2S3_Init+0x64>)
 8007d60:	f000 fd98 	bl	8008894 <_Error_Handler>
  }

}
 8007d64:	bf00      	nop
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	2000fd9c 	.word	0x2000fd9c
 8007d6c:	40003c00 	.word	0x40003c00
 8007d70:	00017700 	.word	0x00017700
 8007d74:	0800af58 	.word	0x0800af58

08007d78 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007d7c:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <MX_SPI1_Init+0x70>)
 8007d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007d82:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007d8a:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d90:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d9c:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007da2:	4b10      	ldr	r3, [pc, #64]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007daa:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007db0:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007dc8:	4806      	ldr	r0, [pc, #24]	; (8007de4 <MX_SPI1_Init+0x6c>)
 8007dca:	f7fb fb33 	bl	8003434 <HAL_SPI_Init>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <MX_SPI1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007dd4:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007dd8:	4804      	ldr	r0, [pc, #16]	; (8007dec <MX_SPI1_Init+0x74>)
 8007dda:	f000 fd5b 	bl	8008894 <_Error_Handler>
  }

}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	2000fccc 	.word	0x2000fccc
 8007de8:	40013000 	.word	0x40013000
 8007dec:	0800af58 	.word	0x0800af58

08007df0 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b094      	sub	sp, #80	; 0x50
 8007df4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8007df6:	4b5c      	ldr	r3, [pc, #368]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007df8:	4a5c      	ldr	r2, [pc, #368]	; (8007f6c <MX_TIM1_Init+0x17c>)
 8007dfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007dfc:	4b5a      	ldr	r3, [pc, #360]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e02:	4b59      	ldr	r3, [pc, #356]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007e08:	4b57      	ldr	r3, [pc, #348]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e10:	4b55      	ldr	r3, [pc, #340]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e16:	4b54      	ldr	r3, [pc, #336]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007e1c:	4852      	ldr	r0, [pc, #328]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e1e:	f7fb fb6c 	bl	80034fa <HAL_TIM_Base_Init>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007e28:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007e2c:	4850      	ldr	r0, [pc, #320]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007e2e:	f000 fd31 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e36:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	484a      	ldr	r0, [pc, #296]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e40:	f7fb fdea 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <MX_TIM1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007e4a:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007e4e:	4848      	ldr	r0, [pc, #288]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007e50:	f000 fd20 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007e54:	4844      	ldr	r0, [pc, #272]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e56:	f7fb fbb1 	bl	80035bc <HAL_TIM_PWM_Init>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <MX_TIM1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007e60:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8007e64:	4842      	ldr	r0, [pc, #264]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007e66:	f000 fd15 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e76:	4619      	mov	r1, r3
 8007e78:	483b      	ldr	r0, [pc, #236]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007e7a:	f7fc fa16 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <MX_TIM1_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007e84:	f240 11d1 	movw	r1, #465	; 0x1d1
 8007e88:	4839      	ldr	r0, [pc, #228]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007e8a:	f000 fd03 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e8e:	2360      	movs	r3, #96	; 0x60
 8007e90:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007eaa:	f107 031c 	add.w	r3, r7, #28
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	482d      	ldr	r0, [pc, #180]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007eb4:	f7fb fcea 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <MX_TIM1_Init+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007ebe:	f240 11dd 	movw	r1, #477	; 0x1dd
 8007ec2:	482b      	ldr	r0, [pc, #172]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007ec4:	f000 fce6 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007ec8:	f107 031c 	add.w	r3, r7, #28
 8007ecc:	2204      	movs	r2, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4825      	ldr	r0, [pc, #148]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007ed2:	f7fb fcdb 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <MX_TIM1_Init+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007edc:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007ee0:	4823      	ldr	r0, [pc, #140]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007ee2:	f000 fcd7 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007ee6:	f107 031c 	add.w	r3, r7, #28
 8007eea:	2208      	movs	r2, #8
 8007eec:	4619      	mov	r1, r3
 8007eee:	481e      	ldr	r0, [pc, #120]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007ef0:	f7fb fccc 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <MX_TIM1_Init+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007efa:	f240 11e7 	movw	r1, #487	; 0x1e7
 8007efe:	481c      	ldr	r0, [pc, #112]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007f00:	f000 fcc8 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007f04:	f107 031c 	add.w	r3, r7, #28
 8007f08:	220c      	movs	r2, #12
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4816      	ldr	r0, [pc, #88]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007f0e:	f7fb fcbd 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <MX_TIM1_Init+0x132>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f18:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8007f1c:	4814      	ldr	r0, [pc, #80]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007f1e:	f000 fcb9 	bl	8008894 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007f22:	2300      	movs	r3, #0
 8007f24:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007f40:	463b      	mov	r3, r7
 8007f42:	4619      	mov	r1, r3
 8007f44:	4808      	ldr	r0, [pc, #32]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007f46:	f7fc f9f5 	bl	8004334 <HAL_TIMEx_ConfigBreakDeadTime>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <MX_TIM1_Init+0x16a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f50:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8007f54:	4806      	ldr	r0, [pc, #24]	; (8007f70 <MX_TIM1_Init+0x180>)
 8007f56:	f000 fc9d 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8007f5a:	4803      	ldr	r0, [pc, #12]	; (8007f68 <MX_TIM1_Init+0x178>)
 8007f5c:	f000 ff0c 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 8007f60:	bf00      	nop
 8007f62:	3750      	adds	r7, #80	; 0x50
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	2000fc54 	.word	0x2000fc54
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	0800af58 	.word	0x0800af58

08007f74 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08e      	sub	sp, #56	; 0x38
 8007f78:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8007f7a:	4b48      	ldr	r3, [pc, #288]	; (800809c <MX_TIM2_Init+0x128>)
 8007f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007f80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007f82:	4b46      	ldr	r3, [pc, #280]	; (800809c <MX_TIM2_Init+0x128>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f88:	4b44      	ldr	r3, [pc, #272]	; (800809c <MX_TIM2_Init+0x128>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007f8e:	4b43      	ldr	r3, [pc, #268]	; (800809c <MX_TIM2_Init+0x128>)
 8007f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f96:	4b41      	ldr	r3, [pc, #260]	; (800809c <MX_TIM2_Init+0x128>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007f9c:	483f      	ldr	r0, [pc, #252]	; (800809c <MX_TIM2_Init+0x128>)
 8007f9e:	f7fb faac 	bl	80034fa <HAL_TIM_Base_Init>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <MX_TIM2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007fa8:	f240 210e 	movw	r1, #526	; 0x20e
 8007fac:	483c      	ldr	r0, [pc, #240]	; (80080a0 <MX_TIM2_Init+0x12c>)
 8007fae:	f000 fc71 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4837      	ldr	r0, [pc, #220]	; (800809c <MX_TIM2_Init+0x128>)
 8007fc0:	f7fb fd2a 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <MX_TIM2_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007fca:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007fce:	4834      	ldr	r0, [pc, #208]	; (80080a0 <MX_TIM2_Init+0x12c>)
 8007fd0:	f000 fc60 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007fd4:	4831      	ldr	r0, [pc, #196]	; (800809c <MX_TIM2_Init+0x128>)
 8007fd6:	f7fb faf1 	bl	80035bc <HAL_TIM_PWM_Init>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007fe0:	f240 2119 	movw	r1, #537	; 0x219
 8007fe4:	482e      	ldr	r0, [pc, #184]	; (80080a0 <MX_TIM2_Init+0x12c>)
 8007fe6:	f000 fc55 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fea:	2300      	movs	r3, #0
 8007fec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007ff2:	f107 0320 	add.w	r3, r7, #32
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4828      	ldr	r0, [pc, #160]	; (800809c <MX_TIM2_Init+0x128>)
 8007ffa:	f7fc f956 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <MX_TIM2_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008004:	f44f 7108 	mov.w	r1, #544	; 0x220
 8008008:	4825      	ldr	r0, [pc, #148]	; (80080a0 <MX_TIM2_Init+0x12c>)
 800800a:	f000 fc43 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800800e:	2360      	movs	r3, #96	; 0x60
 8008010:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800801a:	2300      	movs	r3, #0
 800801c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800801e:	1d3b      	adds	r3, r7, #4
 8008020:	2200      	movs	r2, #0
 8008022:	4619      	mov	r1, r3
 8008024:	481d      	ldr	r0, [pc, #116]	; (800809c <MX_TIM2_Init+0x128>)
 8008026:	f7fb fc31 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <MX_TIM2_Init+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008030:	f240 2129 	movw	r1, #553	; 0x229
 8008034:	481a      	ldr	r0, [pc, #104]	; (80080a0 <MX_TIM2_Init+0x12c>)
 8008036:	f000 fc2d 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	2204      	movs	r2, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4816      	ldr	r0, [pc, #88]	; (800809c <MX_TIM2_Init+0x128>)
 8008042:	f7fb fc23 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <MX_TIM2_Init+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800804c:	f240 212e 	movw	r1, #558	; 0x22e
 8008050:	4813      	ldr	r0, [pc, #76]	; (80080a0 <MX_TIM2_Init+0x12c>)
 8008052:	f000 fc1f 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	2208      	movs	r2, #8
 800805a:	4619      	mov	r1, r3
 800805c:	480f      	ldr	r0, [pc, #60]	; (800809c <MX_TIM2_Init+0x128>)
 800805e:	f7fb fc15 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <MX_TIM2_Init+0xfe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008068:	f240 2133 	movw	r1, #563	; 0x233
 800806c:	480c      	ldr	r0, [pc, #48]	; (80080a0 <MX_TIM2_Init+0x12c>)
 800806e:	f000 fc11 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	220c      	movs	r2, #12
 8008076:	4619      	mov	r1, r3
 8008078:	4808      	ldr	r0, [pc, #32]	; (800809c <MX_TIM2_Init+0x128>)
 800807a:	f7fb fc07 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <MX_TIM2_Init+0x11a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008084:	f44f 710e 	mov.w	r1, #568	; 0x238
 8008088:	4805      	ldr	r0, [pc, #20]	; (80080a0 <MX_TIM2_Init+0x12c>)
 800808a:	f000 fc03 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 800808e:	4803      	ldr	r0, [pc, #12]	; (800809c <MX_TIM2_Init+0x128>)
 8008090:	f000 fe72 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 8008094:	bf00      	nop
 8008096:	3738      	adds	r7, #56	; 0x38
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	2000fd24 	.word	0x2000fd24
 80080a0:	0800af58 	.word	0x0800af58

080080a4 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	; 0x38
 80080a8:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80080aa:	4b48      	ldr	r3, [pc, #288]	; (80081cc <MX_TIM3_Init+0x128>)
 80080ac:	4a48      	ldr	r2, [pc, #288]	; (80081d0 <MX_TIM3_Init+0x12c>)
 80080ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80080b0:	4b46      	ldr	r3, [pc, #280]	; (80081cc <MX_TIM3_Init+0x128>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080b6:	4b45      	ldr	r3, [pc, #276]	; (80081cc <MX_TIM3_Init+0x128>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80080bc:	4b43      	ldr	r3, [pc, #268]	; (80081cc <MX_TIM3_Init+0x128>)
 80080be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080c4:	4b41      	ldr	r3, [pc, #260]	; (80081cc <MX_TIM3_Init+0x128>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80080ca:	4840      	ldr	r0, [pc, #256]	; (80081cc <MX_TIM3_Init+0x128>)
 80080cc:	f7fb fa15 	bl	80034fa <HAL_TIM_Base_Init>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <MX_TIM3_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80080d6:	f240 214e 	movw	r1, #590	; 0x24e
 80080da:	483e      	ldr	r0, [pc, #248]	; (80081d4 <MX_TIM3_Init+0x130>)
 80080dc:	f000 fbda 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80080e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080ea:	4619      	mov	r1, r3
 80080ec:	4837      	ldr	r0, [pc, #220]	; (80081cc <MX_TIM3_Init+0x128>)
 80080ee:	f7fb fc93 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <MX_TIM3_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80080f8:	f44f 7115 	mov.w	r1, #596	; 0x254
 80080fc:	4835      	ldr	r0, [pc, #212]	; (80081d4 <MX_TIM3_Init+0x130>)
 80080fe:	f000 fbc9 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008102:	4832      	ldr	r0, [pc, #200]	; (80081cc <MX_TIM3_Init+0x128>)
 8008104:	f7fb fa5a 	bl	80035bc <HAL_TIM_PWM_Init>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <MX_TIM3_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 800810e:	f240 2159 	movw	r1, #601	; 0x259
 8008112:	4830      	ldr	r0, [pc, #192]	; (80081d4 <MX_TIM3_Init+0x130>)
 8008114:	f000 fbbe 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008118:	2300      	movs	r3, #0
 800811a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800811c:	2300      	movs	r3, #0
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008120:	f107 0320 	add.w	r3, r7, #32
 8008124:	4619      	mov	r1, r3
 8008126:	4829      	ldr	r0, [pc, #164]	; (80081cc <MX_TIM3_Init+0x128>)
 8008128:	f7fc f8bf 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d004      	beq.n	800813c <MX_TIM3_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008132:	f44f 7118 	mov.w	r1, #608	; 0x260
 8008136:	4827      	ldr	r0, [pc, #156]	; (80081d4 <MX_TIM3_Init+0x130>)
 8008138:	f000 fbac 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800813c:	2360      	movs	r3, #96	; 0x60
 800813e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	2200      	movs	r2, #0
 8008150:	4619      	mov	r1, r3
 8008152:	481e      	ldr	r0, [pc, #120]	; (80081cc <MX_TIM3_Init+0x128>)
 8008154:	f7fb fb9a 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d004      	beq.n	8008168 <MX_TIM3_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800815e:	f240 2169 	movw	r1, #617	; 0x269
 8008162:	481c      	ldr	r0, [pc, #112]	; (80081d4 <MX_TIM3_Init+0x130>)
 8008164:	f000 fb96 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008168:	1d3b      	adds	r3, r7, #4
 800816a:	2204      	movs	r2, #4
 800816c:	4619      	mov	r1, r3
 800816e:	4817      	ldr	r0, [pc, #92]	; (80081cc <MX_TIM3_Init+0x128>)
 8008170:	f7fb fb8c 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <MX_TIM3_Init+0xe0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800817a:	f240 216e 	movw	r1, #622	; 0x26e
 800817e:	4815      	ldr	r0, [pc, #84]	; (80081d4 <MX_TIM3_Init+0x130>)
 8008180:	f000 fb88 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	2208      	movs	r2, #8
 8008188:	4619      	mov	r1, r3
 800818a:	4810      	ldr	r0, [pc, #64]	; (80081cc <MX_TIM3_Init+0x128>)
 800818c:	f7fb fb7e 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <MX_TIM3_Init+0xfc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008196:	f240 2173 	movw	r1, #627	; 0x273
 800819a:	480e      	ldr	r0, [pc, #56]	; (80081d4 <MX_TIM3_Init+0x130>)
 800819c:	f000 fb7a 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80081a0:	1d3b      	adds	r3, r7, #4
 80081a2:	220c      	movs	r2, #12
 80081a4:	4619      	mov	r1, r3
 80081a6:	4809      	ldr	r0, [pc, #36]	; (80081cc <MX_TIM3_Init+0x128>)
 80081a8:	f7fb fb70 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <MX_TIM3_Init+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 80081b2:	f44f 711e 	mov.w	r1, #632	; 0x278
 80081b6:	4807      	ldr	r0, [pc, #28]	; (80081d4 <MX_TIM3_Init+0x130>)
 80081b8:	f000 fb6c 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <MX_TIM3_Init+0x128>)
 80081be:	f000 fddb 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 80081c2:	bf00      	nop
 80081c4:	3738      	adds	r7, #56	; 0x38
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	2000fbdc 	.word	0x2000fbdc
 80081d0:	40000400 	.word	0x40000400
 80081d4:	0800af58 	.word	0x0800af58

080081d8 <MX_TIM4_Init>:

/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08a      	sub	sp, #40	; 0x28
 80081dc:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 80081de:	4b2c      	ldr	r3, [pc, #176]	; (8008290 <MX_TIM4_Init+0xb8>)
 80081e0:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <MX_TIM4_Init+0xbc>)
 80081e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80081e4:	4b2a      	ldr	r3, [pc, #168]	; (8008290 <MX_TIM4_Init+0xb8>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081ea:	4b29      	ldr	r3, [pc, #164]	; (8008290 <MX_TIM4_Init+0xb8>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80081f0:	4b27      	ldr	r3, [pc, #156]	; (8008290 <MX_TIM4_Init+0xb8>)
 80081f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <MX_TIM4_Init+0xb8>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80081fe:	4824      	ldr	r0, [pc, #144]	; (8008290 <MX_TIM4_Init+0xb8>)
 8008200:	f7fb f9dc 	bl	80035bc <HAL_TIM_PWM_Init>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <MX_TIM4_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800820a:	f240 218d 	movw	r1, #653	; 0x28d
 800820e:	4822      	ldr	r0, [pc, #136]	; (8008298 <MX_TIM4_Init+0xc0>)
 8008210:	f000 fb40 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008214:	2300      	movs	r3, #0
 8008216:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008218:	2300      	movs	r3, #0
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800821c:	f107 0320 	add.w	r3, r7, #32
 8008220:	4619      	mov	r1, r3
 8008222:	481b      	ldr	r0, [pc, #108]	; (8008290 <MX_TIM4_Init+0xb8>)
 8008224:	f7fc f841 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <MX_TIM4_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 800822e:	f44f 7125 	mov.w	r1, #660	; 0x294
 8008232:	4819      	ldr	r0, [pc, #100]	; (8008298 <MX_TIM4_Init+0xc0>)
 8008234:	f000 fb2e 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008238:	2360      	movs	r3, #96	; 0x60
 800823a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008248:	1d3b      	adds	r3, r7, #4
 800824a:	2204      	movs	r2, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4810      	ldr	r0, [pc, #64]	; (8008290 <MX_TIM4_Init+0xb8>)
 8008250:	f7fb fb1c 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <MX_TIM4_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800825a:	f240 219d 	movw	r1, #669	; 0x29d
 800825e:	480e      	ldr	r0, [pc, #56]	; (8008298 <MX_TIM4_Init+0xc0>)
 8008260:	f000 fb18 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	2208      	movs	r2, #8
 8008268:	4619      	mov	r1, r3
 800826a:	4809      	ldr	r0, [pc, #36]	; (8008290 <MX_TIM4_Init+0xb8>)
 800826c:	f7fb fb0e 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <MX_TIM4_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008276:	f240 21a2 	movw	r1, #674	; 0x2a2
 800827a:	4807      	ldr	r0, [pc, #28]	; (8008298 <MX_TIM4_Init+0xc0>)
 800827c:	f000 fb0a 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8008280:	4803      	ldr	r0, [pc, #12]	; (8008290 <MX_TIM4_Init+0xb8>)
 8008282:	f000 fd79 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 8008286:	bf00      	nop
 8008288:	3728      	adds	r7, #40	; 0x28
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	2000fb10 	.word	0x2000fb10
 8008294:	40000800 	.word	0x40000800
 8008298:	0800af58 	.word	0x0800af58

0800829c <MX_TIM5_Init>:

/* TIM5 init function */
static void MX_TIM5_Init(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	; 0x38
 80082a0:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 80082a2:	4b33      	ldr	r3, [pc, #204]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082a4:	4a33      	ldr	r2, [pc, #204]	; (8008374 <MX_TIM5_Init+0xd8>)
 80082a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80082a8:	4b31      	ldr	r3, [pc, #196]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082ae:	4b30      	ldr	r3, [pc, #192]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80082b4:	4b2e      	ldr	r3, [pc, #184]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082bc:	4b2c      	ldr	r3, [pc, #176]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082be:	2200      	movs	r2, #0
 80082c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80082c2:	482b      	ldr	r0, [pc, #172]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082c4:	f7fb f919 	bl	80034fa <HAL_TIM_Base_Init>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <MX_TIM5_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80082ce:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80082d2:	4829      	ldr	r0, [pc, #164]	; (8008378 <MX_TIM5_Init+0xdc>)
 80082d4:	f000 fade 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80082de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082e2:	4619      	mov	r1, r3
 80082e4:	4822      	ldr	r0, [pc, #136]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082e6:	f7fb fb97 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d004      	beq.n	80082fa <MX_TIM5_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80082f0:	f240 21be 	movw	r1, #702	; 0x2be
 80082f4:	4820      	ldr	r0, [pc, #128]	; (8008378 <MX_TIM5_Init+0xdc>)
 80082f6:	f000 facd 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80082fa:	481d      	ldr	r0, [pc, #116]	; (8008370 <MX_TIM5_Init+0xd4>)
 80082fc:	f7fb f95e 	bl	80035bc <HAL_TIM_PWM_Init>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <MX_TIM5_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008306:	f240 21c3 	movw	r1, #707	; 0x2c3
 800830a:	481b      	ldr	r0, [pc, #108]	; (8008378 <MX_TIM5_Init+0xdc>)
 800830c:	f000 fac2 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008310:	2300      	movs	r3, #0
 8008312:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008314:	2300      	movs	r3, #0
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008318:	f107 0320 	add.w	r3, r7, #32
 800831c:	4619      	mov	r1, r3
 800831e:	4814      	ldr	r0, [pc, #80]	; (8008370 <MX_TIM5_Init+0xd4>)
 8008320:	f7fb ffc3 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <MX_TIM5_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 800832a:	f240 21ca 	movw	r1, #714	; 0x2ca
 800832e:	4812      	ldr	r0, [pc, #72]	; (8008378 <MX_TIM5_Init+0xdc>)
 8008330:	f000 fab0 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008334:	2360      	movs	r3, #96	; 0x60
 8008336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008344:	1d3b      	adds	r3, r7, #4
 8008346:	220c      	movs	r2, #12
 8008348:	4619      	mov	r1, r3
 800834a:	4809      	ldr	r0, [pc, #36]	; (8008370 <MX_TIM5_Init+0xd4>)
 800834c:	f7fb fa9e 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <MX_TIM5_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008356:	f240 21d3 	movw	r1, #723	; 0x2d3
 800835a:	4807      	ldr	r0, [pc, #28]	; (8008378 <MX_TIM5_Init+0xdc>)
 800835c:	f000 fa9a 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim5);
 8008360:	4803      	ldr	r0, [pc, #12]	; (8008370 <MX_TIM5_Init+0xd4>)
 8008362:	f000 fd09 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 8008366:	bf00      	nop
 8008368:	3738      	adds	r7, #56	; 0x38
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	2000fba0 	.word	0x2000fba0
 8008374:	40000c00 	.word	0x40000c00
 8008378:	0800af58 	.word	0x0800af58

0800837c <MX_TIM6_Init>:

/* TIM6 init function */
static void MX_TIM6_Init(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8008382:	4b16      	ldr	r3, [pc, #88]	; (80083dc <MX_TIM6_Init+0x60>)
 8008384:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <MX_TIM6_Init+0x64>)
 8008386:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8008388:	4b14      	ldr	r3, [pc, #80]	; (80083dc <MX_TIM6_Init+0x60>)
 800838a:	2201      	movs	r2, #1
 800838c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <MX_TIM6_Init+0x60>)
 8008390:	2200      	movs	r2, #0
 8008392:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 42000;
 8008394:	4b11      	ldr	r3, [pc, #68]	; (80083dc <MX_TIM6_Init+0x60>)
 8008396:	f24a 4210 	movw	r2, #42000	; 0xa410
 800839a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800839c:	480f      	ldr	r0, [pc, #60]	; (80083dc <MX_TIM6_Init+0x60>)
 800839e:	f7fb f8ac 	bl	80034fa <HAL_TIM_Base_Init>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <MX_TIM6_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80083a8:	f240 21e6 	movw	r1, #742	; 0x2e6
 80083ac:	480d      	ldr	r0, [pc, #52]	; (80083e4 <MX_TIM6_Init+0x68>)
 80083ae:	f000 fa71 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083b2:	2300      	movs	r3, #0
 80083b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80083ba:	463b      	mov	r3, r7
 80083bc:	4619      	mov	r1, r3
 80083be:	4807      	ldr	r0, [pc, #28]	; (80083dc <MX_TIM6_Init+0x60>)
 80083c0:	f7fb ff73 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <MX_TIM6_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80083ca:	f240 21ed 	movw	r1, #749	; 0x2ed
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <MX_TIM6_Init+0x68>)
 80083d0:	f000 fa60 	bl	8008894 <_Error_Handler>
  }

}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	2000fc18 	.word	0x2000fc18
 80083e0:	40001000 	.word	0x40001000
 80083e4:	0800af58 	.word	0x0800af58

080083e8 <MX_TIM8_Init>:

/* TIM8 init function */
static void MX_TIM8_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b094      	sub	sp, #80	; 0x50
 80083ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim8.Instance = TIM8;
 80083ee:	4b55      	ldr	r3, [pc, #340]	; (8008544 <MX_TIM8_Init+0x15c>)
 80083f0:	4a55      	ldr	r2, [pc, #340]	; (8008548 <MX_TIM8_Init+0x160>)
 80083f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80083f4:	4b53      	ldr	r3, [pc, #332]	; (8008544 <MX_TIM8_Init+0x15c>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083fa:	4b52      	ldr	r3, [pc, #328]	; (8008544 <MX_TIM8_Init+0x15c>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8008400:	4b50      	ldr	r3, [pc, #320]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008406:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008408:	4b4e      	ldr	r3, [pc, #312]	; (8008544 <MX_TIM8_Init+0x15c>)
 800840a:	2200      	movs	r2, #0
 800840c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800840e:	4b4d      	ldr	r3, [pc, #308]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008410:	2200      	movs	r2, #0
 8008412:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008414:	484b      	ldr	r0, [pc, #300]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008416:	f7fb f870 	bl	80034fa <HAL_TIM_Base_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <MX_TIM8_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008420:	f240 3103 	movw	r1, #771	; 0x303
 8008424:	4849      	ldr	r0, [pc, #292]	; (800854c <MX_TIM8_Init+0x164>)
 8008426:	f000 fa35 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800842a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800842e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008434:	4619      	mov	r1, r3
 8008436:	4843      	ldr	r0, [pc, #268]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008438:	f7fb faee 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <MX_TIM8_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008442:	f240 3109 	movw	r1, #777	; 0x309
 8008446:	4841      	ldr	r0, [pc, #260]	; (800854c <MX_TIM8_Init+0x164>)
 8008448:	f000 fa24 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800844c:	483d      	ldr	r0, [pc, #244]	; (8008544 <MX_TIM8_Init+0x15c>)
 800844e:	f7fb f8b5 	bl	80035bc <HAL_TIM_PWM_Init>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <MX_TIM8_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008458:	f240 310e 	movw	r1, #782	; 0x30e
 800845c:	483b      	ldr	r0, [pc, #236]	; (800854c <MX_TIM8_Init+0x164>)
 800845e:	f000 fa19 	bl	8008894 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008462:	2300      	movs	r3, #0
 8008464:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008466:	2300      	movs	r3, #0
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800846a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800846e:	4619      	mov	r1, r3
 8008470:	4834      	ldr	r0, [pc, #208]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008472:	f7fb ff1a 	bl	80042aa <HAL_TIMEx_MasterConfigSynchronization>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <MX_TIM8_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800847c:	f240 3115 	movw	r1, #789	; 0x315
 8008480:	4832      	ldr	r0, [pc, #200]	; (800854c <MX_TIM8_Init+0x164>)
 8008482:	f000 fa07 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008486:	2360      	movs	r3, #96	; 0x60
 8008488:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800848e:	2300      	movs	r3, #0
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008492:	2300      	movs	r3, #0
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008496:	2300      	movs	r3, #0
 8008498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800849a:	2300      	movs	r3, #0
 800849c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800849e:	2300      	movs	r3, #0
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084a2:	f107 031c 	add.w	r3, r7, #28
 80084a6:	2200      	movs	r2, #0
 80084a8:	4619      	mov	r1, r3
 80084aa:	4826      	ldr	r0, [pc, #152]	; (8008544 <MX_TIM8_Init+0x15c>)
 80084ac:	f7fb f9ee 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <MX_TIM8_Init+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80084b6:	f240 3121 	movw	r1, #801	; 0x321
 80084ba:	4824      	ldr	r0, [pc, #144]	; (800854c <MX_TIM8_Init+0x164>)
 80084bc:	f000 f9ea 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80084c0:	f107 031c 	add.w	r3, r7, #28
 80084c4:	2208      	movs	r2, #8
 80084c6:	4619      	mov	r1, r3
 80084c8:	481e      	ldr	r0, [pc, #120]	; (8008544 <MX_TIM8_Init+0x15c>)
 80084ca:	f7fb f9df 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <MX_TIM8_Init+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
 80084d4:	f240 3126 	movw	r1, #806	; 0x326
 80084d8:	481c      	ldr	r0, [pc, #112]	; (800854c <MX_TIM8_Init+0x164>)
 80084da:	f000 f9db 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80084de:	f107 031c 	add.w	r3, r7, #28
 80084e2:	220c      	movs	r2, #12
 80084e4:	4619      	mov	r1, r3
 80084e6:	4817      	ldr	r0, [pc, #92]	; (8008544 <MX_TIM8_Init+0x15c>)
 80084e8:	f7fb f9d0 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <MX_TIM8_Init+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 80084f2:	f240 312b 	movw	r1, #811	; 0x32b
 80084f6:	4815      	ldr	r0, [pc, #84]	; (800854c <MX_TIM8_Init+0x164>)
 80084f8:	f000 f9cc 	bl	8008894 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008500:	2300      	movs	r3, #0
 8008502:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008504:	2300      	movs	r3, #0
 8008506:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008514:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008516:	2300      	movs	r3, #0
 8008518:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800851a:	463b      	mov	r3, r7
 800851c:	4619      	mov	r1, r3
 800851e:	4809      	ldr	r0, [pc, #36]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008520:	f7fb ff08 	bl	8004334 <HAL_TIMEx_ConfigBreakDeadTime>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <MX_TIM8_Init+0x14c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800852a:	f240 3137 	movw	r1, #823	; 0x337
 800852e:	4807      	ldr	r0, [pc, #28]	; (800854c <MX_TIM8_Init+0x164>)
 8008530:	f000 f9b0 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim8);
 8008534:	4803      	ldr	r0, [pc, #12]	; (8008544 <MX_TIM8_Init+0x15c>)
 8008536:	f000 fc1f 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 800853a:	bf00      	nop
 800853c:	3750      	adds	r7, #80	; 0x50
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	2000fad4 	.word	0x2000fad4
 8008548:	40010400 	.word	0x40010400
 800854c:	0800af58 	.word	0x0800af58

08008550 <MX_TIM9_Init>:

/* TIM9 init function */
static void MX_TIM9_Init(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08c      	sub	sp, #48	; 0x30
 8008554:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim9.Instance = TIM9;
 8008556:	4b31      	ldr	r3, [pc, #196]	; (800861c <MX_TIM9_Init+0xcc>)
 8008558:	4a31      	ldr	r2, [pc, #196]	; (8008620 <MX_TIM9_Init+0xd0>)
 800855a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800855c:	4b2f      	ldr	r3, [pc, #188]	; (800861c <MX_TIM9_Init+0xcc>)
 800855e:	2200      	movs	r2, #0
 8008560:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008562:	4b2e      	ldr	r3, [pc, #184]	; (800861c <MX_TIM9_Init+0xcc>)
 8008564:	2200      	movs	r2, #0
 8008566:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8008568:	4b2c      	ldr	r3, [pc, #176]	; (800861c <MX_TIM9_Init+0xcc>)
 800856a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800856e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008570:	4b2a      	ldr	r3, [pc, #168]	; (800861c <MX_TIM9_Init+0xcc>)
 8008572:	2200      	movs	r2, #0
 8008574:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8008576:	4829      	ldr	r0, [pc, #164]	; (800861c <MX_TIM9_Init+0xcc>)
 8008578:	f7fa ffbf 	bl	80034fa <HAL_TIM_Base_Init>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <MX_TIM9_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008582:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8008586:	4827      	ldr	r0, [pc, #156]	; (8008624 <MX_TIM9_Init+0xd4>)
 8008588:	f000 f984 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800858c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008590:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8008592:	f107 0320 	add.w	r3, r7, #32
 8008596:	4619      	mov	r1, r3
 8008598:	4820      	ldr	r0, [pc, #128]	; (800861c <MX_TIM9_Init+0xcc>)
 800859a:	f7fb fa3d 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <MX_TIM9_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80085a4:	f240 3152 	movw	r1, #850	; 0x352
 80085a8:	481e      	ldr	r0, [pc, #120]	; (8008624 <MX_TIM9_Init+0xd4>)
 80085aa:	f000 f973 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80085ae:	481b      	ldr	r0, [pc, #108]	; (800861c <MX_TIM9_Init+0xcc>)
 80085b0:	f7fb f804 	bl	80035bc <HAL_TIM_PWM_Init>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <MX_TIM9_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 80085ba:	f240 3157 	movw	r1, #855	; 0x357
 80085be:	4819      	ldr	r0, [pc, #100]	; (8008624 <MX_TIM9_Init+0xd4>)
 80085c0:	f000 f968 	bl	8008894 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085c4:	2360      	movs	r3, #96	; 0x60
 80085c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085d4:	1d3b      	adds	r3, r7, #4
 80085d6:	2200      	movs	r2, #0
 80085d8:	4619      	mov	r1, r3
 80085da:	4810      	ldr	r0, [pc, #64]	; (800861c <MX_TIM9_Init+0xcc>)
 80085dc:	f7fb f956 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <MX_TIM9_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80085e6:	f44f 7158 	mov.w	r1, #864	; 0x360
 80085ea:	480e      	ldr	r0, [pc, #56]	; (8008624 <MX_TIM9_Init+0xd4>)
 80085ec:	f000 f952 	bl	8008894 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80085f0:	1d3b      	adds	r3, r7, #4
 80085f2:	2204      	movs	r2, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4809      	ldr	r0, [pc, #36]	; (800861c <MX_TIM9_Init+0xcc>)
 80085f8:	f7fb f948 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <MX_TIM9_Init+0xbc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008602:	f240 3165 	movw	r1, #869	; 0x365
 8008606:	4807      	ldr	r0, [pc, #28]	; (8008624 <MX_TIM9_Init+0xd4>)
 8008608:	f000 f944 	bl	8008894 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim9);
 800860c:	4803      	ldr	r0, [pc, #12]	; (800861c <MX_TIM9_Init+0xcc>)
 800860e:	f000 fbb3 	bl	8008d78 <HAL_TIM_MspPostInit>

}
 8008612:	bf00      	nop
 8008614:	3730      	adds	r7, #48	; 0x30
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	2000fc90 	.word	0x2000fc90
 8008620:	40014000 	.word	0x40014000
 8008624:	0800af58 	.word	0x0800af58

08008628 <MX_TIM12_Init>:

/* TIM12 init function */
static void MX_TIM12_Init(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;

  htim12.Instance = TIM12;
 800862e:	4b18      	ldr	r3, [pc, #96]	; (8008690 <MX_TIM12_Init+0x68>)
 8008630:	4a18      	ldr	r2, [pc, #96]	; (8008694 <MX_TIM12_Init+0x6c>)
 8008632:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3000;
 8008634:	4b16      	ldr	r3, [pc, #88]	; (8008690 <MX_TIM12_Init+0x68>)
 8008636:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800863a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800863c:	4b14      	ldr	r3, [pc, #80]	; (8008690 <MX_TIM12_Init+0x68>)
 800863e:	2200      	movs	r2, #0
 8008640:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <MX_TIM12_Init+0x68>)
 8008644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008648:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800864a:	4b11      	ldr	r3, [pc, #68]	; (8008690 <MX_TIM12_Init+0x68>)
 800864c:	2200      	movs	r2, #0
 800864e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8008650:	480f      	ldr	r0, [pc, #60]	; (8008690 <MX_TIM12_Init+0x68>)
 8008652:	f7fa ff52 	bl	80034fa <HAL_TIM_Base_Init>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <MX_TIM12_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800865c:	f240 3179 	movw	r1, #889	; 0x379
 8008660:	480d      	ldr	r0, [pc, #52]	; (8008698 <MX_TIM12_Init+0x70>)
 8008662:	f000 f917 	bl	8008894 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800866a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800866c:	463b      	mov	r3, r7
 800866e:	4619      	mov	r1, r3
 8008670:	4807      	ldr	r0, [pc, #28]	; (8008690 <MX_TIM12_Init+0x68>)
 8008672:	f7fb f9d1 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <MX_TIM12_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800867c:	f240 317f 	movw	r1, #895	; 0x37f
 8008680:	4805      	ldr	r0, [pc, #20]	; (8008698 <MX_TIM12_Init+0x70>)
 8008682:	f000 f907 	bl	8008894 <_Error_Handler>
  }

}
 8008686:	bf00      	nop
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	2000fd60 	.word	0x2000fd60
 8008694:	40001800 	.word	0x40001800
 8008698:	0800af58 	.word	0x0800af58

0800869c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
static void MX_GPIO_Init(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80086a2:	2300      	movs	r3, #0
 80086a4:	61bb      	str	r3, [r7, #24]
 80086a6:	4a74      	ldr	r2, [pc, #464]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086a8:	4b73      	ldr	r3, [pc, #460]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ac:	f043 0310 	orr.w	r3, r3, #16
 80086b0:	6313      	str	r3, [r2, #48]	; 0x30
 80086b2:	4b71      	ldr	r3, [pc, #452]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	61bb      	str	r3, [r7, #24]
 80086bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	4a6d      	ldr	r2, [pc, #436]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086c4:	4b6c      	ldr	r3, [pc, #432]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	f043 0304 	orr.w	r3, r3, #4
 80086cc:	6313      	str	r3, [r2, #48]	; 0x30
 80086ce:	4b6a      	ldr	r3, [pc, #424]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086da:	2300      	movs	r3, #0
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	4a66      	ldr	r2, [pc, #408]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086e0:	4b65      	ldr	r3, [pc, #404]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	6313      	str	r3, [r2, #48]	; 0x30
 80086ea:	4b63      	ldr	r3, [pc, #396]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	4a5f      	ldr	r2, [pc, #380]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086fc:	4b5e      	ldr	r3, [pc, #376]	; (8008878 <MX_GPIO_Init+0x1dc>)
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	6313      	str	r3, [r2, #48]	; 0x30
 8008706:	4b5c      	ldr	r3, [pc, #368]	; (8008878 <MX_GPIO_Init+0x1dc>)
 8008708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
 8008716:	4a58      	ldr	r2, [pc, #352]	; (8008878 <MX_GPIO_Init+0x1dc>)
 8008718:	4b57      	ldr	r3, [pc, #348]	; (8008878 <MX_GPIO_Init+0x1dc>)
 800871a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871c:	f043 0302 	orr.w	r3, r3, #2
 8008720:	6313      	str	r3, [r2, #48]	; 0x30
 8008722:	4b55      	ldr	r3, [pc, #340]	; (8008878 <MX_GPIO_Init+0x1dc>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	4a51      	ldr	r2, [pc, #324]	; (8008878 <MX_GPIO_Init+0x1dc>)
 8008734:	4b50      	ldr	r3, [pc, #320]	; (8008878 <MX_GPIO_Init+0x1dc>)
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	f043 0308 	orr.w	r3, r3, #8
 800873c:	6313      	str	r3, [r2, #48]	; 0x30
 800873e:	4b4e      	ldr	r3, [pc, #312]	; (8008878 <MX_GPIO_Init+0x1dc>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800874a:	2200      	movs	r2, #0
 800874c:	2108      	movs	r1, #8
 800874e:	484b      	ldr	r0, [pc, #300]	; (800887c <MX_GPIO_Init+0x1e0>)
 8008750:	f7f8 fa8a 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_15V_GPIO_Port, EN_15V_Pin, GPIO_PIN_RESET);
 8008754:	2200      	movs	r2, #0
 8008756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800875a:	4849      	ldr	r0, [pc, #292]	; (8008880 <MX_GPIO_Init+0x1e4>)
 800875c:	f7f8 fa84 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008760:	2201      	movs	r2, #1
 8008762:	2101      	movs	r1, #1
 8008764:	4846      	ldr	r0, [pc, #280]	; (8008880 <MX_GPIO_Init+0x1e4>)
 8008766:	f7f8 fa7f 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800876a:	2200      	movs	r2, #0
 800876c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8008770:	4844      	ldr	r0, [pc, #272]	; (8008884 <MX_GPIO_Init+0x1e8>)
 8008772:	f7f8 fa79 	bl	8000c68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8008776:	2308      	movs	r3, #8
 8008778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800877a:	2301      	movs	r3, #1
 800877c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877e:	2300      	movs	r3, #0
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008782:	2300      	movs	r3, #0
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8008786:	f107 031c 	add.w	r3, r7, #28
 800878a:	4619      	mov	r1, r3
 800878c:	483b      	ldr	r0, [pc, #236]	; (800887c <MX_GPIO_Init+0x1e0>)
 800878e:	f7f8 f8d1 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_15V_Pin OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = EN_15V_Pin|OTG_FS_PowerSwitchOn_Pin;
 8008792:	f242 0301 	movw	r3, #8193	; 0x2001
 8008796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008798:	2301      	movs	r3, #1
 800879a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800879c:	2300      	movs	r3, #0
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087a0:	2300      	movs	r3, #0
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087a4:	f107 031c 	add.w	r3, r7, #28
 80087a8:	4619      	mov	r1, r3
 80087aa:	4835      	ldr	r0, [pc, #212]	; (8008880 <MX_GPIO_Init+0x1e4>)
 80087ac:	f7f8 f8c2 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80087b0:	2308      	movs	r3, #8
 80087b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b4:	2302      	movs	r3, #2
 80087b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087bc:	2300      	movs	r3, #0
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80087c0:	2305      	movs	r3, #5
 80087c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80087c4:	f107 031c 	add.w	r3, r7, #28
 80087c8:	4619      	mov	r1, r3
 80087ca:	482d      	ldr	r0, [pc, #180]	; (8008880 <MX_GPIO_Init+0x1e4>)
 80087cc:	f7f8 f8b2 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80087d0:	2301      	movs	r3, #1
 80087d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80087d4:	4b2c      	ldr	r3, [pc, #176]	; (8008888 <MX_GPIO_Init+0x1ec>)
 80087d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80087dc:	f107 031c 	add.w	r3, r7, #28
 80087e0:	4619      	mov	r1, r3
 80087e2:	482a      	ldr	r0, [pc, #168]	; (800888c <MX_GPIO_Init+0x1f0>)
 80087e4:	f7f8 f8a6 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80087e8:	2304      	movs	r3, #4
 80087ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087ec:	2300      	movs	r3, #0
 80087ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80087f4:	f107 031c 	add.w	r3, r7, #28
 80087f8:	4619      	mov	r1, r3
 80087fa:	4825      	ldr	r0, [pc, #148]	; (8008890 <MX_GPIO_Init+0x1f4>)
 80087fc:	f7f8 f89a 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008806:	2302      	movs	r3, #2
 8008808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880a:	2300      	movs	r3, #0
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880e:	2300      	movs	r3, #0
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008812:	2305      	movs	r3, #5
 8008814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008816:	f107 031c 	add.w	r3, r7, #28
 800881a:	4619      	mov	r1, r3
 800881c:	481c      	ldr	r0, [pc, #112]	; (8008890 <MX_GPIO_Init+0x1f4>)
 800881e:	f7f8 f889 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8008822:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008826:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008828:	2301      	movs	r3, #1
 800882a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882c:	2300      	movs	r3, #0
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008830:	2300      	movs	r3, #0
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008834:	f107 031c 	add.w	r3, r7, #28
 8008838:	4619      	mov	r1, r3
 800883a:	4812      	ldr	r0, [pc, #72]	; (8008884 <MX_GPIO_Init+0x1e8>)
 800883c:	f7f8 f87a 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008840:	2320      	movs	r3, #32
 8008842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008844:	2300      	movs	r3, #0
 8008846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008848:	2300      	movs	r3, #0
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800884c:	f107 031c 	add.w	r3, r7, #28
 8008850:	4619      	mov	r1, r3
 8008852:	480c      	ldr	r0, [pc, #48]	; (8008884 <MX_GPIO_Init+0x1e8>)
 8008854:	f7f8 f86e 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008858:	2302      	movs	r3, #2
 800885a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <MX_GPIO_Init+0x1ec>)
 800885e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008860:	2300      	movs	r3, #0
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008864:	f107 031c 	add.w	r3, r7, #28
 8008868:	4619      	mov	r1, r3
 800886a:	4804      	ldr	r0, [pc, #16]	; (800887c <MX_GPIO_Init+0x1e0>)
 800886c:	f7f8 f862 	bl	8000934 <HAL_GPIO_Init>

}
 8008870:	bf00      	nop
 8008872:	3730      	adds	r7, #48	; 0x30
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	40023800 	.word	0x40023800
 800887c:	40021000 	.word	0x40021000
 8008880:	40020800 	.word	0x40020800
 8008884:	40020c00 	.word	0x40020c00
 8008888:	10120000 	.word	0x10120000
 800888c:	40020000 	.word	0x40020000
 8008890:	40020400 	.word	0x40020400

08008894 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800889e:	e7fe      	b.n	800889e <_Error_Handler+0xa>

080088a0 <sequence_timer_IRQ>:
}



void sequence_timer_IRQ()
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
	if(testSequence.is_active)
 80088a4:	4b3d      	ldr	r3, [pc, #244]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088a6:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d075      	beq.n	800899a <sequence_timer_IRQ+0xfa>
	{
		testSequence.interval_counter++;
 80088ae:	4b3b      	ldr	r3, [pc, #236]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088b0:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a39      	ldr	r2, [pc, #228]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088b8:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
		testSequence.duration_counter++;
 80088bc:	4b37      	ldr	r3, [pc, #220]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088be:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80088c2:	3301      	adds	r3, #1
 80088c4:	4a35      	ldr	r2, [pc, #212]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088c6:	f8c2 332c 	str.w	r3, [r2, #812]	; 0x32c

		if(testSequence.duration_counter >= testSequence.patterns[testSequence.current_pattern]->duration)
 80088ca:	4b34      	ldr	r3, [pc, #208]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088cc:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 80088d0:	4b32      	ldr	r3, [pc, #200]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088d2:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80088d6:	4619      	mov	r1, r3
 80088d8:	4b30      	ldr	r3, [pc, #192]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d31c      	bcc.n	800891e <sequence_timer_IRQ+0x7e>
		{
			testSequence.duration_counter = 0;
 80088e4:	4b2d      	ldr	r3, [pc, #180]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
			testSequence.current_pattern++;
 80088ec:	4b2b      	ldr	r3, [pc, #172]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088ee:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80088f2:	3301      	adds	r3, #1
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	4b29      	ldr	r3, [pc, #164]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088f8:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320

			if(testSequence.current_pattern >= testSequence.patterns_size)
 80088fc:	4b27      	ldr	r3, [pc, #156]	; (800899c <sequence_timer_IRQ+0xfc>)
 80088fe:	f8b3 2320 	ldrh.w	r2, [r3, #800]	; 0x320
 8008902:	4b26      	ldr	r3, [pc, #152]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008904:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8008908:	429a      	cmp	r2, r3
 800890a:	d308      	bcc.n	800891e <sequence_timer_IRQ+0x7e>
			{
				testSequence.is_active = 0;
 800890c:	4b23      	ldr	r3, [pc, #140]	; (800899c <sequence_timer_IRQ+0xfc>)
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				LED_change_PWM_duty(1, 0);
 8008914:	2100      	movs	r1, #0
 8008916:	2001      	movs	r0, #1
 8008918:	f7fe fe6a 	bl	80075f0 <LED_change_PWM_duty>
				return;
 800891c:	e03d      	b.n	800899a <sequence_timer_IRQ+0xfa>
			}
		}

		if(testSequence.interval_counter >= testSequence.patterns[testSequence.current_pattern]->interval)
 800891e:	4b1f      	ldr	r3, [pc, #124]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008920:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 8008924:	4b1d      	ldr	r3, [pc, #116]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008926:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 800892a:	4619      	mov	r1, r3
 800892c:	4b1b      	ldr	r3, [pc, #108]	; (800899c <sequence_timer_IRQ+0xfc>)
 800892e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d330      	bcc.n	800899a <sequence_timer_IRQ+0xfa>
		{
			testSequence.interval_counter = 0;
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <sequence_timer_IRQ+0xfc>)
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
			testSequence.pattern_counter++;
 8008940:	4b16      	ldr	r3, [pc, #88]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008942:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8008946:	3301      	adds	r3, #1
 8008948:	b29a      	uxth	r2, r3
 800894a:	4b14      	ldr	r3, [pc, #80]	; (800899c <sequence_timer_IRQ+0xfc>)
 800894c:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322

			if(testSequence.pattern_counter >= testSequence.patterns[testSequence.current_pattern]->patternData->size)
 8008950:	4b12      	ldr	r3, [pc, #72]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008952:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8008956:	4b11      	ldr	r3, [pc, #68]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008958:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 800895c:	4619      	mov	r1, r3
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008960:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d303      	bcc.n	8008974 <sequence_timer_IRQ+0xd4>
			{
				testSequence.pattern_counter = 0;
 800896c:	4b0b      	ldr	r3, [pc, #44]	; (800899c <sequence_timer_IRQ+0xfc>)
 800896e:	2200      	movs	r2, #0
 8008970:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
			}

			LED_change_PWM_duty(1, testSequence.patterns[testSequence.current_pattern]->patternData->data[testSequence.pattern_counter]);
 8008974:	4b09      	ldr	r3, [pc, #36]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008976:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 800897a:	461a      	mov	r2, r3
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <sequence_timer_IRQ+0xfc>)
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	4b05      	ldr	r3, [pc, #20]	; (800899c <sequence_timer_IRQ+0xfc>)
 8008988:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4413      	add	r3, r2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	4619      	mov	r1, r3
 8008994:	2001      	movs	r0, #1
 8008996:	f7fe fe2b 	bl	80075f0 <LED_change_PWM_duty>
		}
	}
}
 800899a:	bd80      	pop	{r7, pc}
 800899c:	2000fde4 	.word	0x2000fde4

080089a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089a6:	2300      	movs	r3, #0
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	4a25      	ldr	r2, [pc, #148]	; (8008a40 <HAL_MspInit+0xa0>)
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <HAL_MspInit+0xa0>)
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089b4:	6453      	str	r3, [r2, #68]	; 0x44
 80089b6:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <HAL_MspInit+0xa0>)
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089c2:	2300      	movs	r3, #0
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4a1e      	ldr	r2, [pc, #120]	; (8008a40 <HAL_MspInit+0xa0>)
 80089c8:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <HAL_MspInit+0xa0>)
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d0:	6413      	str	r3, [r2, #64]	; 0x40
 80089d2:	4b1b      	ldr	r3, [pc, #108]	; (8008a40 <HAL_MspInit+0xa0>)
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80089de:	2007      	movs	r0, #7
 80089e0:	f7f7 ff3c 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80089e4:	2200      	movs	r2, #0
 80089e6:	2100      	movs	r1, #0
 80089e8:	f06f 000b 	mvn.w	r0, #11
 80089ec:	f7f7 ff41 	bl	8000872 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80089f0:	2200      	movs	r2, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	f06f 000a 	mvn.w	r0, #10
 80089f8:	f7f7 ff3b 	bl	8000872 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80089fc:	2200      	movs	r2, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	f06f 0009 	mvn.w	r0, #9
 8008a04:	f7f7 ff35 	bl	8000872 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	f06f 0004 	mvn.w	r0, #4
 8008a10:	f7f7 ff2f 	bl	8000872 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	f06f 0003 	mvn.w	r0, #3
 8008a1c:	f7f7 ff29 	bl	8000872 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8008a20:	2200      	movs	r2, #0
 8008a22:	2100      	movs	r1, #0
 8008a24:	f06f 0001 	mvn.w	r0, #1
 8008a28:	f7f7 ff23 	bl	8000872 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2100      	movs	r1, #0
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	f7f7 ff1d 	bl	8000872 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40023800 	.word	0x40023800

08008a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a12      	ldr	r2, [pc, #72]	; (8008a9c <HAL_I2C_MspInit+0x58>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d11e      	bne.n	8008a94 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008a56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008a5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a5c:	2312      	movs	r3, #18
 8008a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a60:	2301      	movs	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a68:	2304      	movs	r3, #4
 8008a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a6c:	f107 030c 	add.w	r3, r7, #12
 8008a70:	4619      	mov	r1, r3
 8008a72:	480b      	ldr	r0, [pc, #44]	; (8008aa0 <HAL_I2C_MspInit+0x5c>)
 8008a74:	f7f7 ff5e 	bl	8000934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <HAL_I2C_MspInit+0x60>)
 8008a7e:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <HAL_I2C_MspInit+0x60>)
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a86:	6413      	str	r3, [r2, #64]	; 0x40
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_I2C_MspInit+0x60>)
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008a94:	bf00      	nop
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	40005400 	.word	0x40005400
 8008aa0:	40020400 	.word	0x40020400
 8008aa4:	40023800 	.word	0x40023800

08008aa8 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1a      	ldr	r2, [pc, #104]	; (8008b20 <HAL_I2S_MspInit+0x78>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d12e      	bne.n	8008b18 <HAL_I2S_MspInit+0x70>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	4a19      	ldr	r2, [pc, #100]	; (8008b24 <HAL_I2S_MspInit+0x7c>)
 8008ac0:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <HAL_I2S_MspInit+0x7c>)
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8008aca:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <HAL_I2S_MspInit+0x7c>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ada:	2302      	movs	r3, #2
 8008adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008ae6:	2306      	movs	r3, #6
 8008ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008aea:	f107 030c 	add.w	r3, r7, #12
 8008aee:	4619      	mov	r1, r3
 8008af0:	480d      	ldr	r0, [pc, #52]	; (8008b28 <HAL_I2S_MspInit+0x80>)
 8008af2:	f7f7 ff1f 	bl	8000934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008af6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008afc:	2302      	movs	r3, #2
 8008afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b08:	2306      	movs	r3, #6
 8008b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	4619      	mov	r1, r3
 8008b12:	4806      	ldr	r0, [pc, #24]	; (8008b2c <HAL_I2S_MspInit+0x84>)
 8008b14:	f7f7 ff0e 	bl	8000934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008b18:	bf00      	nop
 8008b1a:	3720      	adds	r7, #32
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40003c00 	.word	0x40003c00
 8008b24:	40023800 	.word	0x40023800
 8008b28:	40020000 	.word	0x40020000
 8008b2c:	40020800 	.word	0x40020800

08008b30 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <HAL_SPI_MspInit+0x58>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d11d      	bne.n	8008b7e <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008b42:	2300      	movs	r3, #0
 8008b44:	60bb      	str	r3, [r7, #8]
 8008b46:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <HAL_SPI_MspInit+0x5c>)
 8008b48:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <HAL_SPI_MspInit+0x5c>)
 8008b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b50:	6453      	str	r3, [r2, #68]	; 0x44
 8008b52:	4b0e      	ldr	r3, [pc, #56]	; (8008b8c <HAL_SPI_MspInit+0x5c>)
 8008b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008b5e:	23e0      	movs	r3, #224	; 0xe0
 8008b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b62:	2302      	movs	r3, #2
 8008b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008b6e:	2305      	movs	r3, #5
 8008b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b72:	f107 030c 	add.w	r3, r7, #12
 8008b76:	4619      	mov	r1, r3
 8008b78:	4805      	ldr	r0, [pc, #20]	; (8008b90 <HAL_SPI_MspInit+0x60>)
 8008b7a:	f7f7 fedb 	bl	8000934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008b7e:	bf00      	nop
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40013000 	.word	0x40013000
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	40020000 	.word	0x40020000

08008b94 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a5c      	ldr	r2, [pc, #368]	; (8008d14 <HAL_TIM_Base_MspInit+0x180>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d10e      	bne.n	8008bc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8008baa:	4a5b      	ldr	r2, [pc, #364]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bac:	4b5a      	ldr	r3, [pc, #360]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb6:	4b58      	ldr	r3, [pc, #352]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8008bc2:	e0a2      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bcc:	d10e      	bne.n	8008bec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008bce:	2300      	movs	r3, #0
 8008bd0:	623b      	str	r3, [r7, #32]
 8008bd2:	4a51      	ldr	r2, [pc, #324]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bd4:	4b50      	ldr	r3, [pc, #320]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8008bde:	4b4e      	ldr	r3, [pc, #312]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	623b      	str	r3, [r7, #32]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
}
 8008bea:	e08e      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a4a      	ldr	r2, [pc, #296]	; (8008d1c <HAL_TIM_Base_MspInit+0x188>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d10e      	bne.n	8008c14 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
 8008bfa:	4a47      	ldr	r2, [pc, #284]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bfc:	4b46      	ldr	r3, [pc, #280]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	6413      	str	r3, [r2, #64]	; 0x40
 8008c06:	4b44      	ldr	r3, [pc, #272]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	69fb      	ldr	r3, [r7, #28]
}
 8008c12:	e07a      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM5)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a41      	ldr	r2, [pc, #260]	; (8008d20 <HAL_TIM_Base_MspInit+0x18c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d10e      	bne.n	8008c3c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	4a3d      	ldr	r2, [pc, #244]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c24:	4b3c      	ldr	r3, [pc, #240]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c28:	f043 0308 	orr.w	r3, r3, #8
 8008c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c2e:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	61bb      	str	r3, [r7, #24]
 8008c38:	69bb      	ldr	r3, [r7, #24]
}
 8008c3a:	e066      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM6)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a38      	ldr	r2, [pc, #224]	; (8008d24 <HAL_TIM_Base_MspInit+0x190>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d116      	bne.n	8008c74 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	4a33      	ldr	r2, [pc, #204]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c4c:	4b32      	ldr	r3, [pc, #200]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	f043 0310 	orr.w	r3, r3, #16
 8008c54:	6413      	str	r3, [r2, #64]	; 0x40
 8008c56:	4b30      	ldr	r3, [pc, #192]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	f003 0310 	and.w	r3, r3, #16
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	2036      	movs	r0, #54	; 0x36
 8008c68:	f7f7 fe03 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008c6c:	2036      	movs	r0, #54	; 0x36
 8008c6e:	f7f7 fe1c 	bl	80008aa <HAL_NVIC_EnableIRQ>
}
 8008c72:	e04a      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a2b      	ldr	r2, [pc, #172]	; (8008d28 <HAL_TIM_Base_MspInit+0x194>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d116      	bne.n	8008cac <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	4a25      	ldr	r2, [pc, #148]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c84:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c88:	f043 0302 	orr.w	r3, r3, #2
 8008c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c8e:	4b22      	ldr	r3, [pc, #136]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	202b      	movs	r0, #43	; 0x2b
 8008ca0:	f7f7 fde7 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8008ca4:	202b      	movs	r0, #43	; 0x2b
 8008ca6:	f7f7 fe00 	bl	80008aa <HAL_NVIC_EnableIRQ>
}
 8008caa:	e02e      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM9)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1e      	ldr	r2, [pc, #120]	; (8008d2c <HAL_TIM_Base_MspInit+0x198>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d10e      	bne.n	8008cd4 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008cbc:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
}
 8008cd2:	e01a      	b.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM12)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a15      	ldr	r2, [pc, #84]	; (8008d30 <HAL_TIM_Base_MspInit+0x19c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d115      	bne.n	8008d0a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
 8008ce2:	4a0d      	ldr	r2, [pc, #52]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cec:	6413      	str	r3, [r2, #64]	; 0x40
 8008cee:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <HAL_TIM_Base_MspInit+0x184>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	202b      	movs	r0, #43	; 0x2b
 8008d00:	f7f7 fdb7 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8008d04:	202b      	movs	r0, #43	; 0x2b
 8008d06:	f7f7 fdd0 	bl	80008aa <HAL_NVIC_EnableIRQ>
}
 8008d0a:	bf00      	nop
 8008d0c:	3728      	adds	r7, #40	; 0x28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000c00 	.word	0x40000c00
 8008d24:	40001000 	.word	0x40001000
 8008d28:	40010400 	.word	0x40010400
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40001800 	.word	0x40001800

08008d34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM4)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0b      	ldr	r2, [pc, #44]	; (8008d70 <HAL_TIM_PWM_MspInit+0x3c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d10d      	bne.n	8008d62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <HAL_TIM_PWM_MspInit+0x40>)
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <HAL_TIM_PWM_MspInit+0x40>)
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	f043 0304 	orr.w	r3, r3, #4
 8008d54:	6413      	str	r3, [r2, #64]	; 0x40
 8008d56:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <HAL_TIM_PWM_MspInit+0x40>)
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40023800 	.word	0x40023800

08008d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a57      	ldr	r2, [pc, #348]	; (8008ee4 <HAL_TIM_MspPostInit+0x16c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d111      	bne.n	8008dae <HAL_TIM_MspPostInit+0x36>
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008d8a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8008d8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d90:	2302      	movs	r3, #2
 8008d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008da0:	f107 030c 	add.w	r3, r7, #12
 8008da4:	4619      	mov	r1, r3
 8008da6:	4850      	ldr	r0, [pc, #320]	; (8008ee8 <HAL_TIM_MspPostInit+0x170>)
 8008da8:	f7f7 fdc4 	bl	8000934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8008dac:	e096      	b.n	8008edc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM2)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db6:	d122      	bne.n	8008dfe <HAL_TIM_MspPostInit+0x86>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8008db8:	f248 0306 	movw	r3, #32774	; 0x8006
 8008dbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dce:	f107 030c 	add.w	r3, r7, #12
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4845      	ldr	r0, [pc, #276]	; (8008eec <HAL_TIM_MspPostInit+0x174>)
 8008dd6:	f7f7 fdad 	bl	8000934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de0:	2302      	movs	r3, #2
 8008de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008dec:	2301      	movs	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008df0:	f107 030c 	add.w	r3, r7, #12
 8008df4:	4619      	mov	r1, r3
 8008df6:	483e      	ldr	r0, [pc, #248]	; (8008ef0 <HAL_TIM_MspPostInit+0x178>)
 8008df8:	f7f7 fd9c 	bl	8000934 <HAL_GPIO_Init>
}
 8008dfc:	e06e      	b.n	8008edc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a3c      	ldr	r2, [pc, #240]	; (8008ef4 <HAL_TIM_MspPostInit+0x17c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d110      	bne.n	8008e2a <HAL_TIM_MspPostInit+0xb2>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008e08:	2333      	movs	r3, #51	; 0x33
 8008e0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	4619      	mov	r1, r3
 8008e22:	4833      	ldr	r0, [pc, #204]	; (8008ef0 <HAL_TIM_MspPostInit+0x178>)
 8008e24:	f7f7 fd86 	bl	8000934 <HAL_GPIO_Init>
}
 8008e28:	e058      	b.n	8008edc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a32      	ldr	r2, [pc, #200]	; (8008ef8 <HAL_TIM_MspPostInit+0x180>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d111      	bne.n	8008e58 <HAL_TIM_MspPostInit+0xe0>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8008e34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008e38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008e46:	2302      	movs	r3, #2
 8008e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e4a:	f107 030c 	add.w	r3, r7, #12
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4827      	ldr	r0, [pc, #156]	; (8008ef0 <HAL_TIM_MspPostInit+0x178>)
 8008e52:	f7f7 fd6f 	bl	8000934 <HAL_GPIO_Init>
}
 8008e56:	e041      	b.n	8008edc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a27      	ldr	r2, [pc, #156]	; (8008efc <HAL_TIM_MspPostInit+0x184>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d110      	bne.n	8008e84 <HAL_TIM_MspPostInit+0x10c>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008e62:	2308      	movs	r3, #8
 8008e64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e66:	2302      	movs	r3, #2
 8008e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008e72:	2302      	movs	r3, #2
 8008e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e76:	f107 030c 	add.w	r3, r7, #12
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	481b      	ldr	r0, [pc, #108]	; (8008eec <HAL_TIM_MspPostInit+0x174>)
 8008e7e:	f7f7 fd59 	bl	8000934 <HAL_GPIO_Init>
}
 8008e82:	e02b      	b.n	8008edc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM8)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	; (8008f00 <HAL_TIM_MspPostInit+0x188>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d111      	bne.n	8008eb2 <HAL_TIM_MspPostInit+0x13a>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8008e8e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8008e92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e94:	2302      	movs	r3, #2
 8008e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4816      	ldr	r0, [pc, #88]	; (8008f04 <HAL_TIM_MspPostInit+0x18c>)
 8008eac:	f7f7 fd42 	bl	8000934 <HAL_GPIO_Init>
}
 8008eb0:	e014      	b.n	8008edc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM9)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <HAL_TIM_MspPostInit+0x190>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d10f      	bne.n	8008edc <HAL_TIM_MspPostInit+0x164>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008ebc:	2360      	movs	r3, #96	; 0x60
 8008ebe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008ed0:	f107 030c 	add.w	r3, r7, #12
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4804      	ldr	r0, [pc, #16]	; (8008ee8 <HAL_TIM_MspPostInit+0x170>)
 8008ed8:	f7f7 fd2c 	bl	8000934 <HAL_GPIO_Init>
}
 8008edc:	bf00      	nop
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	40021000 	.word	0x40021000
 8008eec:	40020000 	.word	0x40020000
 8008ef0:	40020400 	.word	0x40020400
 8008ef4:	40000400 	.word	0x40000400
 8008ef8:	40000800 	.word	0x40000800
 8008efc:	40000c00 	.word	0x40000c00
 8008f00:	40010400 	.word	0x40010400
 8008f04:	40020800 	.word	0x40020800
 8008f08:	40014000 	.word	0x40014000

08008f0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f10:	f7f7 fb98 	bl	8000644 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8008f14:	f7f7 fd00 	bl	8000918 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f18:	bf00      	nop
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <TIM8_BRK_TIM12_IRQHandler>:

/**
* @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
*/
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8008f22:	f7fa fbab 	bl	800367c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8008f26:	4803      	ldr	r0, [pc, #12]	; (8008f34 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8008f28:	f7fa fba8 	bl	800367c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8008f2c:	bf00      	nop
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	2000fad4 	.word	0x2000fad4
 8008f34:	2000fd60 	.word	0x2000fd60

08008f38 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008f3c:	4803      	ldr	r0, [pc, #12]	; (8008f4c <TIM6_DAC_IRQHandler+0x14>)
 8008f3e:	f7fa fb9d 	bl	800367c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	tim6_IRQ();
 8008f42:	f7fe fc9f 	bl	8007884 <tim6_IRQ>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	2000fc18 	.word	0x2000fc18

08008f50 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008f54:	4802      	ldr	r0, [pc, #8]	; (8008f60 <OTG_FS_IRQHandler+0x10>)
 8008f56:	f7f8 fd85 	bl	8001a64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	2001133c 	.word	0x2001133c

08008f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008f68:	4a16      	ldr	r2, [pc, #88]	; (8008fc4 <SystemInit+0x60>)
 8008f6a:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <SystemInit+0x60>)
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008f78:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <SystemInit+0x64>)
 8008f7a:	4b13      	ldr	r3, [pc, #76]	; (8008fc8 <SystemInit+0x64>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008f84:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <SystemInit+0x64>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008f8a:	4a0f      	ldr	r2, [pc, #60]	; (8008fc8 <SystemInit+0x64>)
 8008f8c:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <SystemInit+0x64>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <SystemInit+0x64>)
 8008f9c:	4a0b      	ldr	r2, [pc, #44]	; (8008fcc <SystemInit+0x68>)
 8008f9e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008fa0:	4a09      	ldr	r2, [pc, #36]	; (8008fc8 <SystemInit+0x64>)
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <SystemInit+0x64>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008faa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <SystemInit+0x64>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008fb2:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <SystemInit+0x60>)
 8008fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008fb8:	609a      	str	r2, [r3, #8]
#endif
}
 8008fba:	bf00      	nop
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	e000ed00 	.word	0xe000ed00
 8008fc8:	40023800 	.word	0x40023800
 8008fcc:	24003010 	.word	0x24003010

08008fd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4908      	ldr	r1, [pc, #32]	; (8008ff8 <MX_USB_DEVICE_Init+0x28>)
 8008fd8:	4808      	ldr	r0, [pc, #32]	; (8008ffc <MX_USB_DEVICE_Init+0x2c>)
 8008fda:	f7fc fe7d 	bl	8005cd8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8008fde:	4908      	ldr	r1, [pc, #32]	; (8009000 <MX_USB_DEVICE_Init+0x30>)
 8008fe0:	4806      	ldr	r0, [pc, #24]	; (8008ffc <MX_USB_DEVICE_Init+0x2c>)
 8008fe2:	f7fc feb1 	bl	8005d48 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8008fe6:	4907      	ldr	r1, [pc, #28]	; (8009004 <MX_USB_DEVICE_Init+0x34>)
 8008fe8:	4804      	ldr	r0, [pc, #16]	; (8008ffc <MX_USB_DEVICE_Init+0x2c>)
 8008fea:	f7fc fddb 	bl	8005ba4 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8008fee:	4803      	ldr	r0, [pc, #12]	; (8008ffc <MX_USB_DEVICE_Init+0x2c>)
 8008ff0:	f7fc fed0 	bl	8005d94 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ff4:	bf00      	nop
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	20000a4c 	.word	0x20000a4c
 8008ffc:	20010118 	.word	0x20010118
 8009000:	20000014 	.word	0x20000014
 8009004:	20000a3c 	.word	0x20000a3c

08009008 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800900c:	2200      	movs	r2, #0
 800900e:	4905      	ldr	r1, [pc, #20]	; (8009024 <CDC_Init_FS+0x1c>)
 8009010:	4805      	ldr	r0, [pc, #20]	; (8009028 <CDC_Init_FS+0x20>)
 8009012:	f7fc fdde 	bl	8005bd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009016:	4905      	ldr	r1, [pc, #20]	; (800902c <CDC_Init_FS+0x24>)
 8009018:	4803      	ldr	r0, [pc, #12]	; (8009028 <CDC_Init_FS+0x20>)
 800901a:	f7fc fdf4 	bl	8005c06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800901e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009020:	4618      	mov	r0, r3
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20010b3c 	.word	0x20010b3c
 8009028:	20010118 	.word	0x20010118
 800902c:	2001033c 	.word	0x2001033c

08009030 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009034:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009036:	4618      	mov	r0, r3
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	6039      	str	r1, [r7, #0]
 800904a:	71fb      	strb	r3, [r7, #7]
 800904c:	4613      	mov	r3, r2
 800904e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	2b23      	cmp	r3, #35	; 0x23
 8009054:	d866      	bhi.n	8009124 <CDC_Control_FS+0xe4>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <CDC_Control_FS+0x1c>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009125 	.word	0x08009125
 8009060:	08009125 	.word	0x08009125
 8009064:	08009125 	.word	0x08009125
 8009068:	08009125 	.word	0x08009125
 800906c:	08009125 	.word	0x08009125
 8009070:	08009125 	.word	0x08009125
 8009074:	08009125 	.word	0x08009125
 8009078:	08009125 	.word	0x08009125
 800907c:	08009125 	.word	0x08009125
 8009080:	08009125 	.word	0x08009125
 8009084:	08009125 	.word	0x08009125
 8009088:	08009125 	.word	0x08009125
 800908c:	08009125 	.word	0x08009125
 8009090:	08009125 	.word	0x08009125
 8009094:	08009125 	.word	0x08009125
 8009098:	08009125 	.word	0x08009125
 800909c:	08009125 	.word	0x08009125
 80090a0:	08009125 	.word	0x08009125
 80090a4:	08009125 	.word	0x08009125
 80090a8:	08009125 	.word	0x08009125
 80090ac:	08009125 	.word	0x08009125
 80090b0:	08009125 	.word	0x08009125
 80090b4:	08009125 	.word	0x08009125
 80090b8:	08009125 	.word	0x08009125
 80090bc:	08009125 	.word	0x08009125
 80090c0:	08009125 	.word	0x08009125
 80090c4:	08009125 	.word	0x08009125
 80090c8:	08009125 	.word	0x08009125
 80090cc:	08009125 	.word	0x08009125
 80090d0:	08009125 	.word	0x08009125
 80090d4:	08009125 	.word	0x08009125
 80090d8:	08009125 	.word	0x08009125
 80090dc:	08009125 	.word	0x08009125
 80090e0:	080090ed 	.word	0x080090ed
 80090e4:	08009125 	.word	0x08009125
 80090e8:	08009125 	.word	0x08009125
    break;

    case CDC_GET_LINE_CODING:
	   // Called when usb cable is plugged in (no terminal program)
	   // Called when terminal program connects
	   pbuf[0] = 0x20; // bits/second 115200
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2220      	movs	r2, #32
 80090f0:	701a      	strb	r2, [r3, #0]
	   pbuf[1] = 0xc2;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	22c2      	movs	r2, #194	; 0xc2
 80090f8:	701a      	strb	r2, [r3, #0]
	   pbuf[2] = 0x01;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	3302      	adds	r3, #2
 80090fe:	2201      	movs	r2, #1
 8009100:	701a      	strb	r2, [r3, #0]
	   pbuf[3] = 0x00;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	3303      	adds	r3, #3
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
	   pbuf[4] = 0x00; // 1 stop bit
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	3304      	adds	r3, #4
 800910e:	2200      	movs	r2, #0
 8009110:	701a      	strb	r2, [r3, #0]
	   pbuf[5] = 0x00; // parity none
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	3305      	adds	r3, #5
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
	   pbuf[6] = 0x08; // 8 data bits
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	3306      	adds	r3, #6
 800911e:	2208      	movs	r2, #8
 8009120:	701a      	strb	r2, [r3, #0]
    break;
 8009122:	e000      	b.n	8009126 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009124:	bf00      	nop
  }

  return (USBD_OK);
 8009126:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return VCP_Receive_FS(Buf, Len);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fd27 	bl	8009b94 <VCP_Receive_FS>
 8009146:	4603      	mov	r3, r0
  /* USER CODE END 6 */
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009160:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <CDC_Transmit_FS+0x48>)
 8009162:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009166:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009172:	2301      	movs	r3, #1
 8009174:	e00b      	b.n	800918e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009176:	887b      	ldrh	r3, [r7, #2]
 8009178:	461a      	mov	r2, r3
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4806      	ldr	r0, [pc, #24]	; (8009198 <CDC_Transmit_FS+0x48>)
 800917e:	f7fc fd28 	bl	8005bd2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009182:	4805      	ldr	r0, [pc, #20]	; (8009198 <CDC_Transmit_FS+0x48>)
 8009184:	f7fc fd53 	bl	8005c2e <USBD_CDC_TransmitPacket>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20010118 	.word	0x20010118

0800919c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ac:	d139      	bne.n	8009222 <HAL_PCD_MspInit+0x86>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80091ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	4619      	mov	r1, r3
 80091c2:	481a      	ldr	r0, [pc, #104]	; (800922c <HAL_PCD_MspInit+0x90>)
 80091c4:	f7f7 fbb6 	bl	8000934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80091c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80091cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ce:	2302      	movs	r3, #2
 80091d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091d6:	2300      	movs	r3, #0
 80091d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091da:	230a      	movs	r3, #10
 80091dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	4619      	mov	r1, r3
 80091e4:	4811      	ldr	r0, [pc, #68]	; (800922c <HAL_PCD_MspInit+0x90>)
 80091e6:	f7f7 fba5 	bl	8000934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ea:	4a11      	ldr	r2, [pc, #68]	; (8009230 <HAL_PCD_MspInit+0x94>)
 80091ec:	4b10      	ldr	r3, [pc, #64]	; (8009230 <HAL_PCD_MspInit+0x94>)
 80091ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f4:	6353      	str	r3, [r2, #52]	; 0x34
 80091f6:	2300      	movs	r3, #0
 80091f8:	60bb      	str	r3, [r7, #8]
 80091fa:	4a0d      	ldr	r2, [pc, #52]	; (8009230 <HAL_PCD_MspInit+0x94>)
 80091fc:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <HAL_PCD_MspInit+0x94>)
 80091fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009204:	6453      	str	r3, [r2, #68]	; 0x44
 8009206:	4b0a      	ldr	r3, [pc, #40]	; (8009230 <HAL_PCD_MspInit+0x94>)
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920e:	60bb      	str	r3, [r7, #8]
 8009210:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	2043      	movs	r0, #67	; 0x43
 8009218:	f7f7 fb2b 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800921c:	2043      	movs	r0, #67	; 0x43
 800921e:	f7f7 fb44 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009222:	bf00      	nop
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40020000 	.word	0x40020000
 8009230:	40023800 	.word	0x40023800

08009234 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8009248:	4619      	mov	r1, r3
 800924a:	4610      	mov	r0, r2
 800924c:	f7fc fdeb 	bl	8005e26 <USBD_LL_SetupStage>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	78fb      	ldrb	r3, [r7, #3]
 8009280:	4619      	mov	r1, r3
 8009282:	f7fc fe1a 	bl	8005eba <USBD_LL_DataOutStage>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	3344      	adds	r3, #68	; 0x44
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	4619      	mov	r1, r3
 80092b6:	f7fc fe5b 	bl	8005f70 <USBD_LL_DataInStage>
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fc ff41 	bl	8006158 <USBD_LL_SOF>
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092e6:	2301      	movs	r3, #1
 80092e8:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_PCD_ResetCallback+0x1a>
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d003      	beq.n	80092fe <HAL_PCD_ResetCallback+0x20>
 80092f6:	e005      	b.n	8009304 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
    break;
 80092fc:	e005      	b.n	800930a <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
    break;
 8009302:	e002      	b.n	800930a <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
    break;    
 8009308:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009310:	7bfa      	ldrb	r2, [r7, #15]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f7fc fee9 	bl	80060ec <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8009320:	4618      	mov	r0, r3
 8009322:	f7fc feb4 	bl	800608e <USBD_LL_Reset>
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800933e:	4618      	mov	r0, r3
 8009340:	f7fc fee4 	bl	800610c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800934c:	461a      	mov	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009366:	4a05      	ldr	r2, [pc, #20]	; (800937c <HAL_PCD_SuspendCallback+0x4c>)
 8009368:	4b04      	ldr	r3, [pc, #16]	; (800937c <HAL_PCD_SuspendCallback+0x4c>)
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	f043 0306 	orr.w	r3, r3, #6
 8009370:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	e000ed00 	.word	0xe000ed00

08009380 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800938e:	4618      	mov	r0, r3
 8009390:	f7fc fed1 	bl	8006136 <USBD_LL_Resume>
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	4611      	mov	r1, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fc fef7 	bl	80061a6 <USBD_LL_IsoOUTIncomplete>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fc fed8 	bl	800618c <USBD_LL_IsoINIncomplete>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fc fee4 	bl	80061c0 <USBD_LL_DevConnected>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800940e:	4618      	mov	r0, r3
 8009410:	f7fc fee1 	bl	80061d6 <USBD_LL_DevDisconnected>
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d142      	bne.n	80094b2 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800942c:	4a23      	ldr	r2, [pc, #140]	; (80094bc <USBD_LL_Init+0xa0>)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a21      	ldr	r2, [pc, #132]	; (80094bc <USBD_LL_Init+0xa0>)
 8009438:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800943c:	4b1f      	ldr	r3, [pc, #124]	; (80094bc <USBD_LL_Init+0xa0>)
 800943e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009442:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <USBD_LL_Init+0xa0>)
 8009446:	2204      	movs	r2, #4
 8009448:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <USBD_LL_Init+0xa0>)
 800944c:	2202      	movs	r2, #2
 800944e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009450:	4b1a      	ldr	r3, [pc, #104]	; (80094bc <USBD_LL_Init+0xa0>)
 8009452:	2200      	movs	r2, #0
 8009454:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8009456:	4b19      	ldr	r3, [pc, #100]	; (80094bc <USBD_LL_Init+0xa0>)
 8009458:	2200      	movs	r2, #0
 800945a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800945c:	4b17      	ldr	r3, [pc, #92]	; (80094bc <USBD_LL_Init+0xa0>)
 800945e:	2202      	movs	r2, #2
 8009460:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009462:	4b16      	ldr	r3, [pc, #88]	; (80094bc <USBD_LL_Init+0xa0>)
 8009464:	2200      	movs	r2, #0
 8009466:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009468:	4b14      	ldr	r3, [pc, #80]	; (80094bc <USBD_LL_Init+0xa0>)
 800946a:	2200      	movs	r2, #0
 800946c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <USBD_LL_Init+0xa0>)
 8009470:	2200      	movs	r2, #0
 8009472:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009474:	4b11      	ldr	r3, [pc, #68]	; (80094bc <USBD_LL_Init+0xa0>)
 8009476:	2201      	movs	r2, #1
 8009478:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800947a:	4b10      	ldr	r3, [pc, #64]	; (80094bc <USBD_LL_Init+0xa0>)
 800947c:	2200      	movs	r2, #0
 800947e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009480:	480e      	ldr	r0, [pc, #56]	; (80094bc <USBD_LL_Init+0xa0>)
 8009482:	f7f8 f9c5 	bl	8001810 <HAL_PCD_Init>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d004      	beq.n	8009496 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800948c:	f240 1153 	movw	r1, #339	; 0x153
 8009490:	480b      	ldr	r0, [pc, #44]	; (80094c0 <USBD_LL_Init+0xa4>)
 8009492:	f7ff f9ff 	bl	8008894 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009496:	2180      	movs	r1, #128	; 0x80
 8009498:	4808      	ldr	r0, [pc, #32]	; (80094bc <USBD_LL_Init+0xa0>)
 800949a:	f7f9 fa5f 	bl	800295c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800949e:	2240      	movs	r2, #64	; 0x40
 80094a0:	2100      	movs	r1, #0
 80094a2:	4806      	ldr	r0, [pc, #24]	; (80094bc <USBD_LL_Init+0xa0>)
 80094a4:	f7f9 fa0f 	bl	80028c6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094a8:	2280      	movs	r2, #128	; 0x80
 80094aa:	2101      	movs	r1, #1
 80094ac:	4803      	ldr	r0, [pc, #12]	; (80094bc <USBD_LL_Init+0xa0>)
 80094ae:	f7f9 fa0a 	bl	80028c6 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	2001133c 	.word	0x2001133c
 80094c0:	0800af68 	.word	0x0800af68

080094c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 fa9f 	bl	8001a1e <HAL_PCD_Start>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d816      	bhi.n	8009518 <USBD_LL_Start+0x54>
 80094ea:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <USBD_LL_Start+0x2c>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009507 	.word	0x08009507
 80094f8:	0800950d 	.word	0x0800950d
 80094fc:	08009513 	.word	0x08009513
    case HAL_OK :
      usb_status = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
    break;
 8009504:	e00b      	b.n	800951e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009506:	2302      	movs	r3, #2
 8009508:	73fb      	strb	r3, [r7, #15]
    break;
 800950a:	e008      	b.n	800951e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800950c:	2301      	movs	r3, #1
 800950e:	73fb      	strb	r3, [r7, #15]
    break;
 8009510:	e005      	b.n	800951e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
    break;
 8009516:	e002      	b.n	800951e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009518:	2302      	movs	r3, #2
 800951a:	73fb      	strb	r3, [r7, #15]
    break;
 800951c:	bf00      	nop
  }
  return usb_status;
 800951e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	461a      	mov	r2, r3
 8009536:	4603      	mov	r3, r0
 8009538:	70fb      	strb	r3, [r7, #3]
 800953a:	460b      	mov	r3, r1
 800953c:	70bb      	strb	r3, [r7, #2]
 800953e:	4613      	mov	r3, r2
 8009540:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009550:	78bb      	ldrb	r3, [r7, #2]
 8009552:	883a      	ldrh	r2, [r7, #0]
 8009554:	78f9      	ldrb	r1, [r7, #3]
 8009556:	f7f8 ff30 	bl	80023ba <HAL_PCD_EP_Open>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d817      	bhi.n	8009594 <USBD_LL_OpenEP+0x6c>
 8009564:	a201      	add	r2, pc, #4	; (adr r2, 800956c <USBD_LL_OpenEP+0x44>)
 8009566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956a:	bf00      	nop
 800956c:	0800957d 	.word	0x0800957d
 8009570:	08009583 	.word	0x08009583
 8009574:	08009589 	.word	0x08009589
 8009578:	0800958f 	.word	0x0800958f
    case HAL_OK :
      usb_status = USBD_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
    break;
 8009580:	e00b      	b.n	800959a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009582:	2302      	movs	r3, #2
 8009584:	73fb      	strb	r3, [r7, #15]
    break;
 8009586:	e008      	b.n	800959a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009588:	2301      	movs	r3, #1
 800958a:	73fb      	strb	r3, [r7, #15]
    break;
 800958c:	e005      	b.n	800959a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800958e:	2302      	movs	r3, #2
 8009590:	73fb      	strb	r3, [r7, #15]
    break;
 8009592:	e002      	b.n	800959a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009594:	2302      	movs	r3, #2
 8009596:	73fb      	strb	r3, [r7, #15]
    break;
 8009598:	bf00      	nop
  }
  return usb_status;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7f8 ff61 	bl	800248a <HAL_PCD_EP_Close>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d816      	bhi.n	8009600 <USBD_LL_CloseEP+0x5c>
 80095d2:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <USBD_LL_CloseEP+0x34>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	080095e9 	.word	0x080095e9
 80095dc:	080095ef 	.word	0x080095ef
 80095e0:	080095f5 	.word	0x080095f5
 80095e4:	080095fb 	.word	0x080095fb
    case HAL_OK :
      usb_status = USBD_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
    break;
 80095ec:	e00b      	b.n	8009606 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095ee:	2302      	movs	r3, #2
 80095f0:	73fb      	strb	r3, [r7, #15]
    break;
 80095f2:	e008      	b.n	8009606 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095f4:	2301      	movs	r3, #1
 80095f6:	73fb      	strb	r3, [r7, #15]
    break;
 80095f8:	e005      	b.n	8009606 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095fa:	2302      	movs	r3, #2
 80095fc:	73fb      	strb	r3, [r7, #15]
    break;
 80095fe:	e002      	b.n	8009606 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009600:	2302      	movs	r3, #2
 8009602:	73fb      	strb	r3, [r7, #15]
    break;
 8009604:	bf00      	nop
  }
  return usb_status;  
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7f9 f821 	bl	8002676 <HAL_PCD_EP_SetStall>
 8009634:	4603      	mov	r3, r0
 8009636:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b03      	cmp	r3, #3
 800963c:	d816      	bhi.n	800966c <USBD_LL_StallEP+0x5c>
 800963e:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <USBD_LL_StallEP+0x34>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	08009655 	.word	0x08009655
 8009648:	0800965b 	.word	0x0800965b
 800964c:	08009661 	.word	0x08009661
 8009650:	08009667 	.word	0x08009667
    case HAL_OK :
      usb_status = USBD_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
    break;
 8009658:	e00b      	b.n	8009672 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800965a:	2302      	movs	r3, #2
 800965c:	73fb      	strb	r3, [r7, #15]
    break;
 800965e:	e008      	b.n	8009672 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009660:	2301      	movs	r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
    break;
 8009664:	e005      	b.n	8009672 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009666:	2302      	movs	r3, #2
 8009668:	73fb      	strb	r3, [r7, #15]
    break;
 800966a:	e002      	b.n	8009672 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800966c:	2302      	movs	r3, #2
 800966e:	73fb      	strb	r3, [r7, #15]
    break;
 8009670:	bf00      	nop
  }
  return usb_status;  
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7f9 f846 	bl	800272c <HAL_PCD_EP_ClrStall>
 80096a0:	4603      	mov	r3, r0
 80096a2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d816      	bhi.n	80096d8 <USBD_LL_ClearStallEP+0x5c>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBD_LL_ClearStallEP+0x34>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096c7 	.word	0x080096c7
 80096b8:	080096cd 	.word	0x080096cd
 80096bc:	080096d3 	.word	0x080096d3
    case HAL_OK :
      usb_status = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
    break;
 80096c4:	e00b      	b.n	80096de <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096c6:	2302      	movs	r3, #2
 80096c8:	73fb      	strb	r3, [r7, #15]
    break;
 80096ca:	e008      	b.n	80096de <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
    break;
 80096d0:	e005      	b.n	80096de <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	73fb      	strb	r3, [r7, #15]
    break;
 80096d6:	e002      	b.n	80096de <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80096d8:	2302      	movs	r3, #2
 80096da:	73fb      	strb	r3, [r7, #15]
    break;
 80096dc:	bf00      	nop
  }
  return usb_status; 
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80096fa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80096fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009700:	2b00      	cmp	r3, #0
 8009702:	da0b      	bge.n	800971c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	4613      	mov	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	333a      	adds	r3, #58	; 0x3a
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	e00b      	b.n	8009734 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009722:	68f9      	ldr	r1, [r7, #12]
 8009724:	4613      	mov	r3, r2
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8009732:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	4611      	mov	r1, r2
 800975e:	4618      	mov	r0, r3
 8009760:	f7f8 fe0a 	bl	8002378 <HAL_PCD_SetAddress>
 8009764:	4603      	mov	r3, r0
 8009766:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b03      	cmp	r3, #3
 800976c:	d816      	bhi.n	800979c <USBD_LL_SetUSBAddress+0x5c>
 800976e:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <USBD_LL_SetUSBAddress+0x34>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	08009785 	.word	0x08009785
 8009778:	0800978b 	.word	0x0800978b
 800977c:	08009791 	.word	0x08009791
 8009780:	08009797 	.word	0x08009797
    case HAL_OK :
      usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
    break;
 8009788:	e00b      	b.n	80097a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]
    break;
 800978e:	e008      	b.n	80097a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	e005      	b.n	80097a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009796:	2302      	movs	r3, #2
 8009798:	73fb      	strb	r3, [r7, #15]
    break;
 800979a:	e002      	b.n	80097a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800979c:	2302      	movs	r3, #2
 800979e:	73fb      	strb	r3, [r7, #15]
    break;
 80097a0:	bf00      	nop
  }
  return usb_status;  
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	461a      	mov	r2, r3
 80097b8:	460b      	mov	r3, r1
 80097ba:	72fb      	strb	r3, [r7, #11]
 80097bc:	4613      	mov	r3, r2
 80097be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80097ce:	893b      	ldrh	r3, [r7, #8]
 80097d0:	7af9      	ldrb	r1, [r7, #11]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	f7f8 ff06 	bl	80025e4 <HAL_PCD_EP_Transmit>
 80097d8:	4603      	mov	r3, r0
 80097da:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80097dc:	7dbb      	ldrb	r3, [r7, #22]
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d816      	bhi.n	8009810 <USBD_LL_Transmit+0x64>
 80097e2:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <USBD_LL_Transmit+0x3c>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	080097ff 	.word	0x080097ff
 80097f0:	08009805 	.word	0x08009805
 80097f4:	0800980b 	.word	0x0800980b
    case HAL_OK :
      usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	75fb      	strb	r3, [r7, #23]
    break;
 80097fc:	e00b      	b.n	8009816 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097fe:	2302      	movs	r3, #2
 8009800:	75fb      	strb	r3, [r7, #23]
    break;
 8009802:	e008      	b.n	8009816 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
    break;
 8009808:	e005      	b.n	8009816 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800980a:	2302      	movs	r3, #2
 800980c:	75fb      	strb	r3, [r7, #23]
    break;
 800980e:	e002      	b.n	8009816 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009810:	2302      	movs	r3, #2
 8009812:	75fb      	strb	r3, [r7, #23]
    break;
 8009814:	bf00      	nop
  }
  return usb_status;    
 8009816:	7dfb      	ldrb	r3, [r7, #23]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	461a      	mov	r2, r3
 800982c:	460b      	mov	r3, r1
 800982e:	72fb      	strb	r3, [r7, #11]
 8009830:	4613      	mov	r3, r2
 8009832:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009842:	893b      	ldrh	r3, [r7, #8]
 8009844:	7af9      	ldrb	r1, [r7, #11]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	f7f8 fe69 	bl	800251e <HAL_PCD_EP_Receive>
 800984c:	4603      	mov	r3, r0
 800984e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009850:	7dbb      	ldrb	r3, [r7, #22]
 8009852:	2b03      	cmp	r3, #3
 8009854:	d816      	bhi.n	8009884 <USBD_LL_PrepareReceive+0x64>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <USBD_LL_PrepareReceive+0x3c>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	0800986d 	.word	0x0800986d
 8009860:	08009873 	.word	0x08009873
 8009864:	08009879 	.word	0x08009879
 8009868:	0800987f 	.word	0x0800987f
    case HAL_OK :
      usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	75fb      	strb	r3, [r7, #23]
    break;
 8009870:	e00b      	b.n	800988a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009872:	2302      	movs	r3, #2
 8009874:	75fb      	strb	r3, [r7, #23]
    break;
 8009876:	e008      	b.n	800988a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009878:	2301      	movs	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]
    break;
 800987c:	e005      	b.n	800988a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800987e:	2302      	movs	r3, #2
 8009880:	75fb      	strb	r3, [r7, #23]
    break;
 8009882:	e002      	b.n	800988a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009884:	2302      	movs	r3, #2
 8009886:	75fb      	strb	r3, [r7, #23]
    break;
 8009888:	bf00      	nop
  }
  return usb_status; 
 800988a:	7dfb      	ldrb	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f8 fe81 	bl	80025b2 <HAL_PCD_EP_GetRxCount>
 80098b0:	4603      	mov	r3, r0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2212      	movs	r2, #18
 80098cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098ce:	4b03      	ldr	r3, [pc, #12]	; (80098dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	20000a68 	.word	0x20000a68

080098e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2204      	movs	r2, #4
 80098f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098f2:	4b03      	ldr	r3, [pc, #12]	; (8009900 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	20000a7c 	.word	0x20000a7c

08009904 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	4907      	ldr	r1, [pc, #28]	; (8009938 <USBD_FS_ProductStrDescriptor+0x34>)
 800991a:	4808      	ldr	r0, [pc, #32]	; (800993c <USBD_FS_ProductStrDescriptor+0x38>)
 800991c:	f7fd f875 	bl	8006a0a <USBD_GetString>
 8009920:	e004      	b.n	800992c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4904      	ldr	r1, [pc, #16]	; (8009938 <USBD_FS_ProductStrDescriptor+0x34>)
 8009926:	4805      	ldr	r0, [pc, #20]	; (800993c <USBD_FS_ProductStrDescriptor+0x38>)
 8009928:	f7fd f86f 	bl	8006a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800992c:	4b02      	ldr	r3, [pc, #8]	; (8009938 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	2001172c 	.word	0x2001172c
 800993c:	0800af7c 	.word	0x0800af7c

08009940 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	4904      	ldr	r1, [pc, #16]	; (8009960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009950:	4804      	ldr	r0, [pc, #16]	; (8009964 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009952:	f7fd f85a 	bl	8006a0a <USBD_GetString>
  return USBD_StrDesc;
 8009956:	4b02      	ldr	r3, [pc, #8]	; (8009960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	2001172c 	.word	0x2001172c
 8009964:	0800af94 	.word	0x0800af94

08009968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4907      	ldr	r1, [pc, #28]	; (800999c <USBD_FS_SerialStrDescriptor+0x34>)
 800997e:	4808      	ldr	r0, [pc, #32]	; (80099a0 <USBD_FS_SerialStrDescriptor+0x38>)
 8009980:	f7fd f843 	bl	8006a0a <USBD_GetString>
 8009984:	e004      	b.n	8009990 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4904      	ldr	r1, [pc, #16]	; (800999c <USBD_FS_SerialStrDescriptor+0x34>)
 800998a:	4805      	ldr	r0, [pc, #20]	; (80099a0 <USBD_FS_SerialStrDescriptor+0x38>)
 800998c:	f7fd f83d 	bl	8006a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	2001172c 	.word	0x2001172c
 80099a0:	0800afa8 	.word	0x0800afa8

080099a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4907      	ldr	r1, [pc, #28]	; (80099d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ba:	4808      	ldr	r0, [pc, #32]	; (80099dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80099bc:	f7fd f825 	bl	8006a0a <USBD_GetString>
 80099c0:	e004      	b.n	80099cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4904      	ldr	r1, [pc, #16]	; (80099d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099c6:	4805      	ldr	r0, [pc, #20]	; (80099dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80099c8:	f7fd f81f 	bl	8006a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	2001172c 	.word	0x2001172c
 80099dc:	0800afb8 	.word	0x0800afb8

080099e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4907      	ldr	r1, [pc, #28]	; (8009a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099f6:	4808      	ldr	r0, [pc, #32]	; (8009a18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099f8:	f7fd f807 	bl	8006a0a <USBD_GetString>
 80099fc:	e004      	b.n	8009a08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a04:	f7fd f801 	bl	8006a0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a08:	4b02      	ldr	r3, [pc, #8]	; (8009a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	2001172c 	.word	0x2001172c
 8009a18:	0800afc4 	.word	0x0800afc4

08009a1c <VCP_SendJsonObjectReceivedValues>:
} s_RxBuffers;

extern USBD_HandleTypeDef hUsbDeviceFS;

void VCP_SendJsonObjectReceivedValues(JsonObject_t *object)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b090      	sub	sp, #64	; 0x40
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	uint8_t i;
	char dst[JSON_MAX_STRING_LENGTH];

	for(i = 0; i < object->numbers_count; i++)
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a2a:	e033      	b.n	8009a94 <VCP_SendJsonObjectReceivedValues+0x78>
	{
		if(object->numbers[i]->flag)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	7a1b      	ldrb	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d024      	beq.n	8009a8a <VCP_SendJsonObjectReceivedValues+0x6e>
		{
			VCP_SendString("\r\n\t");
 8009a40:	4834      	ldr	r0, [pc, #208]	; (8009b14 <VCP_SendJsonObjectReceivedValues+0xf8>)
 8009a42:	f000 f86b 	bl	8009b1c <VCP_SendString>
			VCP_SendString(object->numbers[i]->name);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689a      	ldr	r2, [r3, #8]
 8009a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f860 	bl	8009b1c <VCP_SendString>
			VCP_SendString(" : ");
 8009a5c:	482e      	ldr	r0, [pc, #184]	; (8009b18 <VCP_SendJsonObjectReceivedValues+0xfc>)
 8009a5e:	f000 f85d 	bl	8009b1c <VCP_SendString>
			itoa(object->numbers[i]->value, dst, 10);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f107 030c 	add.w	r3, r7, #12
 8009a78:	220a      	movs	r2, #10
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	f000 f99e 	bl	8009dbc <itoa>
			VCP_SendString(dst);
 8009a80:	f107 030c 	add.w	r3, r7, #12
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f849 	bl	8009b1c <VCP_SendString>
	for(i = 0; i < object->numbers_count; i++)
 8009a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a8e:	3301      	adds	r3, #1
 8009a90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	791b      	ldrb	r3, [r3, #4]
 8009a98:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d3c5      	bcc.n	8009a2c <VCP_SendJsonObjectReceivedValues+0x10>
		}
	}

	for(i = 0; i < object->strings_count; i++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009aa6:	e02b      	b.n	8009b00 <VCP_SendJsonObjectReceivedValues+0xe4>
	{
		if(object->strings[i]->flag)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01b      	beq.n	8009af6 <VCP_SendJsonObjectReceivedValues+0xda>
		{
			VCP_SendString("\r\n\t");
 8009abe:	4815      	ldr	r0, [pc, #84]	; (8009b14 <VCP_SendJsonObjectReceivedValues+0xf8>)
 8009ac0:	f000 f82c 	bl	8009b1c <VCP_SendString>
			VCP_SendString(object->strings[i]->name);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691a      	ldr	r2, [r3, #16]
 8009ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 f821 	bl	8009b1c <VCP_SendString>
			VCP_SendString(" : ");
 8009ada:	480f      	ldr	r0, [pc, #60]	; (8009b18 <VCP_SendJsonObjectReceivedValues+0xfc>)
 8009adc:	f000 f81e 	bl	8009b1c <VCP_SendString>
			VCP_SendString(object->strings[i]->value);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f813 	bl	8009b1c <VCP_SendString>
	for(i = 0; i < object->strings_count; i++)
 8009af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009afa:	3301      	adds	r3, #1
 8009afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7b1b      	ldrb	r3, [r3, #12]
 8009b04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d3cd      	bcc.n	8009aa8 <VCP_SendJsonObjectReceivedValues+0x8c>
		}
	}
}
 8009b0c:	bf00      	nop
 8009b0e:	3740      	adds	r7, #64	; 0x40
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	0800afd4 	.word	0x0800afd4
 8009b18:	0800afd8 	.word	0x0800afd8

08009b1c <VCP_SendString>:

void VCP_SendString(char* string)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	uint16_t length = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	81fb      	strh	r3, [r7, #14]

	// Count the number of characters
	while(string[length] != '\0')
 8009b28:	e002      	b.n	8009b30 <VCP_SendString+0x14>
	{
		length++;
 8009b2a:	89fb      	ldrh	r3, [r7, #14]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0')
 8009b30:	89fb      	ldrh	r3, [r7, #14]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	4413      	add	r3, r2
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f6      	bne.n	8009b2a <VCP_SendString+0xe>
	}

	VCP_SendBuffer((uint8_t*)string, length);
 8009b3c:	89fb      	ldrh	r3, [r7, #14]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f805 	bl	8009b50 <VCP_SendBuffer>
}
 8009b46:	bf00      	nop
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <VCP_SendBuffer>:

void VCP_SendBuffer(uint8_t* Buf, uint16_t Len)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	807b      	strh	r3, [r7, #2]
	while(CDC_Transmit_FS(Buf, Len) != USBD_OK)
 8009b5c:	e005      	b.n	8009b6a <VCP_SendBuffer+0x1a>
	{
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b64:	480a      	ldr	r0, [pc, #40]	; (8009b90 <VCP_SendBuffer+0x40>)
 8009b66:	f7f7 f87f 	bl	8000c68 <HAL_GPIO_WritePin>
	while(CDC_Transmit_FS(Buf, Len) != USBD_OK)
 8009b6a:	887b      	ldrh	r3, [r7, #2]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff faee 	bl	8009150 <CDC_Transmit_FS>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f1      	bne.n	8009b5e <VCP_SendBuffer+0xe>
	}

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b80:	4803      	ldr	r0, [pc, #12]	; (8009b90 <VCP_SendBuffer+0x40>)
 8009b82:	f7f7 f871 	bl	8000c68 <HAL_GPIO_WritePin>
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	40020c00 	.word	0x40020c00

08009b94 <VCP_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t VCP_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
	// CDC_Receive_FS  is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
	s_RxBuffers.IsCommandDataReceived=1; //indicates data were received
 8009b9e:	4b17      	ldr	r3, [pc, #92]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	721a      	strb	r2, [r3, #8]
	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was directly saved to buffer
 8009ba4:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	6812      	ldr	r2, [r2, #0]
 8009bac:	b2d1      	uxtb	r1, r2
 8009bae:	4a13      	ldr	r2, [pc, #76]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8009bb6:	3309      	adds	r3, #9
 8009bb8:	460a      	mov	r2, r1
 8009bba:	701a      	strb	r2, [r3, #0]

	s_RxBuffers.pos_receive++;//move to next position to receive data
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	4a0e      	ldr	r2, [pc, #56]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bc4:	6013      	str	r3, [r2, #0]
	if(s_RxBuffers.pos_receive>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 8009bc6:	4b0d      	ldr	r3, [pc, #52]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b09      	cmp	r3, #9
 8009bcc:	dd02      	ble.n	8009bd4 <VCP_Receive_FS+0x40>
	{
		s_RxBuffers.pos_receive=0;
 8009bce:	4b0b      	ldr	r3, [pc, #44]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
	}

	// Prepare to receive the next data
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);//Set the buffer to receive incoming data
 8009bd4:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	02db      	lsls	r3, r3, #11
 8009bda:	3308      	adds	r3, #8
 8009bdc:	4a07      	ldr	r2, [pc, #28]	; (8009bfc <VCP_Receive_FS+0x68>)
 8009bde:	4413      	add	r3, r2
 8009be0:	3301      	adds	r3, #1
 8009be2:	4619      	mov	r1, r3
 8009be4:	4806      	ldr	r0, [pc, #24]	; (8009c00 <VCP_Receive_FS+0x6c>)
 8009be6:	f7fc f80e 	bl	8005c06 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);// Tell that you are ready to receive the next packet, otherwise you wouldn't be able to receive next data
 8009bea:	4805      	ldr	r0, [pc, #20]	; (8009c00 <VCP_Receive_FS+0x6c>)
 8009bec:	f7fc f849 	bl	8005c82 <USBD_CDC_ReceivePacket>

	return USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	2000a93c 	.word	0x2000a93c
 8009c00:	20010118 	.word	0x20010118

08009c04 <VCP_retrieveInputData>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval 0 means no data was received.
  */
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
    if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 8009c0e:	4b1f      	ldr	r3, [pc, #124]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c10:	7a1b      	ldrb	r3, [r3, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <VCP_retrieveInputData+0x16>
 8009c16:	2300      	movs	r3, #0
 8009c18:	e034      	b.n	8009c84 <VCP_retrieveInputData+0x80>

    int index=s_RxBuffers.pos_process;
 8009c1a:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	60fb      	str	r3, [r7, #12]

    *Len=s_RxBuffers.CommandsLens[index]; //return the length
 8009c20:	4a1a      	ldr	r2, [pc, #104]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8009c2a:	3309      	adds	r3, #9
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	601a      	str	r2, [r3, #0]
    memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	02db      	lsls	r3, r3, #11
 8009c38:	3308      	adds	r3, #8
 8009c3a:	4a14      	ldr	r2, [pc, #80]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c3c:	4413      	add	r3, r2
 8009c3e:	1c59      	adds	r1, r3, #1
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f8ca 	bl	8009de0 <memcpy>
    Buf[*Len]='\0'; //testing only. make sure there is ending char in the returned command string
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	4413      	add	r3, r2
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]

    //check if all data were processed.
    s_RxBuffers.pos_process++;
 8009c58:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	4a0b      	ldr	r2, [pc, #44]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c60:	6053      	str	r3, [r2, #4]
    if(s_RxBuffers.pos_process>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 8009c62:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	dd02      	ble.n	8009c70 <VCP_retrieveInputData+0x6c>
    {
        s_RxBuffers.pos_process=0;
 8009c6a:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
    }
    if(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)s_RxBuffers.IsCommandDataReceived=0; //check if all data were processed
 8009c70:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d102      	bne.n	8009c82 <VCP_retrieveInputData+0x7e>
 8009c7c:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <VCP_retrieveInputData+0x88>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	721a      	strb	r2, [r3, #8]
    return 1;
 8009c82:	2301      	movs	r3, #1
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	2000a93c 	.word	0x2000a93c

08009c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009cc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c96:	e003      	b.n	8009ca0 <LoopCopyDataInit>

08009c98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c9e:	3104      	adds	r1, #4

08009ca0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ca0:	480b      	ldr	r0, [pc, #44]	; (8009cd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ca2:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ca4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ca6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ca8:	d3f6      	bcc.n	8009c98 <CopyDataInit>
  ldr  r2, =_sbss
 8009caa:	4a0b      	ldr	r2, [pc, #44]	; (8009cd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009cac:	e002      	b.n	8009cb4 <LoopFillZerobss>

08009cae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009cae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009cb0:	f842 3b04 	str.w	r3, [r2], #4

08009cb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009cb8:	d3f9      	bcc.n	8009cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009cba:	f7ff f953 	bl	8008f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cbe:	f000 f841 	bl	8009d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cc2:	f7fd feb7 	bl	8007a34 <main>
  bx  lr    
 8009cc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009cc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009ccc:	0800b10c 	.word	0x0800b10c
  ldr  r0, =_sdata
 8009cd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009cd4:	20000ae4 	.word	0x20000ae4
  ldr  r2, =_sbss
 8009cd8:	20000ae4 	.word	0x20000ae4
  ldr  r3, = _ebss
 8009cdc:	20011930 	.word	0x20011930

08009ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ce0:	e7fe      	b.n	8009ce0 <ADC_IRQHandler>
	...

08009ce4 <__assert_func>:
 8009ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ce6:	461c      	mov	r4, r3
 8009ce8:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <__assert_func+0x2c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4605      	mov	r5, r0
 8009cee:	68d8      	ldr	r0, [r3, #12]
 8009cf0:	b152      	cbz	r2, 8009d08 <__assert_func+0x24>
 8009cf2:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <__assert_func+0x30>)
 8009cf4:	9202      	str	r2, [sp, #8]
 8009cf6:	e88d 000a 	stmia.w	sp, {r1, r3}
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	4906      	ldr	r1, [pc, #24]	; (8009d18 <__assert_func+0x34>)
 8009d00:	f000 f80e 	bl	8009d20 <fiprintf>
 8009d04:	f000 fd3e 	bl	800a784 <abort>
 8009d08:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <__assert_func+0x38>)
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	e7f2      	b.n	8009cf4 <__assert_func+0x10>
 8009d0e:	bf00      	nop
 8009d10:	20000a80 	.word	0x20000a80
 8009d14:	0800b004 	.word	0x0800b004
 8009d18:	0800b011 	.word	0x0800b011
 8009d1c:	0800b03f 	.word	0x0800b03f

08009d20 <fiprintf>:
 8009d20:	b40e      	push	{r1, r2, r3}
 8009d22:	b503      	push	{r0, r1, lr}
 8009d24:	4601      	mov	r1, r0
 8009d26:	ab03      	add	r3, sp, #12
 8009d28:	4805      	ldr	r0, [pc, #20]	; (8009d40 <fiprintf+0x20>)
 8009d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2e:	6800      	ldr	r0, [r0, #0]
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	f000 f937 	bl	8009fa4 <_vfiprintf_r>
 8009d36:	b002      	add	sp, #8
 8009d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d3c:	b003      	add	sp, #12
 8009d3e:	4770      	bx	lr
 8009d40:	20000a80 	.word	0x20000a80

08009d44 <__libc_init_array>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	4e0d      	ldr	r6, [pc, #52]	; (8009d7c <__libc_init_array+0x38>)
 8009d48:	4c0d      	ldr	r4, [pc, #52]	; (8009d80 <__libc_init_array+0x3c>)
 8009d4a:	1ba4      	subs	r4, r4, r6
 8009d4c:	10a4      	asrs	r4, r4, #2
 8009d4e:	2500      	movs	r5, #0
 8009d50:	42a5      	cmp	r5, r4
 8009d52:	d109      	bne.n	8009d68 <__libc_init_array+0x24>
 8009d54:	4e0b      	ldr	r6, [pc, #44]	; (8009d84 <__libc_init_array+0x40>)
 8009d56:	4c0c      	ldr	r4, [pc, #48]	; (8009d88 <__libc_init_array+0x44>)
 8009d58:	f001 f87c 	bl	800ae54 <_init>
 8009d5c:	1ba4      	subs	r4, r4, r6
 8009d5e:	10a4      	asrs	r4, r4, #2
 8009d60:	2500      	movs	r5, #0
 8009d62:	42a5      	cmp	r5, r4
 8009d64:	d105      	bne.n	8009d72 <__libc_init_array+0x2e>
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d6c:	4798      	blx	r3
 8009d6e:	3501      	adds	r5, #1
 8009d70:	e7ee      	b.n	8009d50 <__libc_init_array+0xc>
 8009d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d76:	4798      	blx	r3
 8009d78:	3501      	adds	r5, #1
 8009d7a:	e7f2      	b.n	8009d62 <__libc_init_array+0x1e>
 8009d7c:	0800b104 	.word	0x0800b104
 8009d80:	0800b104 	.word	0x0800b104
 8009d84:	0800b104 	.word	0x0800b104
 8009d88:	0800b108 	.word	0x0800b108

08009d8c <__itoa>:
 8009d8c:	1e93      	subs	r3, r2, #2
 8009d8e:	2b22      	cmp	r3, #34	; 0x22
 8009d90:	b510      	push	{r4, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	d904      	bls.n	8009da0 <__itoa+0x14>
 8009d96:	2300      	movs	r3, #0
 8009d98:	700b      	strb	r3, [r1, #0]
 8009d9a:	461c      	mov	r4, r3
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	bd10      	pop	{r4, pc}
 8009da0:	2a0a      	cmp	r2, #10
 8009da2:	d109      	bne.n	8009db8 <__itoa+0x2c>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	da07      	bge.n	8009db8 <__itoa+0x2c>
 8009da8:	232d      	movs	r3, #45	; 0x2d
 8009daa:	700b      	strb	r3, [r1, #0]
 8009dac:	4240      	negs	r0, r0
 8009dae:	2101      	movs	r1, #1
 8009db0:	4421      	add	r1, r4
 8009db2:	f000 fbe7 	bl	800a584 <__utoa>
 8009db6:	e7f1      	b.n	8009d9c <__itoa+0x10>
 8009db8:	2100      	movs	r1, #0
 8009dba:	e7f9      	b.n	8009db0 <__itoa+0x24>

08009dbc <itoa>:
 8009dbc:	f7ff bfe6 	b.w	8009d8c <__itoa>

08009dc0 <malloc>:
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <malloc+0xc>)
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	f000 b865 	b.w	8009e94 <_malloc_r>
 8009dca:	bf00      	nop
 8009dcc:	20000a80 	.word	0x20000a80

08009dd0 <free>:
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <free+0xc>)
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	f000 b80f 	b.w	8009df8 <_free_r>
 8009dda:	bf00      	nop
 8009ddc:	20000a80 	.word	0x20000a80

08009de0 <memcpy>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	1e43      	subs	r3, r0, #1
 8009de4:	440a      	add	r2, r1
 8009de6:	4291      	cmp	r1, r2
 8009de8:	d100      	bne.n	8009dec <memcpy+0xc>
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009df4:	e7f7      	b.n	8009de6 <memcpy+0x6>
	...

08009df8 <_free_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d045      	beq.n	8009e8c <_free_r+0x94>
 8009e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e04:	1f0c      	subs	r4, r1, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfb8      	it	lt
 8009e0a:	18e4      	addlt	r4, r4, r3
 8009e0c:	f000 feaa 	bl	800ab64 <__malloc_lock>
 8009e10:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <_free_r+0x98>)
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	4610      	mov	r0, r2
 8009e16:	b933      	cbnz	r3, 8009e26 <_free_r+0x2e>
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	6014      	str	r4, [r2, #0]
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e22:	f000 bea0 	b.w	800ab66 <__malloc_unlock>
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	d90c      	bls.n	8009e44 <_free_r+0x4c>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	1862      	adds	r2, r4, r1
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	bf04      	itt	eq
 8009e32:	681a      	ldreq	r2, [r3, #0]
 8009e34:	685b      	ldreq	r3, [r3, #4]
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	bf04      	itt	eq
 8009e3a:	1852      	addeq	r2, r2, r1
 8009e3c:	6022      	streq	r2, [r4, #0]
 8009e3e:	6004      	str	r4, [r0, #0]
 8009e40:	e7ec      	b.n	8009e1c <_free_r+0x24>
 8009e42:	4613      	mov	r3, r2
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	b10a      	cbz	r2, 8009e4c <_free_r+0x54>
 8009e48:	42a2      	cmp	r2, r4
 8009e4a:	d9fa      	bls.n	8009e42 <_free_r+0x4a>
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	1858      	adds	r0, r3, r1
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d10b      	bne.n	8009e6c <_free_r+0x74>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	4401      	add	r1, r0
 8009e58:	1858      	adds	r0, r3, r1
 8009e5a:	4282      	cmp	r2, r0
 8009e5c:	6019      	str	r1, [r3, #0]
 8009e5e:	d1dd      	bne.n	8009e1c <_free_r+0x24>
 8009e60:	6810      	ldr	r0, [r2, #0]
 8009e62:	6852      	ldr	r2, [r2, #4]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	4401      	add	r1, r0
 8009e68:	6019      	str	r1, [r3, #0]
 8009e6a:	e7d7      	b.n	8009e1c <_free_r+0x24>
 8009e6c:	d902      	bls.n	8009e74 <_free_r+0x7c>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	e7d3      	b.n	8009e1c <_free_r+0x24>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	1821      	adds	r1, r4, r0
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	bf04      	itt	eq
 8009e7c:	6811      	ldreq	r1, [r2, #0]
 8009e7e:	6852      	ldreq	r2, [r2, #4]
 8009e80:	6062      	str	r2, [r4, #4]
 8009e82:	bf04      	itt	eq
 8009e84:	1809      	addeq	r1, r1, r0
 8009e86:	6021      	streq	r1, [r4, #0]
 8009e88:	605c      	str	r4, [r3, #4]
 8009e8a:	e7c7      	b.n	8009e1c <_free_r+0x24>
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000f950 	.word	0x2000f950

08009e94 <_malloc_r>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	1ccd      	adds	r5, r1, #3
 8009e98:	f025 0503 	bic.w	r5, r5, #3
 8009e9c:	3508      	adds	r5, #8
 8009e9e:	2d0c      	cmp	r5, #12
 8009ea0:	bf38      	it	cc
 8009ea2:	250c      	movcc	r5, #12
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	db01      	blt.n	8009eae <_malloc_r+0x1a>
 8009eaa:	42a9      	cmp	r1, r5
 8009eac:	d903      	bls.n	8009eb6 <_malloc_r+0x22>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
 8009eb6:	f000 fe55 	bl	800ab64 <__malloc_lock>
 8009eba:	4a23      	ldr	r2, [pc, #140]	; (8009f48 <_malloc_r+0xb4>)
 8009ebc:	6814      	ldr	r4, [r2, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	b991      	cbnz	r1, 8009ee8 <_malloc_r+0x54>
 8009ec2:	4c22      	ldr	r4, [pc, #136]	; (8009f4c <_malloc_r+0xb8>)
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	b91b      	cbnz	r3, 8009ed0 <_malloc_r+0x3c>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 fb43 	bl	800a554 <_sbrk_r>
 8009ece:	6020      	str	r0, [r4, #0]
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f000 fb3e 	bl	800a554 <_sbrk_r>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d126      	bne.n	8009f2a <_malloc_r+0x96>
 8009edc:	230c      	movs	r3, #12
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 fe40 	bl	800ab66 <__malloc_unlock>
 8009ee6:	e7e4      	b.n	8009eb2 <_malloc_r+0x1e>
 8009ee8:	680b      	ldr	r3, [r1, #0]
 8009eea:	1b5b      	subs	r3, r3, r5
 8009eec:	d41a      	bmi.n	8009f24 <_malloc_r+0x90>
 8009eee:	2b0b      	cmp	r3, #11
 8009ef0:	d90f      	bls.n	8009f12 <_malloc_r+0x7e>
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	50cd      	str	r5, [r1, r3]
 8009ef6:	18cc      	adds	r4, r1, r3
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 fe34 	bl	800ab66 <__malloc_unlock>
 8009efe:	f104 000b 	add.w	r0, r4, #11
 8009f02:	1d23      	adds	r3, r4, #4
 8009f04:	f020 0007 	bic.w	r0, r0, #7
 8009f08:	1ac3      	subs	r3, r0, r3
 8009f0a:	d01b      	beq.n	8009f44 <_malloc_r+0xb0>
 8009f0c:	425a      	negs	r2, r3
 8009f0e:	50e2      	str	r2, [r4, r3]
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	428c      	cmp	r4, r1
 8009f14:	bf0d      	iteet	eq
 8009f16:	6863      	ldreq	r3, [r4, #4]
 8009f18:	684b      	ldrne	r3, [r1, #4]
 8009f1a:	6063      	strne	r3, [r4, #4]
 8009f1c:	6013      	streq	r3, [r2, #0]
 8009f1e:	bf18      	it	ne
 8009f20:	460c      	movne	r4, r1
 8009f22:	e7e9      	b.n	8009ef8 <_malloc_r+0x64>
 8009f24:	460c      	mov	r4, r1
 8009f26:	6849      	ldr	r1, [r1, #4]
 8009f28:	e7ca      	b.n	8009ec0 <_malloc_r+0x2c>
 8009f2a:	1cc4      	adds	r4, r0, #3
 8009f2c:	f024 0403 	bic.w	r4, r4, #3
 8009f30:	42a0      	cmp	r0, r4
 8009f32:	d005      	beq.n	8009f40 <_malloc_r+0xac>
 8009f34:	1a21      	subs	r1, r4, r0
 8009f36:	4630      	mov	r0, r6
 8009f38:	f000 fb0c 	bl	800a554 <_sbrk_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d0cd      	beq.n	8009edc <_malloc_r+0x48>
 8009f40:	6025      	str	r5, [r4, #0]
 8009f42:	e7d9      	b.n	8009ef8 <_malloc_r+0x64>
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	bf00      	nop
 8009f48:	2000f950 	.word	0x2000f950
 8009f4c:	2000f954 	.word	0x2000f954

08009f50 <__sfputc_r>:
 8009f50:	6893      	ldr	r3, [r2, #8]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	b410      	push	{r4}
 8009f58:	6093      	str	r3, [r2, #8]
 8009f5a:	da09      	bge.n	8009f70 <__sfputc_r+0x20>
 8009f5c:	6994      	ldr	r4, [r2, #24]
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	db02      	blt.n	8009f68 <__sfputc_r+0x18>
 8009f62:	b2cb      	uxtb	r3, r1
 8009f64:	2b0a      	cmp	r3, #10
 8009f66:	d103      	bne.n	8009f70 <__sfputc_r+0x20>
 8009f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f6c:	f000 bb4a 	b.w	800a604 <__swbuf_r>
 8009f70:	6813      	ldr	r3, [r2, #0]
 8009f72:	1c58      	adds	r0, r3, #1
 8009f74:	6010      	str	r0, [r2, #0]
 8009f76:	7019      	strb	r1, [r3, #0]
 8009f78:	b2c8      	uxtb	r0, r1
 8009f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <__sfputs_r>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	4606      	mov	r6, r0
 8009f84:	460f      	mov	r7, r1
 8009f86:	4614      	mov	r4, r2
 8009f88:	18d5      	adds	r5, r2, r3
 8009f8a:	42ac      	cmp	r4, r5
 8009f8c:	d101      	bne.n	8009f92 <__sfputs_r+0x12>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e007      	b.n	8009fa2 <__sfputs_r+0x22>
 8009f92:	463a      	mov	r2, r7
 8009f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff ffd9 	bl	8009f50 <__sfputc_r>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d1f3      	bne.n	8009f8a <__sfputs_r+0xa>
 8009fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fa4 <_vfiprintf_r>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	b09d      	sub	sp, #116	; 0x74
 8009faa:	460c      	mov	r4, r1
 8009fac:	4617      	mov	r7, r2
 8009fae:	9303      	str	r3, [sp, #12]
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	b118      	cbz	r0, 8009fbc <_vfiprintf_r+0x18>
 8009fb4:	6983      	ldr	r3, [r0, #24]
 8009fb6:	b90b      	cbnz	r3, 8009fbc <_vfiprintf_r+0x18>
 8009fb8:	f000 fcde 	bl	800a978 <__sinit>
 8009fbc:	4b7c      	ldr	r3, [pc, #496]	; (800a1b0 <_vfiprintf_r+0x20c>)
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d157      	bne.n	800a072 <_vfiprintf_r+0xce>
 8009fc2:	6874      	ldr	r4, [r6, #4]
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	0718      	lsls	r0, r3, #28
 8009fc8:	d55d      	bpl.n	800a086 <_vfiprintf_r+0xe2>
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d05a      	beq.n	800a086 <_vfiprintf_r+0xe2>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd4:	2320      	movs	r3, #32
 8009fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fda:	2330      	movs	r3, #48	; 0x30
 8009fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe0:	f04f 0b01 	mov.w	fp, #1
 8009fe4:	46b8      	mov	r8, r7
 8009fe6:	4645      	mov	r5, r8
 8009fe8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d155      	bne.n	800a09c <_vfiprintf_r+0xf8>
 8009ff0:	ebb8 0a07 	subs.w	sl, r8, r7
 8009ff4:	d00b      	beq.n	800a00e <_vfiprintf_r+0x6a>
 8009ff6:	4653      	mov	r3, sl
 8009ff8:	463a      	mov	r2, r7
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff ffbf 	bl	8009f80 <__sfputs_r>
 800a002:	3001      	adds	r0, #1
 800a004:	f000 80c4 	beq.w	800a190 <_vfiprintf_r+0x1ec>
 800a008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00a:	4453      	add	r3, sl
 800a00c:	9309      	str	r3, [sp, #36]	; 0x24
 800a00e:	f898 3000 	ldrb.w	r3, [r8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 80bc 	beq.w	800a190 <_vfiprintf_r+0x1ec>
 800a018:	2300      	movs	r3, #0
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	9307      	str	r3, [sp, #28]
 800a022:	9205      	str	r2, [sp, #20]
 800a024:	9306      	str	r3, [sp, #24]
 800a026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a02a:	931a      	str	r3, [sp, #104]	; 0x68
 800a02c:	2205      	movs	r2, #5
 800a02e:	7829      	ldrb	r1, [r5, #0]
 800a030:	4860      	ldr	r0, [pc, #384]	; (800a1b4 <_vfiprintf_r+0x210>)
 800a032:	f7f6 f8dd 	bl	80001f0 <memchr>
 800a036:	f105 0801 	add.w	r8, r5, #1
 800a03a:	9b04      	ldr	r3, [sp, #16]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d131      	bne.n	800a0a4 <_vfiprintf_r+0x100>
 800a040:	06d9      	lsls	r1, r3, #27
 800a042:	bf44      	itt	mi
 800a044:	2220      	movmi	r2, #32
 800a046:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a04a:	071a      	lsls	r2, r3, #28
 800a04c:	bf44      	itt	mi
 800a04e:	222b      	movmi	r2, #43	; 0x2b
 800a050:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a054:	782a      	ldrb	r2, [r5, #0]
 800a056:	2a2a      	cmp	r2, #42	; 0x2a
 800a058:	d02c      	beq.n	800a0b4 <_vfiprintf_r+0x110>
 800a05a:	9a07      	ldr	r2, [sp, #28]
 800a05c:	2100      	movs	r1, #0
 800a05e:	200a      	movs	r0, #10
 800a060:	46a8      	mov	r8, r5
 800a062:	3501      	adds	r5, #1
 800a064:	f898 3000 	ldrb.w	r3, [r8]
 800a068:	3b30      	subs	r3, #48	; 0x30
 800a06a:	2b09      	cmp	r3, #9
 800a06c:	d96d      	bls.n	800a14a <_vfiprintf_r+0x1a6>
 800a06e:	b371      	cbz	r1, 800a0ce <_vfiprintf_r+0x12a>
 800a070:	e026      	b.n	800a0c0 <_vfiprintf_r+0x11c>
 800a072:	4b51      	ldr	r3, [pc, #324]	; (800a1b8 <_vfiprintf_r+0x214>)
 800a074:	429c      	cmp	r4, r3
 800a076:	d101      	bne.n	800a07c <_vfiprintf_r+0xd8>
 800a078:	68b4      	ldr	r4, [r6, #8]
 800a07a:	e7a3      	b.n	8009fc4 <_vfiprintf_r+0x20>
 800a07c:	4b4f      	ldr	r3, [pc, #316]	; (800a1bc <_vfiprintf_r+0x218>)
 800a07e:	429c      	cmp	r4, r3
 800a080:	bf08      	it	eq
 800a082:	68f4      	ldreq	r4, [r6, #12]
 800a084:	e79e      	b.n	8009fc4 <_vfiprintf_r+0x20>
 800a086:	4621      	mov	r1, r4
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 fb0d 	bl	800a6a8 <__swsetup_r>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d09e      	beq.n	8009fd0 <_vfiprintf_r+0x2c>
 800a092:	f04f 30ff 	mov.w	r0, #4294967295
 800a096:	b01d      	add	sp, #116	; 0x74
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	2b25      	cmp	r3, #37	; 0x25
 800a09e:	d0a7      	beq.n	8009ff0 <_vfiprintf_r+0x4c>
 800a0a0:	46a8      	mov	r8, r5
 800a0a2:	e7a0      	b.n	8009fe6 <_vfiprintf_r+0x42>
 800a0a4:	4a43      	ldr	r2, [pc, #268]	; (800a1b4 <_vfiprintf_r+0x210>)
 800a0a6:	1a80      	subs	r0, r0, r2
 800a0a8:	fa0b f000 	lsl.w	r0, fp, r0
 800a0ac:	4318      	orrs	r0, r3
 800a0ae:	9004      	str	r0, [sp, #16]
 800a0b0:	4645      	mov	r5, r8
 800a0b2:	e7bb      	b.n	800a02c <_vfiprintf_r+0x88>
 800a0b4:	9a03      	ldr	r2, [sp, #12]
 800a0b6:	1d11      	adds	r1, r2, #4
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	9103      	str	r1, [sp, #12]
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	db01      	blt.n	800a0c4 <_vfiprintf_r+0x120>
 800a0c0:	9207      	str	r2, [sp, #28]
 800a0c2:	e004      	b.n	800a0ce <_vfiprintf_r+0x12a>
 800a0c4:	4252      	negs	r2, r2
 800a0c6:	f043 0302 	orr.w	r3, r3, #2
 800a0ca:	9207      	str	r2, [sp, #28]
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	f898 3000 	ldrb.w	r3, [r8]
 800a0d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0d4:	d110      	bne.n	800a0f8 <_vfiprintf_r+0x154>
 800a0d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a0da:	2b2a      	cmp	r3, #42	; 0x2a
 800a0dc:	f108 0101 	add.w	r1, r8, #1
 800a0e0:	d137      	bne.n	800a152 <_vfiprintf_r+0x1ae>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	1d1a      	adds	r2, r3, #4
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	9203      	str	r2, [sp, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bfb8      	it	lt
 800a0ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0f2:	f108 0802 	add.w	r8, r8, #2
 800a0f6:	9305      	str	r3, [sp, #20]
 800a0f8:	4d31      	ldr	r5, [pc, #196]	; (800a1c0 <_vfiprintf_r+0x21c>)
 800a0fa:	f898 1000 	ldrb.w	r1, [r8]
 800a0fe:	2203      	movs	r2, #3
 800a100:	4628      	mov	r0, r5
 800a102:	f7f6 f875 	bl	80001f0 <memchr>
 800a106:	b140      	cbz	r0, 800a11a <_vfiprintf_r+0x176>
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	1b40      	subs	r0, r0, r5
 800a10c:	fa03 f000 	lsl.w	r0, r3, r0
 800a110:	9b04      	ldr	r3, [sp, #16]
 800a112:	4303      	orrs	r3, r0
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	f108 0801 	add.w	r8, r8, #1
 800a11a:	f898 1000 	ldrb.w	r1, [r8]
 800a11e:	4829      	ldr	r0, [pc, #164]	; (800a1c4 <_vfiprintf_r+0x220>)
 800a120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a124:	2206      	movs	r2, #6
 800a126:	f108 0701 	add.w	r7, r8, #1
 800a12a:	f7f6 f861 	bl	80001f0 <memchr>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d034      	beq.n	800a19c <_vfiprintf_r+0x1f8>
 800a132:	4b25      	ldr	r3, [pc, #148]	; (800a1c8 <_vfiprintf_r+0x224>)
 800a134:	bb03      	cbnz	r3, 800a178 <_vfiprintf_r+0x1d4>
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	3307      	adds	r3, #7
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	3308      	adds	r3, #8
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	444b      	add	r3, r9
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	e74c      	b.n	8009fe4 <_vfiprintf_r+0x40>
 800a14a:	fb00 3202 	mla	r2, r0, r2, r3
 800a14e:	2101      	movs	r1, #1
 800a150:	e786      	b.n	800a060 <_vfiprintf_r+0xbc>
 800a152:	2300      	movs	r3, #0
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	4618      	mov	r0, r3
 800a158:	250a      	movs	r5, #10
 800a15a:	4688      	mov	r8, r1
 800a15c:	3101      	adds	r1, #1
 800a15e:	f898 2000 	ldrb.w	r2, [r8]
 800a162:	3a30      	subs	r2, #48	; 0x30
 800a164:	2a09      	cmp	r2, #9
 800a166:	d903      	bls.n	800a170 <_vfiprintf_r+0x1cc>
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d0c5      	beq.n	800a0f8 <_vfiprintf_r+0x154>
 800a16c:	9005      	str	r0, [sp, #20]
 800a16e:	e7c3      	b.n	800a0f8 <_vfiprintf_r+0x154>
 800a170:	fb05 2000 	mla	r0, r5, r0, r2
 800a174:	2301      	movs	r3, #1
 800a176:	e7f0      	b.n	800a15a <_vfiprintf_r+0x1b6>
 800a178:	ab03      	add	r3, sp, #12
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	4622      	mov	r2, r4
 800a17e:	4b13      	ldr	r3, [pc, #76]	; (800a1cc <_vfiprintf_r+0x228>)
 800a180:	a904      	add	r1, sp, #16
 800a182:	4630      	mov	r0, r6
 800a184:	f3af 8000 	nop.w
 800a188:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a18c:	4681      	mov	r9, r0
 800a18e:	d1d8      	bne.n	800a142 <_vfiprintf_r+0x19e>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	065b      	lsls	r3, r3, #25
 800a194:	f53f af7d 	bmi.w	800a092 <_vfiprintf_r+0xee>
 800a198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19a:	e77c      	b.n	800a096 <_vfiprintf_r+0xf2>
 800a19c:	ab03      	add	r3, sp, #12
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4b0a      	ldr	r3, [pc, #40]	; (800a1cc <_vfiprintf_r+0x228>)
 800a1a4:	a904      	add	r1, sp, #16
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f888 	bl	800a2bc <_printf_i>
 800a1ac:	e7ec      	b.n	800a188 <_vfiprintf_r+0x1e4>
 800a1ae:	bf00      	nop
 800a1b0:	0800b0bc 	.word	0x0800b0bc
 800a1b4:	0800b044 	.word	0x0800b044
 800a1b8:	0800b0dc 	.word	0x0800b0dc
 800a1bc:	0800b09c 	.word	0x0800b09c
 800a1c0:	0800b04a 	.word	0x0800b04a
 800a1c4:	0800b04e 	.word	0x0800b04e
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	08009f81 	.word	0x08009f81

0800a1d0 <_printf_common>:
 800a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	4691      	mov	r9, r2
 800a1d6:	461f      	mov	r7, r3
 800a1d8:	688a      	ldr	r2, [r1, #8]
 800a1da:	690b      	ldr	r3, [r1, #16]
 800a1dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	bfb8      	it	lt
 800a1e4:	4613      	movlt	r3, r2
 800a1e6:	f8c9 3000 	str.w	r3, [r9]
 800a1ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	b112      	cbz	r2, 800a1fa <_printf_common+0x2a>
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	f8c9 3000 	str.w	r3, [r9]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	0699      	lsls	r1, r3, #26
 800a1fe:	bf42      	ittt	mi
 800a200:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a204:	3302      	addmi	r3, #2
 800a206:	f8c9 3000 	strmi.w	r3, [r9]
 800a20a:	6825      	ldr	r5, [r4, #0]
 800a20c:	f015 0506 	ands.w	r5, r5, #6
 800a210:	d107      	bne.n	800a222 <_printf_common+0x52>
 800a212:	f104 0a19 	add.w	sl, r4, #25
 800a216:	68e3      	ldr	r3, [r4, #12]
 800a218:	f8d9 2000 	ldr.w	r2, [r9]
 800a21c:	1a9b      	subs	r3, r3, r2
 800a21e:	429d      	cmp	r5, r3
 800a220:	db29      	blt.n	800a276 <_printf_common+0xa6>
 800a222:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	3300      	adds	r3, #0
 800a22a:	bf18      	it	ne
 800a22c:	2301      	movne	r3, #1
 800a22e:	0692      	lsls	r2, r2, #26
 800a230:	d42e      	bmi.n	800a290 <_printf_common+0xc0>
 800a232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a236:	4639      	mov	r1, r7
 800a238:	4630      	mov	r0, r6
 800a23a:	47c0      	blx	r8
 800a23c:	3001      	adds	r0, #1
 800a23e:	d021      	beq.n	800a284 <_printf_common+0xb4>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	68e5      	ldr	r5, [r4, #12]
 800a244:	f8d9 2000 	ldr.w	r2, [r9]
 800a248:	f003 0306 	and.w	r3, r3, #6
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	bf08      	it	eq
 800a250:	1aad      	subeq	r5, r5, r2
 800a252:	68a3      	ldr	r3, [r4, #8]
 800a254:	6922      	ldr	r2, [r4, #16]
 800a256:	bf0c      	ite	eq
 800a258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a25c:	2500      	movne	r5, #0
 800a25e:	4293      	cmp	r3, r2
 800a260:	bfc4      	itt	gt
 800a262:	1a9b      	subgt	r3, r3, r2
 800a264:	18ed      	addgt	r5, r5, r3
 800a266:	f04f 0900 	mov.w	r9, #0
 800a26a:	341a      	adds	r4, #26
 800a26c:	454d      	cmp	r5, r9
 800a26e:	d11b      	bne.n	800a2a8 <_printf_common+0xd8>
 800a270:	2000      	movs	r0, #0
 800a272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a276:	2301      	movs	r3, #1
 800a278:	4652      	mov	r2, sl
 800a27a:	4639      	mov	r1, r7
 800a27c:	4630      	mov	r0, r6
 800a27e:	47c0      	blx	r8
 800a280:	3001      	adds	r0, #1
 800a282:	d103      	bne.n	800a28c <_printf_common+0xbc>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28c:	3501      	adds	r5, #1
 800a28e:	e7c2      	b.n	800a216 <_printf_common+0x46>
 800a290:	18e1      	adds	r1, r4, r3
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	2030      	movs	r0, #48	; 0x30
 800a296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a29a:	4422      	add	r2, r4
 800a29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	e7c4      	b.n	800a232 <_printf_common+0x62>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	47c0      	blx	r8
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d0e6      	beq.n	800a284 <_printf_common+0xb4>
 800a2b6:	f109 0901 	add.w	r9, r9, #1
 800a2ba:	e7d7      	b.n	800a26c <_printf_common+0x9c>

0800a2bc <_printf_i>:
 800a2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	4617      	mov	r7, r2
 800a2c2:	7e0a      	ldrb	r2, [r1, #24]
 800a2c4:	b085      	sub	sp, #20
 800a2c6:	2a6e      	cmp	r2, #110	; 0x6e
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a2d4:	f000 80bc 	beq.w	800a450 <_printf_i+0x194>
 800a2d8:	d81a      	bhi.n	800a310 <_printf_i+0x54>
 800a2da:	2a63      	cmp	r2, #99	; 0x63
 800a2dc:	d02e      	beq.n	800a33c <_printf_i+0x80>
 800a2de:	d80a      	bhi.n	800a2f6 <_printf_i+0x3a>
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	f000 80c8 	beq.w	800a476 <_printf_i+0x1ba>
 800a2e6:	2a58      	cmp	r2, #88	; 0x58
 800a2e8:	f000 808a 	beq.w	800a400 <_printf_i+0x144>
 800a2ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a2f4:	e02a      	b.n	800a34c <_printf_i+0x90>
 800a2f6:	2a64      	cmp	r2, #100	; 0x64
 800a2f8:	d001      	beq.n	800a2fe <_printf_i+0x42>
 800a2fa:	2a69      	cmp	r2, #105	; 0x69
 800a2fc:	d1f6      	bne.n	800a2ec <_printf_i+0x30>
 800a2fe:	6821      	ldr	r1, [r4, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a306:	d023      	beq.n	800a350 <_printf_i+0x94>
 800a308:	1d11      	adds	r1, r2, #4
 800a30a:	6019      	str	r1, [r3, #0]
 800a30c:	6813      	ldr	r3, [r2, #0]
 800a30e:	e027      	b.n	800a360 <_printf_i+0xa4>
 800a310:	2a73      	cmp	r2, #115	; 0x73
 800a312:	f000 80b4 	beq.w	800a47e <_printf_i+0x1c2>
 800a316:	d808      	bhi.n	800a32a <_printf_i+0x6e>
 800a318:	2a6f      	cmp	r2, #111	; 0x6f
 800a31a:	d02a      	beq.n	800a372 <_printf_i+0xb6>
 800a31c:	2a70      	cmp	r2, #112	; 0x70
 800a31e:	d1e5      	bne.n	800a2ec <_printf_i+0x30>
 800a320:	680a      	ldr	r2, [r1, #0]
 800a322:	f042 0220 	orr.w	r2, r2, #32
 800a326:	600a      	str	r2, [r1, #0]
 800a328:	e003      	b.n	800a332 <_printf_i+0x76>
 800a32a:	2a75      	cmp	r2, #117	; 0x75
 800a32c:	d021      	beq.n	800a372 <_printf_i+0xb6>
 800a32e:	2a78      	cmp	r2, #120	; 0x78
 800a330:	d1dc      	bne.n	800a2ec <_printf_i+0x30>
 800a332:	2278      	movs	r2, #120	; 0x78
 800a334:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a338:	496e      	ldr	r1, [pc, #440]	; (800a4f4 <_printf_i+0x238>)
 800a33a:	e064      	b.n	800a406 <_printf_i+0x14a>
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a342:	1d11      	adds	r1, r2, #4
 800a344:	6019      	str	r1, [r3, #0]
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0a3      	b.n	800a498 <_printf_i+0x1dc>
 800a350:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a354:	f102 0104 	add.w	r1, r2, #4
 800a358:	6019      	str	r1, [r3, #0]
 800a35a:	d0d7      	beq.n	800a30c <_printf_i+0x50>
 800a35c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a360:	2b00      	cmp	r3, #0
 800a362:	da03      	bge.n	800a36c <_printf_i+0xb0>
 800a364:	222d      	movs	r2, #45	; 0x2d
 800a366:	425b      	negs	r3, r3
 800a368:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a36c:	4962      	ldr	r1, [pc, #392]	; (800a4f8 <_printf_i+0x23c>)
 800a36e:	220a      	movs	r2, #10
 800a370:	e017      	b.n	800a3a2 <_printf_i+0xe6>
 800a372:	6820      	ldr	r0, [r4, #0]
 800a374:	6819      	ldr	r1, [r3, #0]
 800a376:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a37a:	d003      	beq.n	800a384 <_printf_i+0xc8>
 800a37c:	1d08      	adds	r0, r1, #4
 800a37e:	6018      	str	r0, [r3, #0]
 800a380:	680b      	ldr	r3, [r1, #0]
 800a382:	e006      	b.n	800a392 <_printf_i+0xd6>
 800a384:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a388:	f101 0004 	add.w	r0, r1, #4
 800a38c:	6018      	str	r0, [r3, #0]
 800a38e:	d0f7      	beq.n	800a380 <_printf_i+0xc4>
 800a390:	880b      	ldrh	r3, [r1, #0]
 800a392:	4959      	ldr	r1, [pc, #356]	; (800a4f8 <_printf_i+0x23c>)
 800a394:	2a6f      	cmp	r2, #111	; 0x6f
 800a396:	bf14      	ite	ne
 800a398:	220a      	movne	r2, #10
 800a39a:	2208      	moveq	r2, #8
 800a39c:	2000      	movs	r0, #0
 800a39e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a3a2:	6865      	ldr	r5, [r4, #4]
 800a3a4:	60a5      	str	r5, [r4, #8]
 800a3a6:	2d00      	cmp	r5, #0
 800a3a8:	f2c0 809c 	blt.w	800a4e4 <_printf_i+0x228>
 800a3ac:	6820      	ldr	r0, [r4, #0]
 800a3ae:	f020 0004 	bic.w	r0, r0, #4
 800a3b2:	6020      	str	r0, [r4, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d13f      	bne.n	800a438 <_printf_i+0x17c>
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	f040 8095 	bne.w	800a4e8 <_printf_i+0x22c>
 800a3be:	4675      	mov	r5, lr
 800a3c0:	2a08      	cmp	r2, #8
 800a3c2:	d10b      	bne.n	800a3dc <_printf_i+0x120>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	07da      	lsls	r2, r3, #31
 800a3c8:	d508      	bpl.n	800a3dc <_printf_i+0x120>
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	6862      	ldr	r2, [r4, #4]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	bfde      	ittt	le
 800a3d2:	2330      	movle	r3, #48	; 0x30
 800a3d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3dc:	ebae 0305 	sub.w	r3, lr, r5
 800a3e0:	6123      	str	r3, [r4, #16]
 800a3e2:	f8cd 8000 	str.w	r8, [sp]
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	aa03      	add	r2, sp, #12
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7ff feef 	bl	800a1d0 <_printf_common>
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d155      	bne.n	800a4a2 <_printf_i+0x1e6>
 800a3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fa:	b005      	add	sp, #20
 800a3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a400:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a404:	493c      	ldr	r1, [pc, #240]	; (800a4f8 <_printf_i+0x23c>)
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a40e:	f100 0504 	add.w	r5, r0, #4
 800a412:	601d      	str	r5, [r3, #0]
 800a414:	d001      	beq.n	800a41a <_printf_i+0x15e>
 800a416:	6803      	ldr	r3, [r0, #0]
 800a418:	e002      	b.n	800a420 <_printf_i+0x164>
 800a41a:	0655      	lsls	r5, r2, #25
 800a41c:	d5fb      	bpl.n	800a416 <_printf_i+0x15a>
 800a41e:	8803      	ldrh	r3, [r0, #0]
 800a420:	07d0      	lsls	r0, r2, #31
 800a422:	bf44      	itt	mi
 800a424:	f042 0220 	orrmi.w	r2, r2, #32
 800a428:	6022      	strmi	r2, [r4, #0]
 800a42a:	b91b      	cbnz	r3, 800a434 <_printf_i+0x178>
 800a42c:	6822      	ldr	r2, [r4, #0]
 800a42e:	f022 0220 	bic.w	r2, r2, #32
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	2210      	movs	r2, #16
 800a436:	e7b1      	b.n	800a39c <_printf_i+0xe0>
 800a438:	4675      	mov	r5, lr
 800a43a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a43e:	fb02 3310 	mls	r3, r2, r0, r3
 800a442:	5ccb      	ldrb	r3, [r1, r3]
 800a444:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a448:	4603      	mov	r3, r0
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d1f5      	bne.n	800a43a <_printf_i+0x17e>
 800a44e:	e7b7      	b.n	800a3c0 <_printf_i+0x104>
 800a450:	6808      	ldr	r0, [r1, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6949      	ldr	r1, [r1, #20]
 800a456:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a45a:	d004      	beq.n	800a466 <_printf_i+0x1aa>
 800a45c:	1d10      	adds	r0, r2, #4
 800a45e:	6018      	str	r0, [r3, #0]
 800a460:	6813      	ldr	r3, [r2, #0]
 800a462:	6019      	str	r1, [r3, #0]
 800a464:	e007      	b.n	800a476 <_printf_i+0x1ba>
 800a466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a46a:	f102 0004 	add.w	r0, r2, #4
 800a46e:	6018      	str	r0, [r3, #0]
 800a470:	6813      	ldr	r3, [r2, #0]
 800a472:	d0f6      	beq.n	800a462 <_printf_i+0x1a6>
 800a474:	8019      	strh	r1, [r3, #0]
 800a476:	2300      	movs	r3, #0
 800a478:	6123      	str	r3, [r4, #16]
 800a47a:	4675      	mov	r5, lr
 800a47c:	e7b1      	b.n	800a3e2 <_printf_i+0x126>
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	1d11      	adds	r1, r2, #4
 800a482:	6019      	str	r1, [r3, #0]
 800a484:	6815      	ldr	r5, [r2, #0]
 800a486:	6862      	ldr	r2, [r4, #4]
 800a488:	2100      	movs	r1, #0
 800a48a:	4628      	mov	r0, r5
 800a48c:	f7f5 feb0 	bl	80001f0 <memchr>
 800a490:	b108      	cbz	r0, 800a496 <_printf_i+0x1da>
 800a492:	1b40      	subs	r0, r0, r5
 800a494:	6060      	str	r0, [r4, #4]
 800a496:	6863      	ldr	r3, [r4, #4]
 800a498:	6123      	str	r3, [r4, #16]
 800a49a:	2300      	movs	r3, #0
 800a49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a0:	e79f      	b.n	800a3e2 <_printf_i+0x126>
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	47c0      	blx	r8
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d0a2      	beq.n	800a3f6 <_printf_i+0x13a>
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	079b      	lsls	r3, r3, #30
 800a4b4:	d507      	bpl.n	800a4c6 <_printf_i+0x20a>
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	f104 0919 	add.w	r9, r4, #25
 800a4bc:	68e3      	ldr	r3, [r4, #12]
 800a4be:	9a03      	ldr	r2, [sp, #12]
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	429d      	cmp	r5, r3
 800a4c4:	db05      	blt.n	800a4d2 <_printf_i+0x216>
 800a4c6:	68e0      	ldr	r0, [r4, #12]
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	4298      	cmp	r0, r3
 800a4cc:	bfb8      	it	lt
 800a4ce:	4618      	movlt	r0, r3
 800a4d0:	e793      	b.n	800a3fa <_printf_i+0x13e>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	464a      	mov	r2, r9
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	4630      	mov	r0, r6
 800a4da:	47c0      	blx	r8
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d08a      	beq.n	800a3f6 <_printf_i+0x13a>
 800a4e0:	3501      	adds	r5, #1
 800a4e2:	e7eb      	b.n	800a4bc <_printf_i+0x200>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1a7      	bne.n	800a438 <_printf_i+0x17c>
 800a4e8:	780b      	ldrb	r3, [r1, #0]
 800a4ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4f2:	e765      	b.n	800a3c0 <_printf_i+0x104>
 800a4f4:	0800b066 	.word	0x0800b066
 800a4f8:	0800b055 	.word	0x0800b055

0800a4fc <iprintf>:
 800a4fc:	b40f      	push	{r0, r1, r2, r3}
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <iprintf+0x2c>)
 800a500:	b513      	push	{r0, r1, r4, lr}
 800a502:	681c      	ldr	r4, [r3, #0]
 800a504:	b124      	cbz	r4, 800a510 <iprintf+0x14>
 800a506:	69a3      	ldr	r3, [r4, #24]
 800a508:	b913      	cbnz	r3, 800a510 <iprintf+0x14>
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 fa34 	bl	800a978 <__sinit>
 800a510:	ab05      	add	r3, sp, #20
 800a512:	9a04      	ldr	r2, [sp, #16]
 800a514:	68a1      	ldr	r1, [r4, #8]
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	4620      	mov	r0, r4
 800a51a:	f7ff fd43 	bl	8009fa4 <_vfiprintf_r>
 800a51e:	b002      	add	sp, #8
 800a520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a524:	b004      	add	sp, #16
 800a526:	4770      	bx	lr
 800a528:	20000a80 	.word	0x20000a80

0800a52c <putchar>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4b08      	ldr	r3, [pc, #32]	; (800a550 <putchar+0x24>)
 800a530:	681c      	ldr	r4, [r3, #0]
 800a532:	4605      	mov	r5, r0
 800a534:	b124      	cbz	r4, 800a540 <putchar+0x14>
 800a536:	69a3      	ldr	r3, [r4, #24]
 800a538:	b913      	cbnz	r3, 800a540 <putchar+0x14>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fa1c 	bl	800a978 <__sinit>
 800a540:	68a2      	ldr	r2, [r4, #8]
 800a542:	4629      	mov	r1, r5
 800a544:	4620      	mov	r0, r4
 800a546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a54a:	f000 bb0d 	b.w	800ab68 <_putc_r>
 800a54e:	bf00      	nop
 800a550:	20000a80 	.word	0x20000a80

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4c06      	ldr	r4, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4605      	mov	r5, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	f000 fc60 	bl	800ae24 <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	2001192c 	.word	0x2001192c

0800a574 <strcpy>:
 800a574:	4603      	mov	r3, r0
 800a576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a57a:	f803 2b01 	strb.w	r2, [r3], #1
 800a57e:	2a00      	cmp	r2, #0
 800a580:	d1f9      	bne.n	800a576 <strcpy+0x2>
 800a582:	4770      	bx	lr

0800a584 <__utoa>:
 800a584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a586:	4c1e      	ldr	r4, [pc, #120]	; (800a600 <__utoa+0x7c>)
 800a588:	b08b      	sub	sp, #44	; 0x2c
 800a58a:	4603      	mov	r3, r0
 800a58c:	460f      	mov	r7, r1
 800a58e:	466d      	mov	r5, sp
 800a590:	f104 0e20 	add.w	lr, r4, #32
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	6861      	ldr	r1, [r4, #4]
 800a598:	462e      	mov	r6, r5
 800a59a:	c603      	stmia	r6!, {r0, r1}
 800a59c:	3408      	adds	r4, #8
 800a59e:	4574      	cmp	r4, lr
 800a5a0:	4635      	mov	r5, r6
 800a5a2:	d1f7      	bne.n	800a594 <__utoa+0x10>
 800a5a4:	7921      	ldrb	r1, [r4, #4]
 800a5a6:	7131      	strb	r1, [r6, #4]
 800a5a8:	1e91      	subs	r1, r2, #2
 800a5aa:	6820      	ldr	r0, [r4, #0]
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	2922      	cmp	r1, #34	; 0x22
 800a5b0:	f04f 0100 	mov.w	r1, #0
 800a5b4:	d904      	bls.n	800a5c0 <__utoa+0x3c>
 800a5b6:	7039      	strb	r1, [r7, #0]
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	b00b      	add	sp, #44	; 0x2c
 800a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c0:	1e78      	subs	r0, r7, #1
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	fbb3 f5f2 	udiv	r5, r3, r2
 800a5c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a5cc:	fb02 3315 	mls	r3, r2, r5, r3
 800a5d0:	4473      	add	r3, lr
 800a5d2:	1c4c      	adds	r4, r1, #1
 800a5d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a5d8:	f806 3f01 	strb.w	r3, [r6, #1]!
 800a5dc:	462b      	mov	r3, r5
 800a5de:	b965      	cbnz	r5, 800a5fa <__utoa+0x76>
 800a5e0:	553d      	strb	r5, [r7, r4]
 800a5e2:	187a      	adds	r2, r7, r1
 800a5e4:	1acc      	subs	r4, r1, r3
 800a5e6:	42a3      	cmp	r3, r4
 800a5e8:	dae7      	bge.n	800a5ba <__utoa+0x36>
 800a5ea:	7844      	ldrb	r4, [r0, #1]
 800a5ec:	7815      	ldrb	r5, [r2, #0]
 800a5ee:	f800 5f01 	strb.w	r5, [r0, #1]!
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	f802 4901 	strb.w	r4, [r2], #-1
 800a5f8:	e7f4      	b.n	800a5e4 <__utoa+0x60>
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	e7e2      	b.n	800a5c4 <__utoa+0x40>
 800a5fe:	bf00      	nop
 800a600:	0800b077 	.word	0x0800b077

0800a604 <__swbuf_r>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	460e      	mov	r6, r1
 800a608:	4614      	mov	r4, r2
 800a60a:	4605      	mov	r5, r0
 800a60c:	b118      	cbz	r0, 800a616 <__swbuf_r+0x12>
 800a60e:	6983      	ldr	r3, [r0, #24]
 800a610:	b90b      	cbnz	r3, 800a616 <__swbuf_r+0x12>
 800a612:	f000 f9b1 	bl	800a978 <__sinit>
 800a616:	4b21      	ldr	r3, [pc, #132]	; (800a69c <__swbuf_r+0x98>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	d12a      	bne.n	800a672 <__swbuf_r+0x6e>
 800a61c:	686c      	ldr	r4, [r5, #4]
 800a61e:	69a3      	ldr	r3, [r4, #24]
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	071a      	lsls	r2, r3, #28
 800a626:	d52e      	bpl.n	800a686 <__swbuf_r+0x82>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	b363      	cbz	r3, 800a686 <__swbuf_r+0x82>
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	6820      	ldr	r0, [r4, #0]
 800a630:	1ac0      	subs	r0, r0, r3
 800a632:	6963      	ldr	r3, [r4, #20]
 800a634:	b2f6      	uxtb	r6, r6
 800a636:	4298      	cmp	r0, r3
 800a638:	4637      	mov	r7, r6
 800a63a:	db04      	blt.n	800a646 <__swbuf_r+0x42>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f930 	bl	800a8a4 <_fflush_r>
 800a644:	bb28      	cbnz	r0, 800a692 <__swbuf_r+0x8e>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	3b01      	subs	r3, #1
 800a64a:	60a3      	str	r3, [r4, #8]
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	701e      	strb	r6, [r3, #0]
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	3001      	adds	r0, #1
 800a658:	4298      	cmp	r0, r3
 800a65a:	d004      	beq.n	800a666 <__swbuf_r+0x62>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d519      	bpl.n	800a696 <__swbuf_r+0x92>
 800a662:	2e0a      	cmp	r6, #10
 800a664:	d117      	bne.n	800a696 <__swbuf_r+0x92>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 f91b 	bl	800a8a4 <_fflush_r>
 800a66e:	b190      	cbz	r0, 800a696 <__swbuf_r+0x92>
 800a670:	e00f      	b.n	800a692 <__swbuf_r+0x8e>
 800a672:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <__swbuf_r+0x9c>)
 800a674:	429c      	cmp	r4, r3
 800a676:	d101      	bne.n	800a67c <__swbuf_r+0x78>
 800a678:	68ac      	ldr	r4, [r5, #8]
 800a67a:	e7d0      	b.n	800a61e <__swbuf_r+0x1a>
 800a67c:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <__swbuf_r+0xa0>)
 800a67e:	429c      	cmp	r4, r3
 800a680:	bf08      	it	eq
 800a682:	68ec      	ldreq	r4, [r5, #12]
 800a684:	e7cb      	b.n	800a61e <__swbuf_r+0x1a>
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 f80d 	bl	800a6a8 <__swsetup_r>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d0cc      	beq.n	800a62c <__swbuf_r+0x28>
 800a692:	f04f 37ff 	mov.w	r7, #4294967295
 800a696:	4638      	mov	r0, r7
 800a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a69a:	bf00      	nop
 800a69c:	0800b0bc 	.word	0x0800b0bc
 800a6a0:	0800b0dc 	.word	0x0800b0dc
 800a6a4:	0800b09c 	.word	0x0800b09c

0800a6a8 <__swsetup_r>:
 800a6a8:	4b32      	ldr	r3, [pc, #200]	; (800a774 <__swsetup_r+0xcc>)
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	681d      	ldr	r5, [r3, #0]
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	b125      	cbz	r5, 800a6be <__swsetup_r+0x16>
 800a6b4:	69ab      	ldr	r3, [r5, #24]
 800a6b6:	b913      	cbnz	r3, 800a6be <__swsetup_r+0x16>
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f000 f95d 	bl	800a978 <__sinit>
 800a6be:	4b2e      	ldr	r3, [pc, #184]	; (800a778 <__swsetup_r+0xd0>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	d10f      	bne.n	800a6e4 <__swsetup_r+0x3c>
 800a6c4:	686c      	ldr	r4, [r5, #4]
 800a6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	0715      	lsls	r5, r2, #28
 800a6ce:	d42c      	bmi.n	800a72a <__swsetup_r+0x82>
 800a6d0:	06d0      	lsls	r0, r2, #27
 800a6d2:	d411      	bmi.n	800a6f8 <__swsetup_r+0x50>
 800a6d4:	2209      	movs	r2, #9
 800a6d6:	6032      	str	r2, [r6, #0]
 800a6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	4b25      	ldr	r3, [pc, #148]	; (800a77c <__swsetup_r+0xd4>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d101      	bne.n	800a6ee <__swsetup_r+0x46>
 800a6ea:	68ac      	ldr	r4, [r5, #8]
 800a6ec:	e7eb      	b.n	800a6c6 <__swsetup_r+0x1e>
 800a6ee:	4b24      	ldr	r3, [pc, #144]	; (800a780 <__swsetup_r+0xd8>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	bf08      	it	eq
 800a6f4:	68ec      	ldreq	r4, [r5, #12]
 800a6f6:	e7e6      	b.n	800a6c6 <__swsetup_r+0x1e>
 800a6f8:	0751      	lsls	r1, r2, #29
 800a6fa:	d512      	bpl.n	800a722 <__swsetup_r+0x7a>
 800a6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6fe:	b141      	cbz	r1, 800a712 <__swsetup_r+0x6a>
 800a700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a704:	4299      	cmp	r1, r3
 800a706:	d002      	beq.n	800a70e <__swsetup_r+0x66>
 800a708:	4630      	mov	r0, r6
 800a70a:	f7ff fb75 	bl	8009df8 <_free_r>
 800a70e:	2300      	movs	r3, #0
 800a710:	6363      	str	r3, [r4, #52]	; 0x34
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	2300      	movs	r3, #0
 800a71c:	6063      	str	r3, [r4, #4]
 800a71e:	6923      	ldr	r3, [r4, #16]
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f043 0308 	orr.w	r3, r3, #8
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	b94b      	cbnz	r3, 800a742 <__swsetup_r+0x9a>
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a738:	d003      	beq.n	800a742 <__swsetup_r+0x9a>
 800a73a:	4621      	mov	r1, r4
 800a73c:	4630      	mov	r0, r6
 800a73e:	f000 f9c9 	bl	800aad4 <__smakebuf_r>
 800a742:	89a2      	ldrh	r2, [r4, #12]
 800a744:	f012 0301 	ands.w	r3, r2, #1
 800a748:	d00c      	beq.n	800a764 <__swsetup_r+0xbc>
 800a74a:	2300      	movs	r3, #0
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	6963      	ldr	r3, [r4, #20]
 800a750:	425b      	negs	r3, r3
 800a752:	61a3      	str	r3, [r4, #24]
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	b953      	cbnz	r3, 800a76e <__swsetup_r+0xc6>
 800a758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a760:	d1ba      	bne.n	800a6d8 <__swsetup_r+0x30>
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	0792      	lsls	r2, r2, #30
 800a766:	bf58      	it	pl
 800a768:	6963      	ldrpl	r3, [r4, #20]
 800a76a:	60a3      	str	r3, [r4, #8]
 800a76c:	e7f2      	b.n	800a754 <__swsetup_r+0xac>
 800a76e:	2000      	movs	r0, #0
 800a770:	e7f7      	b.n	800a762 <__swsetup_r+0xba>
 800a772:	bf00      	nop
 800a774:	20000a80 	.word	0x20000a80
 800a778:	0800b0bc 	.word	0x0800b0bc
 800a77c:	0800b0dc 	.word	0x0800b0dc
 800a780:	0800b09c 	.word	0x0800b09c

0800a784 <abort>:
 800a784:	b508      	push	{r3, lr}
 800a786:	2006      	movs	r0, #6
 800a788:	f000 fa4c 	bl	800ac24 <raise>
 800a78c:	2001      	movs	r0, #1
 800a78e:	f000 fb5f 	bl	800ae50 <_exit>
	...

0800a794 <__sflush_r>:
 800a794:	898a      	ldrh	r2, [r1, #12]
 800a796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79a:	4605      	mov	r5, r0
 800a79c:	0710      	lsls	r0, r2, #28
 800a79e:	460c      	mov	r4, r1
 800a7a0:	d45a      	bmi.n	800a858 <__sflush_r+0xc4>
 800a7a2:	684b      	ldr	r3, [r1, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc05      	bgt.n	800a7b4 <__sflush_r+0x20>
 800a7a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dc02      	bgt.n	800a7b4 <__sflush_r+0x20>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	d0f9      	beq.n	800a7ae <__sflush_r+0x1a>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7c0:	682f      	ldr	r7, [r5, #0]
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	d033      	beq.n	800a82e <__sflush_r+0x9a>
 800a7c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	075a      	lsls	r2, r3, #29
 800a7cc:	d505      	bpl.n	800a7da <__sflush_r+0x46>
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	1ac0      	subs	r0, r0, r3
 800a7d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7d4:	b10b      	cbz	r3, 800a7da <__sflush_r+0x46>
 800a7d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7d8:	1ac0      	subs	r0, r0, r3
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4602      	mov	r2, r0
 800a7de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7e0:	6a21      	ldr	r1, [r4, #32]
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b0      	blx	r6
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	d106      	bne.n	800a7fa <__sflush_r+0x66>
 800a7ec:	6829      	ldr	r1, [r5, #0]
 800a7ee:	291d      	cmp	r1, #29
 800a7f0:	d84b      	bhi.n	800a88a <__sflush_r+0xf6>
 800a7f2:	4a2b      	ldr	r2, [pc, #172]	; (800a8a0 <__sflush_r+0x10c>)
 800a7f4:	40ca      	lsrs	r2, r1
 800a7f6:	07d6      	lsls	r6, r2, #31
 800a7f8:	d547      	bpl.n	800a88a <__sflush_r+0xf6>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	6062      	str	r2, [r4, #4]
 800a7fe:	04d9      	lsls	r1, r3, #19
 800a800:	6922      	ldr	r2, [r4, #16]
 800a802:	6022      	str	r2, [r4, #0]
 800a804:	d504      	bpl.n	800a810 <__sflush_r+0x7c>
 800a806:	1c42      	adds	r2, r0, #1
 800a808:	d101      	bne.n	800a80e <__sflush_r+0x7a>
 800a80a:	682b      	ldr	r3, [r5, #0]
 800a80c:	b903      	cbnz	r3, 800a810 <__sflush_r+0x7c>
 800a80e:	6560      	str	r0, [r4, #84]	; 0x54
 800a810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a812:	602f      	str	r7, [r5, #0]
 800a814:	2900      	cmp	r1, #0
 800a816:	d0ca      	beq.n	800a7ae <__sflush_r+0x1a>
 800a818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a81c:	4299      	cmp	r1, r3
 800a81e:	d002      	beq.n	800a826 <__sflush_r+0x92>
 800a820:	4628      	mov	r0, r5
 800a822:	f7ff fae9 	bl	8009df8 <_free_r>
 800a826:	2000      	movs	r0, #0
 800a828:	6360      	str	r0, [r4, #52]	; 0x34
 800a82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82e:	6a21      	ldr	r1, [r4, #32]
 800a830:	2301      	movs	r3, #1
 800a832:	4628      	mov	r0, r5
 800a834:	47b0      	blx	r6
 800a836:	1c41      	adds	r1, r0, #1
 800a838:	d1c6      	bne.n	800a7c8 <__sflush_r+0x34>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0c3      	beq.n	800a7c8 <__sflush_r+0x34>
 800a840:	2b1d      	cmp	r3, #29
 800a842:	d001      	beq.n	800a848 <__sflush_r+0xb4>
 800a844:	2b16      	cmp	r3, #22
 800a846:	d101      	bne.n	800a84c <__sflush_r+0xb8>
 800a848:	602f      	str	r7, [r5, #0]
 800a84a:	e7b0      	b.n	800a7ae <__sflush_r+0x1a>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a858:	690f      	ldr	r7, [r1, #16]
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	d0a7      	beq.n	800a7ae <__sflush_r+0x1a>
 800a85e:	0793      	lsls	r3, r2, #30
 800a860:	680e      	ldr	r6, [r1, #0]
 800a862:	bf08      	it	eq
 800a864:	694b      	ldreq	r3, [r1, #20]
 800a866:	600f      	str	r7, [r1, #0]
 800a868:	bf18      	it	ne
 800a86a:	2300      	movne	r3, #0
 800a86c:	eba6 0807 	sub.w	r8, r6, r7
 800a870:	608b      	str	r3, [r1, #8]
 800a872:	f1b8 0f00 	cmp.w	r8, #0
 800a876:	dd9a      	ble.n	800a7ae <__sflush_r+0x1a>
 800a878:	4643      	mov	r3, r8
 800a87a:	463a      	mov	r2, r7
 800a87c:	6a21      	ldr	r1, [r4, #32]
 800a87e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a880:	4628      	mov	r0, r5
 800a882:	47b0      	blx	r6
 800a884:	2800      	cmp	r0, #0
 800a886:	dc07      	bgt.n	800a898 <__sflush_r+0x104>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a898:	4407      	add	r7, r0
 800a89a:	eba8 0800 	sub.w	r8, r8, r0
 800a89e:	e7e8      	b.n	800a872 <__sflush_r+0xde>
 800a8a0:	20400001 	.word	0x20400001

0800a8a4 <_fflush_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	690b      	ldr	r3, [r1, #16]
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	b1db      	cbz	r3, 800a8e6 <_fflush_r+0x42>
 800a8ae:	b118      	cbz	r0, 800a8b8 <_fflush_r+0x14>
 800a8b0:	6983      	ldr	r3, [r0, #24]
 800a8b2:	b90b      	cbnz	r3, 800a8b8 <_fflush_r+0x14>
 800a8b4:	f000 f860 	bl	800a978 <__sinit>
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <_fflush_r+0x48>)
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	d109      	bne.n	800a8d2 <_fflush_r+0x2e>
 800a8be:	686c      	ldr	r4, [r5, #4]
 800a8c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c4:	b17b      	cbz	r3, 800a8e6 <_fflush_r+0x42>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ce:	f7ff bf61 	b.w	800a794 <__sflush_r>
 800a8d2:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <_fflush_r+0x4c>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	d101      	bne.n	800a8dc <_fflush_r+0x38>
 800a8d8:	68ac      	ldr	r4, [r5, #8]
 800a8da:	e7f1      	b.n	800a8c0 <_fflush_r+0x1c>
 800a8dc:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <_fflush_r+0x50>)
 800a8de:	429c      	cmp	r4, r3
 800a8e0:	bf08      	it	eq
 800a8e2:	68ec      	ldreq	r4, [r5, #12]
 800a8e4:	e7ec      	b.n	800a8c0 <_fflush_r+0x1c>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800b0bc 	.word	0x0800b0bc
 800a8f0:	0800b0dc 	.word	0x0800b0dc
 800a8f4:	0800b09c 	.word	0x0800b09c

0800a8f8 <_cleanup_r>:
 800a8f8:	4901      	ldr	r1, [pc, #4]	; (800a900 <_cleanup_r+0x8>)
 800a8fa:	f000 b8a9 	b.w	800aa50 <_fwalk_reent>
 800a8fe:	bf00      	nop
 800a900:	0800a8a5 	.word	0x0800a8a5

0800a904 <std.isra.0>:
 800a904:	2300      	movs	r3, #0
 800a906:	b510      	push	{r4, lr}
 800a908:	4604      	mov	r4, r0
 800a90a:	6003      	str	r3, [r0, #0]
 800a90c:	6043      	str	r3, [r0, #4]
 800a90e:	6083      	str	r3, [r0, #8]
 800a910:	8181      	strh	r1, [r0, #12]
 800a912:	6643      	str	r3, [r0, #100]	; 0x64
 800a914:	81c2      	strh	r2, [r0, #14]
 800a916:	6103      	str	r3, [r0, #16]
 800a918:	6143      	str	r3, [r0, #20]
 800a91a:	6183      	str	r3, [r0, #24]
 800a91c:	4619      	mov	r1, r3
 800a91e:	2208      	movs	r2, #8
 800a920:	305c      	adds	r0, #92	; 0x5c
 800a922:	f000 f917 	bl	800ab54 <memset>
 800a926:	4b05      	ldr	r3, [pc, #20]	; (800a93c <std.isra.0+0x38>)
 800a928:	6263      	str	r3, [r4, #36]	; 0x24
 800a92a:	4b05      	ldr	r3, [pc, #20]	; (800a940 <std.isra.0+0x3c>)
 800a92c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a92e:	4b05      	ldr	r3, [pc, #20]	; (800a944 <std.isra.0+0x40>)
 800a930:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <std.isra.0+0x44>)
 800a934:	6224      	str	r4, [r4, #32]
 800a936:	6323      	str	r3, [r4, #48]	; 0x30
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	bf00      	nop
 800a93c:	0800ac5d 	.word	0x0800ac5d
 800a940:	0800ac7f 	.word	0x0800ac7f
 800a944:	0800acb7 	.word	0x0800acb7
 800a948:	0800acdb 	.word	0x0800acdb

0800a94c <__sfmoreglue>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	1e4a      	subs	r2, r1, #1
 800a950:	2568      	movs	r5, #104	; 0x68
 800a952:	4355      	muls	r5, r2
 800a954:	460e      	mov	r6, r1
 800a956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a95a:	f7ff fa9b 	bl	8009e94 <_malloc_r>
 800a95e:	4604      	mov	r4, r0
 800a960:	b140      	cbz	r0, 800a974 <__sfmoreglue+0x28>
 800a962:	2100      	movs	r1, #0
 800a964:	e880 0042 	stmia.w	r0, {r1, r6}
 800a968:	300c      	adds	r0, #12
 800a96a:	60a0      	str	r0, [r4, #8]
 800a96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a970:	f000 f8f0 	bl	800ab54 <memset>
 800a974:	4620      	mov	r0, r4
 800a976:	bd70      	pop	{r4, r5, r6, pc}

0800a978 <__sinit>:
 800a978:	6983      	ldr	r3, [r0, #24]
 800a97a:	b510      	push	{r4, lr}
 800a97c:	4604      	mov	r4, r0
 800a97e:	bb33      	cbnz	r3, 800a9ce <__sinit+0x56>
 800a980:	6483      	str	r3, [r0, #72]	; 0x48
 800a982:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a984:	6503      	str	r3, [r0, #80]	; 0x50
 800a986:	4b12      	ldr	r3, [pc, #72]	; (800a9d0 <__sinit+0x58>)
 800a988:	4a12      	ldr	r2, [pc, #72]	; (800a9d4 <__sinit+0x5c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6282      	str	r2, [r0, #40]	; 0x28
 800a98e:	4298      	cmp	r0, r3
 800a990:	bf04      	itt	eq
 800a992:	2301      	moveq	r3, #1
 800a994:	6183      	streq	r3, [r0, #24]
 800a996:	f000 f81f 	bl	800a9d8 <__sfp>
 800a99a:	6060      	str	r0, [r4, #4]
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f81b 	bl	800a9d8 <__sfp>
 800a9a2:	60a0      	str	r0, [r4, #8]
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 f817 	bl	800a9d8 <__sfp>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	60e0      	str	r0, [r4, #12]
 800a9ae:	2104      	movs	r1, #4
 800a9b0:	6860      	ldr	r0, [r4, #4]
 800a9b2:	f7ff ffa7 	bl	800a904 <std.isra.0>
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	2109      	movs	r1, #9
 800a9ba:	68a0      	ldr	r0, [r4, #8]
 800a9bc:	f7ff ffa2 	bl	800a904 <std.isra.0>
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	2112      	movs	r1, #18
 800a9c4:	68e0      	ldr	r0, [r4, #12]
 800a9c6:	f7ff ff9d 	bl	800a904 <std.isra.0>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	61a3      	str	r3, [r4, #24]
 800a9ce:	bd10      	pop	{r4, pc}
 800a9d0:	0800b040 	.word	0x0800b040
 800a9d4:	0800a8f9 	.word	0x0800a8f9

0800a9d8 <__sfp>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	4b1c      	ldr	r3, [pc, #112]	; (800aa4c <__sfp+0x74>)
 800a9dc:	681e      	ldr	r6, [r3, #0]
 800a9de:	69b3      	ldr	r3, [r6, #24]
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	b913      	cbnz	r3, 800a9ea <__sfp+0x12>
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ffc7 	bl	800a978 <__sinit>
 800a9ea:	3648      	adds	r6, #72	; 0x48
 800a9ec:	68b4      	ldr	r4, [r6, #8]
 800a9ee:	6873      	ldr	r3, [r6, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	d503      	bpl.n	800a9fc <__sfp+0x24>
 800a9f4:	6833      	ldr	r3, [r6, #0]
 800a9f6:	b133      	cbz	r3, 800aa06 <__sfp+0x2e>
 800a9f8:	6836      	ldr	r6, [r6, #0]
 800a9fa:	e7f7      	b.n	800a9ec <__sfp+0x14>
 800a9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa00:	b16d      	cbz	r5, 800aa1e <__sfp+0x46>
 800aa02:	3468      	adds	r4, #104	; 0x68
 800aa04:	e7f4      	b.n	800a9f0 <__sfp+0x18>
 800aa06:	2104      	movs	r1, #4
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ff9f 	bl	800a94c <__sfmoreglue>
 800aa0e:	6030      	str	r0, [r6, #0]
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d1f1      	bne.n	800a9f8 <__sfp+0x20>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa22:	81e3      	strh	r3, [r4, #14]
 800aa24:	2301      	movs	r3, #1
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	6665      	str	r5, [r4, #100]	; 0x64
 800aa2a:	6025      	str	r5, [r4, #0]
 800aa2c:	60a5      	str	r5, [r4, #8]
 800aa2e:	6065      	str	r5, [r4, #4]
 800aa30:	6125      	str	r5, [r4, #16]
 800aa32:	6165      	str	r5, [r4, #20]
 800aa34:	61a5      	str	r5, [r4, #24]
 800aa36:	2208      	movs	r2, #8
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa3e:	f000 f889 	bl	800ab54 <memset>
 800aa42:	6365      	str	r5, [r4, #52]	; 0x34
 800aa44:	63a5      	str	r5, [r4, #56]	; 0x38
 800aa46:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa48:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa4a:	e7e6      	b.n	800aa1a <__sfp+0x42>
 800aa4c:	0800b040 	.word	0x0800b040

0800aa50 <_fwalk_reent>:
 800aa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa54:	4680      	mov	r8, r0
 800aa56:	4689      	mov	r9, r1
 800aa58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa5c:	2600      	movs	r6, #0
 800aa5e:	b914      	cbnz	r4, 800aa66 <_fwalk_reent+0x16>
 800aa60:	4630      	mov	r0, r6
 800aa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa66:	68a5      	ldr	r5, [r4, #8]
 800aa68:	6867      	ldr	r7, [r4, #4]
 800aa6a:	3f01      	subs	r7, #1
 800aa6c:	d501      	bpl.n	800aa72 <_fwalk_reent+0x22>
 800aa6e:	6824      	ldr	r4, [r4, #0]
 800aa70:	e7f5      	b.n	800aa5e <_fwalk_reent+0xe>
 800aa72:	89ab      	ldrh	r3, [r5, #12]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d907      	bls.n	800aa88 <_fwalk_reent+0x38>
 800aa78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	d003      	beq.n	800aa88 <_fwalk_reent+0x38>
 800aa80:	4629      	mov	r1, r5
 800aa82:	4640      	mov	r0, r8
 800aa84:	47c8      	blx	r9
 800aa86:	4306      	orrs	r6, r0
 800aa88:	3568      	adds	r5, #104	; 0x68
 800aa8a:	e7ee      	b.n	800aa6a <_fwalk_reent+0x1a>

0800aa8c <__swhatbuf_r>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	460e      	mov	r6, r1
 800aa90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa94:	2900      	cmp	r1, #0
 800aa96:	b090      	sub	sp, #64	; 0x40
 800aa98:	4614      	mov	r4, r2
 800aa9a:	461d      	mov	r5, r3
 800aa9c:	da07      	bge.n	800aaae <__swhatbuf_r+0x22>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	89b3      	ldrh	r3, [r6, #12]
 800aaa4:	061a      	lsls	r2, r3, #24
 800aaa6:	d410      	bmi.n	800aaca <__swhatbuf_r+0x3e>
 800aaa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaac:	e00e      	b.n	800aacc <__swhatbuf_r+0x40>
 800aaae:	aa01      	add	r2, sp, #4
 800aab0:	f000 f93a 	bl	800ad28 <_fstat_r>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	dbf2      	blt.n	800aa9e <__swhatbuf_r+0x12>
 800aab8:	9a02      	ldr	r2, [sp, #8]
 800aaba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aabe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aac2:	425a      	negs	r2, r3
 800aac4:	415a      	adcs	r2, r3
 800aac6:	602a      	str	r2, [r5, #0]
 800aac8:	e7ee      	b.n	800aaa8 <__swhatbuf_r+0x1c>
 800aaca:	2340      	movs	r3, #64	; 0x40
 800aacc:	2000      	movs	r0, #0
 800aace:	6023      	str	r3, [r4, #0]
 800aad0:	b010      	add	sp, #64	; 0x40
 800aad2:	bd70      	pop	{r4, r5, r6, pc}

0800aad4 <__smakebuf_r>:
 800aad4:	898b      	ldrh	r3, [r1, #12]
 800aad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aad8:	079d      	lsls	r5, r3, #30
 800aada:	4606      	mov	r6, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	d507      	bpl.n	800aaf0 <__smakebuf_r+0x1c>
 800aae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	6123      	str	r3, [r4, #16]
 800aae8:	2301      	movs	r3, #1
 800aaea:	6163      	str	r3, [r4, #20]
 800aaec:	b002      	add	sp, #8
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	ab01      	add	r3, sp, #4
 800aaf2:	466a      	mov	r2, sp
 800aaf4:	f7ff ffca 	bl	800aa8c <__swhatbuf_r>
 800aaf8:	9900      	ldr	r1, [sp, #0]
 800aafa:	4605      	mov	r5, r0
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff f9c9 	bl	8009e94 <_malloc_r>
 800ab02:	b948      	cbnz	r0, 800ab18 <__smakebuf_r+0x44>
 800ab04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab08:	059a      	lsls	r2, r3, #22
 800ab0a:	d4ef      	bmi.n	800aaec <__smakebuf_r+0x18>
 800ab0c:	f023 0303 	bic.w	r3, r3, #3
 800ab10:	f043 0302 	orr.w	r3, r3, #2
 800ab14:	81a3      	strh	r3, [r4, #12]
 800ab16:	e7e3      	b.n	800aae0 <__smakebuf_r+0xc>
 800ab18:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <__smakebuf_r+0x7c>)
 800ab1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	6020      	str	r0, [r4, #0]
 800ab20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	9b00      	ldr	r3, [sp, #0]
 800ab28:	6163      	str	r3, [r4, #20]
 800ab2a:	9b01      	ldr	r3, [sp, #4]
 800ab2c:	6120      	str	r0, [r4, #16]
 800ab2e:	b15b      	cbz	r3, 800ab48 <__smakebuf_r+0x74>
 800ab30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab34:	4630      	mov	r0, r6
 800ab36:	f000 f909 	bl	800ad4c <_isatty_r>
 800ab3a:	b128      	cbz	r0, 800ab48 <__smakebuf_r+0x74>
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	f023 0303 	bic.w	r3, r3, #3
 800ab42:	f043 0301 	orr.w	r3, r3, #1
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	431d      	orrs	r5, r3
 800ab4c:	81a5      	strh	r5, [r4, #12]
 800ab4e:	e7cd      	b.n	800aaec <__smakebuf_r+0x18>
 800ab50:	0800a8f9 	.word	0x0800a8f9

0800ab54 <memset>:
 800ab54:	4402      	add	r2, r0
 800ab56:	4603      	mov	r3, r0
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d100      	bne.n	800ab5e <memset+0xa>
 800ab5c:	4770      	bx	lr
 800ab5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab62:	e7f9      	b.n	800ab58 <memset+0x4>

0800ab64 <__malloc_lock>:
 800ab64:	4770      	bx	lr

0800ab66 <__malloc_unlock>:
 800ab66:	4770      	bx	lr

0800ab68 <_putc_r>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	4606      	mov	r6, r0
 800ab70:	b118      	cbz	r0, 800ab7a <_putc_r+0x12>
 800ab72:	6983      	ldr	r3, [r0, #24]
 800ab74:	b90b      	cbnz	r3, 800ab7a <_putc_r+0x12>
 800ab76:	f7ff feff 	bl	800a978 <__sinit>
 800ab7a:	4b13      	ldr	r3, [pc, #76]	; (800abc8 <_putc_r+0x60>)
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	d112      	bne.n	800aba6 <_putc_r+0x3e>
 800ab80:	6874      	ldr	r4, [r6, #4]
 800ab82:	68a3      	ldr	r3, [r4, #8]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	60a3      	str	r3, [r4, #8]
 800ab8a:	da16      	bge.n	800abba <_putc_r+0x52>
 800ab8c:	69a2      	ldr	r2, [r4, #24]
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	db02      	blt.n	800ab98 <_putc_r+0x30>
 800ab92:	b2eb      	uxtb	r3, r5
 800ab94:	2b0a      	cmp	r3, #10
 800ab96:	d110      	bne.n	800abba <_putc_r+0x52>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aba2:	f7ff bd2f 	b.w	800a604 <__swbuf_r>
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <_putc_r+0x64>)
 800aba8:	429c      	cmp	r4, r3
 800abaa:	d101      	bne.n	800abb0 <_putc_r+0x48>
 800abac:	68b4      	ldr	r4, [r6, #8]
 800abae:	e7e8      	b.n	800ab82 <_putc_r+0x1a>
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <_putc_r+0x68>)
 800abb2:	429c      	cmp	r4, r3
 800abb4:	bf08      	it	eq
 800abb6:	68f4      	ldreq	r4, [r6, #12]
 800abb8:	e7e3      	b.n	800ab82 <_putc_r+0x1a>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	6022      	str	r2, [r4, #0]
 800abc0:	701d      	strb	r5, [r3, #0]
 800abc2:	b2e8      	uxtb	r0, r5
 800abc4:	bd70      	pop	{r4, r5, r6, pc}
 800abc6:	bf00      	nop
 800abc8:	0800b0bc 	.word	0x0800b0bc
 800abcc:	0800b0dc 	.word	0x0800b0dc
 800abd0:	0800b09c 	.word	0x0800b09c

0800abd4 <_raise_r>:
 800abd4:	291f      	cmp	r1, #31
 800abd6:	b538      	push	{r3, r4, r5, lr}
 800abd8:	4604      	mov	r4, r0
 800abda:	460d      	mov	r5, r1
 800abdc:	d904      	bls.n	800abe8 <_raise_r+0x14>
 800abde:	2316      	movs	r3, #22
 800abe0:	6003      	str	r3, [r0, #0]
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abea:	b112      	cbz	r2, 800abf2 <_raise_r+0x1e>
 800abec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abf0:	b94b      	cbnz	r3, 800ac06 <_raise_r+0x32>
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 f830 	bl	800ac58 <_getpid_r>
 800abf8:	462a      	mov	r2, r5
 800abfa:	4601      	mov	r1, r0
 800abfc:	4620      	mov	r0, r4
 800abfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac02:	f000 b817 	b.w	800ac34 <_kill_r>
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d00a      	beq.n	800ac20 <_raise_r+0x4c>
 800ac0a:	1c59      	adds	r1, r3, #1
 800ac0c:	d103      	bne.n	800ac16 <_raise_r+0x42>
 800ac0e:	2316      	movs	r3, #22
 800ac10:	6003      	str	r3, [r0, #0]
 800ac12:	2001      	movs	r0, #1
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	2400      	movs	r4, #0
 800ac18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	4798      	blx	r3
 800ac20:	2000      	movs	r0, #0
 800ac22:	bd38      	pop	{r3, r4, r5, pc}

0800ac24 <raise>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <raise+0xc>)
 800ac26:	4601      	mov	r1, r0
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f7ff bfd3 	b.w	800abd4 <_raise_r>
 800ac2e:	bf00      	nop
 800ac30:	20000a80 	.word	0x20000a80

0800ac34 <_kill_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4c07      	ldr	r4, [pc, #28]	; (800ac54 <_kill_r+0x20>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	4611      	mov	r1, r2
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	f000 f8d7 	bl	800adf4 <_kill>
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	d102      	bne.n	800ac50 <_kill_r+0x1c>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	b103      	cbz	r3, 800ac50 <_kill_r+0x1c>
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	bd38      	pop	{r3, r4, r5, pc}
 800ac52:	bf00      	nop
 800ac54:	2001192c 	.word	0x2001192c

0800ac58 <_getpid_r>:
 800ac58:	f000 b8bc 	b.w	800add4 <_getpid>

0800ac5c <__sread>:
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	460c      	mov	r4, r1
 800ac60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac64:	f000 f894 	bl	800ad90 <_read_r>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	bfab      	itete	ge
 800ac6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac70:	181b      	addge	r3, r3, r0
 800ac72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac76:	bfac      	ite	ge
 800ac78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac7a:	81a3      	strhlt	r3, [r4, #12]
 800ac7c:	bd10      	pop	{r4, pc}

0800ac7e <__swrite>:
 800ac7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac82:	461f      	mov	r7, r3
 800ac84:	898b      	ldrh	r3, [r1, #12]
 800ac86:	05db      	lsls	r3, r3, #23
 800ac88:	4605      	mov	r5, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	d505      	bpl.n	800ac9c <__swrite+0x1e>
 800ac90:	2302      	movs	r3, #2
 800ac92:	2200      	movs	r2, #0
 800ac94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac98:	f000 f868 	bl	800ad6c <_lseek_r>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aca6:	81a3      	strh	r3, [r4, #12]
 800aca8:	4632      	mov	r2, r6
 800acaa:	463b      	mov	r3, r7
 800acac:	4628      	mov	r0, r5
 800acae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb2:	f000 b817 	b.w	800ace4 <_write_r>

0800acb6 <__sseek>:
 800acb6:	b510      	push	{r4, lr}
 800acb8:	460c      	mov	r4, r1
 800acba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acbe:	f000 f855 	bl	800ad6c <_lseek_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	bf15      	itete	ne
 800acc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800acca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acd2:	81a3      	strheq	r3, [r4, #12]
 800acd4:	bf18      	it	ne
 800acd6:	81a3      	strhne	r3, [r4, #12]
 800acd8:	bd10      	pop	{r4, pc}

0800acda <__sclose>:
 800acda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acde:	f000 b813 	b.w	800ad08 <_close_r>
	...

0800ace4 <_write_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4c07      	ldr	r4, [pc, #28]	; (800ad04 <_write_r+0x20>)
 800ace8:	4605      	mov	r5, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f000 f8a4 	bl	800ae40 <_write>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_write_r+0x1e>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_write_r+0x1e>
 800ad00:	602b      	str	r3, [r5, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	2001192c 	.word	0x2001192c

0800ad08 <_close_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4c06      	ldr	r4, [pc, #24]	; (800ad24 <_close_r+0x1c>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4605      	mov	r5, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	6023      	str	r3, [r4, #0]
 800ad14:	f000 f84e 	bl	800adb4 <_close>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_close_r+0x1a>
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_close_r+0x1a>
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	2001192c 	.word	0x2001192c

0800ad28 <_fstat_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4c07      	ldr	r4, [pc, #28]	; (800ad48 <_fstat_r+0x20>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4605      	mov	r5, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	4611      	mov	r1, r2
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	f000 f845 	bl	800adc4 <_fstat>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d102      	bne.n	800ad44 <_fstat_r+0x1c>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	b103      	cbz	r3, 800ad44 <_fstat_r+0x1c>
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
 800ad46:	bf00      	nop
 800ad48:	2001192c 	.word	0x2001192c

0800ad4c <_isatty_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4c06      	ldr	r4, [pc, #24]	; (800ad68 <_isatty_r+0x1c>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4605      	mov	r5, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	f000 f844 	bl	800ade4 <_isatty>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_isatty_r+0x1a>
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_isatty_r+0x1a>
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	2001192c 	.word	0x2001192c

0800ad6c <_lseek_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4c07      	ldr	r4, [pc, #28]	; (800ad8c <_lseek_r+0x20>)
 800ad70:	4605      	mov	r5, r0
 800ad72:	4608      	mov	r0, r1
 800ad74:	4611      	mov	r1, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	6022      	str	r2, [r4, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f000 f842 	bl	800ae04 <_lseek>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_lseek_r+0x1e>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_lseek_r+0x1e>
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	2001192c 	.word	0x2001192c

0800ad90 <_read_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4c07      	ldr	r4, [pc, #28]	; (800adb0 <_read_r+0x20>)
 800ad94:	4605      	mov	r5, r0
 800ad96:	4608      	mov	r0, r1
 800ad98:	4611      	mov	r1, r2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	6022      	str	r2, [r4, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f000 f838 	bl	800ae14 <_read>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_read_r+0x1e>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	b103      	cbz	r3, 800adae <_read_r+0x1e>
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	2001192c 	.word	0x2001192c

0800adb4 <_close>:
 800adb4:	4b02      	ldr	r3, [pc, #8]	; (800adc0 <_close+0xc>)
 800adb6:	2258      	movs	r2, #88	; 0x58
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	f04f 30ff 	mov.w	r0, #4294967295
 800adbe:	4770      	bx	lr
 800adc0:	2001192c 	.word	0x2001192c

0800adc4 <_fstat>:
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <_fstat+0xc>)
 800adc6:	2258      	movs	r2, #88	; 0x58
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	4770      	bx	lr
 800add0:	2001192c 	.word	0x2001192c

0800add4 <_getpid>:
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <_getpid+0xc>)
 800add6:	2258      	movs	r2, #88	; 0x58
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	f04f 30ff 	mov.w	r0, #4294967295
 800adde:	4770      	bx	lr
 800ade0:	2001192c 	.word	0x2001192c

0800ade4 <_isatty>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <_isatty+0xc>)
 800ade6:	2258      	movs	r2, #88	; 0x58
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	2000      	movs	r0, #0
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	2001192c 	.word	0x2001192c

0800adf4 <_kill>:
 800adf4:	4b02      	ldr	r3, [pc, #8]	; (800ae00 <_kill+0xc>)
 800adf6:	2258      	movs	r2, #88	; 0x58
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	f04f 30ff 	mov.w	r0, #4294967295
 800adfe:	4770      	bx	lr
 800ae00:	2001192c 	.word	0x2001192c

0800ae04 <_lseek>:
 800ae04:	4b02      	ldr	r3, [pc, #8]	; (800ae10 <_lseek+0xc>)
 800ae06:	2258      	movs	r2, #88	; 0x58
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0e:	4770      	bx	lr
 800ae10:	2001192c 	.word	0x2001192c

0800ae14 <_read>:
 800ae14:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <_read+0xc>)
 800ae16:	2258      	movs	r2, #88	; 0x58
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	4770      	bx	lr
 800ae20:	2001192c 	.word	0x2001192c

0800ae24 <_sbrk>:
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <_sbrk+0x14>)
 800ae26:	6819      	ldr	r1, [r3, #0]
 800ae28:	4602      	mov	r2, r0
 800ae2a:	b909      	cbnz	r1, 800ae30 <_sbrk+0xc>
 800ae2c:	4903      	ldr	r1, [pc, #12]	; (800ae3c <_sbrk+0x18>)
 800ae2e:	6019      	str	r1, [r3, #0]
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	4402      	add	r2, r0
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	4770      	bx	lr
 800ae38:	2000f958 	.word	0x2000f958
 800ae3c:	20011930 	.word	0x20011930

0800ae40 <_write>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <_write+0xc>)
 800ae42:	2258      	movs	r2, #88	; 0x58
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	4770      	bx	lr
 800ae4c:	2001192c 	.word	0x2001192c

0800ae50 <_exit>:
 800ae50:	e7fe      	b.n	800ae50 <_exit>
	...

0800ae54 <_init>:
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae56:	bf00      	nop
 800ae58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae5a:	bc08      	pop	{r3}
 800ae5c:	469e      	mov	lr, r3
 800ae5e:	4770      	bx	lr

0800ae60 <_fini>:
 800ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae62:	bf00      	nop
 800ae64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae66:	bc08      	pop	{r3}
 800ae68:	469e      	mov	lr, r3
 800ae6a:	4770      	bx	lr
